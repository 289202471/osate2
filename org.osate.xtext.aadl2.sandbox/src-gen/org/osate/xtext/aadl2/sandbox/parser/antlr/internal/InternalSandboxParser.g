/*
* generated by Xtext
*/
parser grammar InternalSandboxParser;

options {
	tokenVocab=InternalSandboxLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.osate.xtext.aadl2.sandbox.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.xtext.aadl2.sandbox.services.SandboxGrammarAccess;

}

@members {


	private SandboxGrammarAccess grammarAccess;
	 	
	public InternalSandboxParser(TokenStream input, SandboxGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Sandbox";	
	} 
	   	   	
	@Override
	protected SandboxGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleSandbox
entryRuleSandbox returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSandboxRule()); }
	 iv_ruleSandbox=ruleSandbox 
	 { $current=$iv_ruleSandbox.current; } 
	 EOF 
;

// Rule Sandbox
ruleSandbox returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_7
    {
    	newLeafNode(otherlv_0, grammarAccess.getSandboxAccess().getSandboxKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSandboxAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSandboxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSandboxAccess().getSystemInstanceSystemConfigurationParserRuleCall_2_0()); 
	    }
		lv_systemInstance_2_0=ruleSystemConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSandboxRule());
	        }
       		add(
       			$current, 
       			"systemInstance",
        		lv_systemInstance_2_0, 
        		"SystemConfiguration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSystemConfiguration
entryRuleSystemConfiguration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSystemConfigurationRule()); }
	 iv_ruleSystemConfiguration=ruleSystemConfiguration 
	 { $current=$iv_ruleSystemConfiguration.current; } 
	 EOF 
;

// Rule SystemConfiguration
ruleSystemConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_6
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemConfigurationAccess().getSystemKeyword_0());
    }

	otherlv_1=KEYWORD_8
    {
    	newLeafNode(otherlv_1, grammarAccess.getSystemConfigurationAccess().getInstanceKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSystemConfigurationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemConfigurationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)
	otherlv_3=KEYWORD_5
    {
    	newLeafNode(otherlv_3, grammarAccess.getSystemConfigurationAccess().getFromKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemConfigurationRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getSystemConfigurationAccess().getSystemImplementationSystemImplementationCrossReference_4_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemConfigurationAccess().getSystemInstanceProxySystemInstanceProxyParserRuleCall_5_0()); 
	    }
		lv_systemInstanceProxy_5_0=ruleSystemInstanceProxy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemConfigurationRule());
	        }
       		set(
       			$current, 
       			"systemInstanceProxy",
        		lv_systemInstanceProxy_5_0, 
        		"SystemInstanceProxy");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_6=KEYWORD_2
    {
    	newLeafNode(otherlv_6, grammarAccess.getSystemConfigurationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleSystemInstanceProxy
entryRuleSystemInstanceProxy returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSystemInstanceProxyRule()); }
	 iv_ruleSystemInstanceProxy=ruleSystemInstanceProxy 
	 { $current=$iv_ruleSystemInstanceProxy.current; } 
	 EOF 
;

// Rule SystemInstanceProxy
ruleSystemInstanceProxy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_4
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemInstanceProxyAccess().getToKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemInstanceProxyRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSystemInstanceProxyAccess().getInstanceRefEObjectCrossReference_1_0()); 
	}

)
))
;









