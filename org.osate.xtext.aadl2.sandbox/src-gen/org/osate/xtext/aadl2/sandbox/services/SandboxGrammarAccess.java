/*
* generated by Xtext
*/

package org.osate.xtext.aadl2.sandbox.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.xtext.aadl2.services.Aadl2GrammarAccess;
import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class SandboxGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SandboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sandbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSandboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSystemInstanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSystemInstanceSystemConfigurationParserRuleCall_2_0 = (RuleCall)cSystemInstanceAssignment_2.eContents().get(0);
		
		//Sandbox:
		//	"sandbox" name=ID systemInstance+=SystemConfiguration;
		public ParserRule getRule() { return rule; }

		//"sandbox" name=ID systemInstance+=SystemConfiguration
		public Group getGroup() { return cGroup; }

		//"sandbox"
		public Keyword getSandboxKeyword_0() { return cSandboxKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//systemInstance+=SystemConfiguration
		public Assignment getSystemInstanceAssignment_2() { return cSystemInstanceAssignment_2; }

		//SystemConfiguration
		public RuleCall getSystemInstanceSystemConfigurationParserRuleCall_2_0() { return cSystemInstanceSystemConfigurationParserRuleCall_2_0; }
	}

	public class SystemConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInstanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSystemImplementationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSystemImplementationAadlPackageParserRuleCall_4_0 = (RuleCall)cSystemImplementationAssignment_4.eContents().get(0);
		private final Assignment cSystemInstanceProxyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSystemInstanceProxySystemInstanceProxyParserRuleCall_5_0 = (RuleCall)cSystemInstanceProxyAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SystemConfiguration:
		//	"system" "instance" name=ID "from" systemImplementation=AadlPackage //[aadl2::SystemImplementation]//[ecore::EObject|QIREF]
		//	systemInstanceProxy=SystemInstanceProxy? ";";
		public ParserRule getRule() { return rule; }

		//"system" "instance" name=ID "from" systemImplementation=AadlPackage //[aadl2::SystemImplementation]//[ecore::EObject|QIREF]
		//systemInstanceProxy=SystemInstanceProxy? ";"
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//"instance"
		public Keyword getInstanceKeyword_1() { return cInstanceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }

		//systemImplementation=AadlPackage
		public Assignment getSystemImplementationAssignment_4() { return cSystemImplementationAssignment_4; }

		//AadlPackage
		public RuleCall getSystemImplementationAadlPackageParserRuleCall_4_0() { return cSystemImplementationAadlPackageParserRuleCall_4_0; }

		//systemInstanceProxy=SystemInstanceProxy?
		public Assignment getSystemInstanceProxyAssignment_5() { return cSystemInstanceProxyAssignment_5; }

		//SystemInstanceProxy
		public RuleCall getSystemInstanceProxySystemInstanceProxyParserRuleCall_5_0() { return cSystemInstanceProxySystemInstanceProxyParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class SystemInstanceProxyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemInstanceProxy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInstanceRefSystemImplementationCrossReference_1_0 = (CrossReference)cInstanceRefAssignment_1.eContents().get(0);
		private final RuleCall cInstanceRefSystemImplementationIDTerminalRuleCall_1_0_1 = (RuleCall)cInstanceRefSystemImplementationCrossReference_1_0.eContents().get(1);
		
		//SystemInstanceProxy:
		//	"to" instanceRef=[aadl2::SystemImplementation];
		public ParserRule getRule() { return rule; }

		//"to" instanceRef=[aadl2::SystemImplementation]
		public Group getGroup() { return cGroup; }

		//"to"
		public Keyword getToKeyword_0() { return cToKeyword_0; }

		//instanceRef=[aadl2::SystemImplementation]
		public Assignment getInstanceRefAssignment_1() { return cInstanceRefAssignment_1; }

		//[aadl2::SystemImplementation]
		public CrossReference getInstanceRefSystemImplementationCrossReference_1_0() { return cInstanceRefSystemImplementationCrossReference_1_0; }

		//ID
		public RuleCall getInstanceRefSystemImplementationIDTerminalRuleCall_1_0_1() { return cInstanceRefSystemImplementationIDTerminalRuleCall_1_0_1; }
	}

	public class QIREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QIREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// component implementation anme
		//QIREF:
		//	(ID "::")* ID "." ID;
		public ParserRule getRule() { return rule; }

		//(ID "::")* ID "." ID
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
	}

	public class QPREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QPREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QPREF:
		//	(ID "::")* ID;
		public ParserRule getRule() { return rule; }

		//(ID "::")* ID
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private SandboxElements pSandbox;
	private SystemConfigurationElements pSystemConfiguration;
	private SystemInstanceProxyElements pSystemInstanceProxy;
	private QIREFElements pQIREF;
	private QPREFElements pQPREF;
	
	private final GrammarProvider grammarProvider;

	private Aadl2GrammarAccess gaAadl2;

	@Inject
	public SandboxGrammarAccess(GrammarProvider grammarProvider,
		Aadl2GrammarAccess gaAadl2) {
		this.grammarProvider = grammarProvider;
		this.gaAadl2 = gaAadl2;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public Aadl2GrammarAccess getAadl2GrammarAccess() {
		return gaAadl2;
	}

	
	//Sandbox:
	//	"sandbox" name=ID systemInstance+=SystemConfiguration;
	public SandboxElements getSandboxAccess() {
		return (pSandbox != null) ? pSandbox : (pSandbox = new SandboxElements());
	}
	
	public ParserRule getSandboxRule() {
		return getSandboxAccess().getRule();
	}

	//SystemConfiguration:
	//	"system" "instance" name=ID "from" systemImplementation=AadlPackage //[aadl2::SystemImplementation]//[ecore::EObject|QIREF]
	//	systemInstanceProxy=SystemInstanceProxy? ";";
	public SystemConfigurationElements getSystemConfigurationAccess() {
		return (pSystemConfiguration != null) ? pSystemConfiguration : (pSystemConfiguration = new SystemConfigurationElements());
	}
	
	public ParserRule getSystemConfigurationRule() {
		return getSystemConfigurationAccess().getRule();
	}

	//SystemInstanceProxy:
	//	"to" instanceRef=[aadl2::SystemImplementation];
	public SystemInstanceProxyElements getSystemInstanceProxyAccess() {
		return (pSystemInstanceProxy != null) ? pSystemInstanceProxy : (pSystemInstanceProxy = new SystemInstanceProxyElements());
	}
	
	public ParserRule getSystemInstanceProxyRule() {
		return getSystemInstanceProxyAccess().getRule();
	}

	//// component implementation anme
	//QIREF:
	//	(ID "::")* ID "." ID;
	public QIREFElements getQIREFAccess() {
		return (pQIREF != null) ? pQIREF : (pQIREF = new QIREFElements());
	}
	
	public ParserRule getQIREFRule() {
		return getQIREFAccess().getRule();
	}

	//QPREF:
	//	(ID "::")* ID;
	public QPREFElements getQPREFAccess() {
		return (pQPREF != null) ? pQPREF : (pQPREF = new QPREFElements());
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//Model returns aadl2::ModelUnit:
	//	AadlPackage | PropertySet;
	public Aadl2GrammarAccess.ModelElements getModelAccess() {
		return gaAadl2.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//AadlPackage returns aadl2::AadlPackage:
	//	"package" name=PNAME (ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection? |
	//	ownedPrivateSection=PrivatePackageSection) ("properties" ownedPropertyAssociation+=BasicPropertyAssociation+)? //| (noProperties?='none' ';')
	//	"end" ID ("::" ID)* ";";
	public Aadl2GrammarAccess.AadlPackageElements getAadlPackageAccess() {
		return gaAadl2.getAadlPackageAccess();
	}
	
	public ParserRule getAadlPackageRule() {
		return getAadlPackageAccess().getRule();
	}

	//PublicPackageSection returns aadl2::PublicPackageSection:
	//	{aadl2::PublicPackageSection} "public" ("with" importedUnit+=[aadl2::ModelUnit|PNAME] (","
	//	importedUnit+=[aadl2::ModelUnit|PNAME])* ";" | ownedPackageRename+=PackageRename |
	//	ownedFeatureGroupTypeRename+=FGTRename | ownedComponentTypeRename+=CTRename)* (ownedClassifier+=Classifier |
	//	ownedAnnexLibrary+=AnnexLibrary)*;
	public Aadl2GrammarAccess.PublicPackageSectionElements getPublicPackageSectionAccess() {
		return gaAadl2.getPublicPackageSectionAccess();
	}
	
	public ParserRule getPublicPackageSectionRule() {
		return getPublicPackageSectionAccess().getRule();
	}

	//PrivatePackageSection returns aadl2::PrivatePackageSection:
	//	{aadl2::PrivatePackageSection} "private" ("with" importedUnit+=[aadl2::ModelUnit|PNAME] (","
	//	importedUnit+=[aadl2::ModelUnit|PNAME])* ";" | ownedPackageRename+=PackageRename |
	//	ownedFeatureGroupTypeRename+=FGTRename | ownedComponentTypeRename+=CTRename)* (ownedClassifier+=Classifier |
	//	ownedAnnexLibrary+=AnnexLibrary)*;
	public Aadl2GrammarAccess.PrivatePackageSectionElements getPrivatePackageSectionAccess() {
		return gaAadl2.getPrivatePackageSectionAccess();
	}
	
	public ParserRule getPrivatePackageSectionRule() {
		return getPrivatePackageSectionAccess().getRule();
	}

	//PackageRename returns aadl2::PackageRename:
	//	name=ID "renames" "package" renamedPackage=[aadl2::AadlPackage|PNAME] ("::" renameAll?="all")? ";";
	public Aadl2GrammarAccess.PackageRenameElements getPackageRenameAccess() {
		return gaAadl2.getPackageRenameAccess();
	}
	
	public ParserRule getPackageRenameRule() {
		return getPackageRenameAccess().getRule();
	}

	//FGTRename returns aadl2::FeatureGroupTypeRename:
	//	name=ID? "renames" "feature" "group" renamedFeatureGroupType=[aadl2::FeatureGroupType|QCREF] ";";
	public Aadl2GrammarAccess.FGTRenameElements getFGTRenameAccess() {
		return gaAadl2.getFGTRenameAccess();
	}
	
	public ParserRule getFGTRenameRule() {
		return getFGTRenameAccess().getRule();
	}

	//CTRename returns aadl2::ComponentTypeRename:
	//	name=ID? "renames" category=ComponentCategory renamedComponentType=[aadl2::ComponentType|QCREF] ";";
	public Aadl2GrammarAccess.CTRenameElements getCTRenameAccess() {
		return gaAadl2.getCTRenameAccess();
	}
	
	public ParserRule getCTRenameRule() {
		return getCTRenameAccess().getRule();
	}

	//TypeExtension returns aadl2::TypeExtension:
	//	"extends" extended=[aadl2::ComponentType|QCREF];
	public Aadl2GrammarAccess.TypeExtensionElements getTypeExtensionAccess() {
		return gaAadl2.getTypeExtensionAccess();
	}
	
	public ParserRule getTypeExtensionRule() {
		return getTypeExtensionAccess().getRule();
	}

	//ImplementationExtension returns aadl2::ImplementationExtension:
	//	"extends" extended=[aadl2::ComponentImplementation|QCREF];
	public Aadl2GrammarAccess.ImplementationExtensionElements getImplementationExtensionAccess() {
		return gaAadl2.getImplementationExtensionAccess();
	}
	
	public ParserRule getImplementationExtensionRule() {
		return getImplementationExtensionAccess().getRule();
	}

	//GroupExtension returns aadl2::GroupExtension:
	//	"extends" extended=[aadl2::FeatureGroupType|QCREF];
	public Aadl2GrammarAccess.GroupExtensionElements getGroupExtensionAccess() {
		return gaAadl2.getGroupExtensionAccess();
	}
	
	public ParserRule getGroupExtensionRule() {
		return getGroupExtensionAccess().getRule();
	}

	//ComponentCategory returns aadl2::ComponentCategory:
	//	"abstract" | "bus" | "data" | "device" | "memory" | "process" | "processor" | "subprogram" | "subprogram" "group" |
	//	"system" | "thread" "group" | "thread" | "virtual" "bus" | "virtual" "processor";
	public Aadl2GrammarAccess.ComponentCategoryElements getComponentCategoryAccess() {
		return gaAadl2.getComponentCategoryAccess();
	}
	
	public ParserRule getComponentCategoryRule() {
		return getComponentCategoryAccess().getRule();
	}

	////		|SubprogramGroupType | DataType | BusType|
	////		 VirtualBusType|MemoryType
	//Classifier returns aadl2::Classifier:
	//	ComponentType | ComponentImplementation | FeatureGroupType;
	public Aadl2GrammarAccess.ClassifierElements getClassifierAccess() {
		return gaAadl2.getClassifierAccess();
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}

	//ComponentType returns aadl2::ComponentType:
	//	(AbstractType | SystemType | VirtualProcessorType | SubprogramGroupType | DataType | BusType | VirtualBusType |
	//	MemoryType | ProcessorType | ProcessType | ThreadGroupType | ThreadType | DeviceType | SubprogramType) ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? ("requires" "modes" ownedMode+=RequiresMode+ |
	//	"modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.ComponentTypeElements getComponentTypeAccess() {
		return gaAadl2.getComponentTypeAccess();
	}
	
	public ParserRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//AbstractType returns aadl2::AbstractType:
	//	"abstract" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedBusAccess+=BusAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.AbstractTypeElements getAbstractTypeAccess() {
		return gaAadl2.getAbstractTypeAccess();
	}
	
	public ParserRule getAbstractTypeRule() {
		return getAbstractTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//SystemType returns aadl2::SystemType:
	//	"system" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (ownedPrototype+=Prototype+ | noPrototypes?="none"
	//	";"))? ("features" ((ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort |
	//	ownedFeatureGroup+=FeatureGroup | ownedDataAccess+=DataAccess | ownedBusAccess+=BusAccess |
	//	ownedSubprogramAccess+=SubprogramAccess | ownedSubprogramGroupAccess+=SubprogramGroupAccess |
	//	ownedAbstractFeature+=AbstractFeature)+ | noFeatures?="none" ";"))?;
	public Aadl2GrammarAccess.SystemTypeElements getSystemTypeAccess() {
		return gaAadl2.getSystemTypeAccess();
	}
	
	public ParserRule getSystemTypeRule() {
		return getSystemTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//ProcessType returns aadl2::ProcessType:
	//	"process" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.ProcessTypeElements getProcessTypeAccess() {
		return gaAadl2.getProcessTypeAccess();
	}
	
	public ParserRule getProcessTypeRule() {
		return getProcessTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//ThreadGroupType returns aadl2::ThreadGroupType:
	//	"thread" "group" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.ThreadGroupTypeElements getThreadGroupTypeAccess() {
		return gaAadl2.getThreadGroupTypeAccess();
	}
	
	public ParserRule getThreadGroupTypeRule() {
		return getThreadGroupTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//ThreadType returns aadl2::ThreadType:
	//	"thread" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.ThreadTypeElements getThreadTypeAccess() {
		return gaAadl2.getThreadTypeAccess();
	}
	
	public ParserRule getThreadTypeRule() {
		return getThreadTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//SubprogramType returns aadl2::SubprogramType:
	//	"subprogram" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedParameter+=Parameter |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.SubprogramTypeElements getSubprogramTypeAccess() {
		return gaAadl2.getSubprogramTypeAccess();
	}
	
	public ParserRule getSubprogramTypeRule() {
		return getSubprogramTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//SubprogramGroupType returns aadl2::SubprogramGroupType:
	//	"subprogram" "group" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedSubprogramAccess+=SubprogramAccess |
	//	ownedFeatureGroup+=FeatureGroup | ownedSubprogramGroupAccess+=SubprogramGroupAccess |
	//	ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.SubprogramGroupTypeElements getSubprogramGroupTypeAccess() {
		return gaAadl2.getSubprogramGroupTypeAccess();
	}
	
	public ParserRule getSubprogramGroupTypeRule() {
		return getSubprogramGroupTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//ProcessorType returns aadl2::ProcessorType:
	//	"processor" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedBusAccess+=BusAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.ProcessorTypeElements getProcessorTypeAccess() {
		return gaAadl2.getProcessorTypeAccess();
	}
	
	public ParserRule getProcessorTypeRule() {
		return getProcessorTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//DeviceType returns aadl2::DeviceType:
	//	"device" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedBusAccess+=BusAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.DeviceTypeElements getDeviceTypeAccess() {
		return gaAadl2.getDeviceTypeAccess();
	}
	
	public ParserRule getDeviceTypeRule() {
		return getDeviceTypeAccess().getRule();
	}

	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//MemoryType returns aadl2::MemoryType:
	//	"memory" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("features" (noFeatures?="none" ";" |
	//	(ownedFeatureGroup+=FeatureGroup | ownedBusAccess+=BusAccess | ownedDataPort+=DataPort | ownedEventPort+=EventPort |
	//	ownedEventDataPort+=EventDataPort | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.MemoryTypeElements getMemoryTypeAccess() {
		return gaAadl2.getMemoryTypeAccess();
	}
	
	public ParserRule getMemoryTypeRule() {
		return getMemoryTypeAccess().getRule();
	}

	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//BusType returns aadl2::BusType:
	//	"bus" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("features" (noFeatures?="none" ";" |
	//	(ownedFeatureGroup+=FeatureGroup | ownedBusAccess+=BusAccess | ownedDataPort+=DataPort | ownedEventPort+=EventPort |
	//	ownedEventDataPort+=EventDataPort | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.BusTypeElements getBusTypeAccess() {
		return gaAadl2.getBusTypeAccess();
	}
	
	public ParserRule getBusTypeRule() {
		return getBusTypeAccess().getRule();
	}

	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//VirtualBusType returns aadl2::VirtualBusType:
	//	"virtual" "bus" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("features" (noFeatures?="none" ";" |
	//	(ownedFeatureGroup+=FeatureGroup | ownedDataPort+=DataPort | ownedEventPort+=EventPort |
	//	ownedEventDataPort+=EventDataPort | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.VirtualBusTypeElements getVirtualBusTypeAccess() {
		return gaAadl2.getVirtualBusTypeAccess();
	}
	
	public ParserRule getVirtualBusTypeRule() {
		return getVirtualBusTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('requires' 'modes'
	////	((ownedMode+=RequiresMode)+))?
	////	('modes' ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//VirtualProcessorType returns aadl2::VirtualProcessorType:
	//	"virtual" "processor" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedSubprogramAccess+=SubprogramAccess | ownedSubprogramGroupAccess+=SubprogramGroupAccess |
	//	ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.VirtualProcessorTypeElements getVirtualProcessorTypeAccess() {
		return gaAadl2.getVirtualProcessorTypeAccess();
	}
	
	public ParserRule getVirtualProcessorTypeRule() {
		return getVirtualProcessorTypeAccess().getRule();
	}

	////	('flows'
	////	((ownedFlowSpecification+=FlowSpecification)+ | (noFlows?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID ';'
	//DataType returns aadl2::DataType:
	//	"data" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("features" (noFeatures?="none" ";" |
	//	(ownedFeatureGroup+=FeatureGroup | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))?;
	public Aadl2GrammarAccess.DataTypeElements getDataTypeAccess() {
		return gaAadl2.getDataTypeAccess();
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//// Component Implementations: add calls for threads and subprograms
	//ComponentImplementation returns aadl2::ComponentImplementation:
	//	(AbstractImplementation | SystemImplementation | ProcessorImplementation | ProcessImplementation |
	//	ThreadGroupImplementation | ThreadImplementation | DeviceImplementation | BusImplementation |
	//	VirtualProcessorImplementation | VirtualBusImplementation | MemoryImplementation | SubprogramImplementation |
	//	SubprogramGroupImplementation | DataImplementation) ("connections" ((ownedPortConnection+=PortConnection |
	//	ownedAccessConnection+=AccessConnection | ownedFeatureGroupConnection+=FeatureGroupConnection |
	//	ownedFeatureConnection+=FeatureConnection | ownedParameterConnection+=ParameterConnection)+ | noConnections?="none"
	//	";"))? ("flows" ((ownedFlowImplementation+=FlowImplementation | ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none"
	//	";"))? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID "." INAME ";";
	public Aadl2GrammarAccess.ComponentImplementationElements getComponentImplementationAccess() {
		return gaAadl2.getComponentImplementationAccess();
	}
	
	public ParserRule getComponentImplementationRule() {
		return getComponentImplementationAccess().getRule();
	}

	//Realization returns aadl2::Realization:
	//	implemented=[aadl2::SystemType];
	public Aadl2GrammarAccess.RealizationElements getRealizationAccess() {
		return gaAadl2.getRealizationAccess();
	}
	
	public ParserRule getRealizationRule() {
		return getRealizationAccess().getRule();
	}

	////	('connections'
	////	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	| ownedParameterConnection+=ParameterConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//AbstractImplementation returns aadl2::AbstractImplementation:
	//	"abstract" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedSystemSubcomponent+=SystemSubcomponent | ownedSubprogramSubcomponent+=SubprogramSubcomponent |
	//	ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent | ownedThreadSubcomponent+=ThreadSubcomponent |
	//	ownedThreadGroupSubcomponent+=ThreadGroupSubcomponent | ownedProcessSubcomponent+=ProcessSubcomponent |
	//	ownedProcessorSubcomponent+=ProcessorSubcomponent | ownedVirtualProcessorSubcomponent+=VirtualProcessorSubcomponent |
	//	ownedMemorySubcomponent+=MemorySubcomponent | ownedDeviceSubcomponent+=DeviceSubcomponent |
	//	ownedBusSubcomponent+=BusSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ | noSubcomponents?="none"
	//	";"))? ("calls" (ownedSubprogramCallSequence+=SubprogramCallSequence+ | noCalls?="none" ";"))?;
	public Aadl2GrammarAccess.AbstractImplementationElements getAbstractImplementationAccess() {
		return gaAadl2.getAbstractImplementationAccess();
	}
	
	public ParserRule getAbstractImplementationRule() {
		return getAbstractImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	| ownedParameterConnection+=ParameterConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//SystemImplementation returns aadl2::SystemImplementation:
	//	"system" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedSystemSubcomponent+=SystemSubcomponent | ownedSubprogramSubcomponent+=SubprogramSubcomponent |
	//	ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent | ownedProcessSubcomponent+=ProcessSubcomponent |
	//	ownedProcessorSubcomponent+=ProcessorSubcomponent | ownedVirtualProcessorSubcomponent+=VirtualProcessorSubcomponent |
	//	ownedMemorySubcomponent+=MemorySubcomponent | ownedDeviceSubcomponent+=DeviceSubcomponent |
	//	ownedBusSubcomponent+=BusSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ | noSubcomponents?="none"
	//	";"))?;
	public Aadl2GrammarAccess.SystemImplementationElements getSystemImplementationAccess() {
		return gaAadl2.getSystemImplementationAccess();
	}
	
	public ParserRule getSystemImplementationRule() {
		return getSystemImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	| ownedParameterConnection+=ParameterConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//ProcessImplementation returns aadl2::ProcessImplementation:
	//	"process" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedThreadGroupSubcomponent+=ThreadGroupSubcomponent | ownedThreadSubcomponent+=ThreadSubcomponent |
	//	ownedSubprogramSubcomponent+=SubprogramSubcomponent | ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ | noSubcomponents?="none"
	//	";"))?;
	public Aadl2GrammarAccess.ProcessImplementationElements getProcessImplementationAccess() {
		return gaAadl2.getProcessImplementationAccess();
	}
	
	public ParserRule getProcessImplementationRule() {
		return getProcessImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	| ownedParameterConnection+=ParameterConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//ThreadGroupImplementation returns aadl2::ThreadGroupImplementation:
	//	"thread" "group" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension?
	//	("(" ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedThreadGroupSubcomponent+=ThreadGroupSubcomponent | ownedThreadSubcomponent+=ThreadSubcomponent |
	//	ownedSubprogramSubcomponent+=SubprogramSubcomponent | ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ | noSubcomponents?="none"
	//	";"))?;
	public Aadl2GrammarAccess.ThreadGroupImplementationElements getThreadGroupImplementationAccess() {
		return gaAadl2.getThreadGroupImplementationAccess();
	}
	
	public ParserRule getThreadGroupImplementationRule() {
		return getThreadGroupImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	| ownedParameterConnection+=ParameterConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//ThreadImplementation returns aadl2::ThreadImplementation:
	//	"thread" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedSubprogramSubcomponent+=SubprogramSubcomponent | ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent
	//	| ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ |
	//	noSubcomponents?="none" ";"))? ("calls" (ownedSubprogramCallSequence+=SubprogramCallSequence+ | noCalls?="none"
	//	";"))?;
	public Aadl2GrammarAccess.ThreadImplementationElements getThreadImplementationAccess() {
		return gaAadl2.getThreadImplementationAccess();
	}
	
	public ParserRule getThreadImplementationRule() {
		return getThreadImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	| ownedParameterConnection+=ParameterConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//SubprogramImplementation returns aadl2::SubprogramImplementation:
	//	"subprogram" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedDataSubcomponent+=DataSubcomponent)+ |
	//	noSubcomponents?="none" ";"))? ("calls" (ownedSubprogramCallSequence+=SubprogramCallSequence+ | noCalls?="none"
	//	";"))?;
	public Aadl2GrammarAccess.SubprogramImplementationElements getSubprogramImplementationAccess() {
		return gaAadl2.getSubprogramImplementationAccess();
	}
	
	public ParserRule getSubprogramImplementationRule() {
		return getSubprogramImplementationAccess().getRule();
	}

	////	('connections'
	////	(( ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////    )+
	////	| (noConnections?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//SubprogramGroupImplementation returns aadl2::SubprogramGroupImplementation:
	//	"subprogram" "group" "implementation" ownedRealization=Realization "." name=INAME
	//	ownedExtension=ImplementationExtension? ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes" (ownedPrototype+=Prototype+ | noPrototypes?="none"
	//	";"))? ("subcomponents" ((ownedSubprogramSubcomponent+=SubprogramSubcomponent // allow-errata:  |ownedDataSubcomponent+=DataSubcomponent 
	//	| ownedAbstractSubcomponent+=AbstractSubcomponent | ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent)+ |
	//	noSubcomponents?="none" ";"))?;
	public Aadl2GrammarAccess.SubprogramGroupImplementationElements getSubprogramGroupImplementationAccess() {
		return gaAadl2.getSubprogramGroupImplementationAccess();
	}
	
	public ParserRule getSubprogramGroupImplementationRule() {
		return getSubprogramGroupImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//ProcessorImplementation returns aadl2::ProcessorImplementation:
	//	"processor" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedMemorySubcomponent+=MemorySubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent |
	//	ownedBusSubcomponent+=BusSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent |
	//	ownedVirtualProcessorSubcomponent+=VirtualProcessorSubcomponent)+ | noSubcomponents?="none" ";"))?;
	public Aadl2GrammarAccess.ProcessorImplementationElements getProcessorImplementationAccess() {
		return gaAadl2.getProcessorImplementationAccess();
	}
	
	public ParserRule getProcessorImplementationRule() {
		return getProcessorImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//VirtualProcessorImplementation returns aadl2::VirtualProcessorImplementation:
	//	"virtual" "processor" "implementation" ownedRealization=Realization "." name=INAME
	//	ownedExtension=ImplementationExtension? ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes" (ownedPrototype+=Prototype+ | noPrototypes?="none"
	//	";"))? ("subcomponents" ((ownedAbstractSubcomponent+=AbstractSubcomponent |
	//	ownedVirtualBusSubcomponent+=VirtualBusSubcomponent |
	//	ownedVirtualProcessorSubcomponent+=VirtualProcessorSubcomponent)+ | noSubcomponents?="none" ";"))?;
	public Aadl2GrammarAccess.VirtualProcessorImplementationElements getVirtualProcessorImplementationAccess() {
		return gaAadl2.getVirtualProcessorImplementationAccess();
	}
	
	public ParserRule getVirtualProcessorImplementationRule() {
		return getVirtualProcessorImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	| ownedParameterConnection+=ParameterConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//DeviceImplementation returns aadl2::DeviceImplementation:
	//	"device" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedDataSubcomponent+=DataSubcomponent |
	//	ownedVirtualBusSubcomponent+=VirtualBusSubcomponent | ownedBusSubcomponent+=BusSubcomponent)+ |
	//	noSubcomponents?="none" ";"))?;
	public Aadl2GrammarAccess.DeviceImplementationElements getDeviceImplementationAccess() {
		return gaAadl2.getDeviceImplementationAccess();
	}
	
	public ParserRule getDeviceImplementationRule() {
		return getDeviceImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//MemoryImplementation returns aadl2::MemoryImplementation:
	//	"memory" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedMemorySubcomponent+=MemorySubcomponent |
	//	ownedBusSubcomponent+=BusSubcomponent)+ | noSubcomponents?="none" ";"))?;
	public Aadl2GrammarAccess.MemoryImplementationElements getMemoryImplementationAccess() {
		return gaAadl2.getMemoryImplementationAccess();
	}
	
	public ParserRule getMemoryImplementationRule() {
		return getMemoryImplementationAccess().getRule();
	}

	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//BusImplementation returns aadl2::BusImplementation:
	//	"bus" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent)+ |
	//	noSubcomponents?="none" ";"))?;
	public Aadl2GrammarAccess.BusImplementationElements getBusImplementationAccess() {
		return gaAadl2.getBusImplementationAccess();
	}
	
	public ParserRule getBusImplementationRule() {
		return getBusImplementationAccess().getRule();
	}

	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//VirtualBusImplementation returns aadl2::VirtualBusImplementation:
	//	"virtual" "bus" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension?
	//	("(" ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent)+ |
	//	noSubcomponents?="none" ";"))?;
	public Aadl2GrammarAccess.VirtualBusImplementationElements getVirtualBusImplementationAccess() {
		return gaAadl2.getVirtualBusImplementationAccess();
	}
	
	public ParserRule getVirtualBusImplementationRule() {
		return getVirtualBusImplementationAccess().getRule();
	}

	////	('connections'
	////	((ownedAccessConnection+=AccessConnection
	////	|ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection
	////	)+
	////	| (noConnections?='none' ';')))?
	////	('flows'
	////		((ownedFlowImplementation+=(FlowImplementation)|ownedEndToEndFlow+=(EndToEndFlow|EndToEndFlowRefinement))+ |
	////	(noFlows?='none' ';')))?
	////	('modes'
	////	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	////	| (noModes?='none' ';')))?
	////	('properties'
	////	((ownedPropertyAssociation+=ContainedPropertyAssociation)+
	////	| (noProperties?='none' ';')))?
	////	(ownedAnnexSubclause+=AnnexSubclause)*
	////	'end' ID '.' INAME ';'
	//DataImplementation returns aadl2::DataImplementation:
	//	{aadl2::DataImplementation} "data" "implementation" ownedRealization=Realization "." name=INAME
	//	ownedExtension=ImplementationExtension? ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes" (ownedPrototype+=Prototype+ | noPrototypes?="none"
	//	";"))? ("subcomponents" ((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedDataSubcomponent+=DataSubcomponent |
	//	ownedSubprogramSubcomponent+=SubprogramSubcomponent)+ | noSubcomponents?="none" ";"))?;
	public Aadl2GrammarAccess.DataImplementationElements getDataImplementationAccess() {
		return gaAadl2.getDataImplementationAccess();
	}
	
	public ParserRule getDataImplementationRule() {
		return getDataImplementationAccess().getRule();
	}

	/// * subprogram calls * / SubprogramCallSequence returns aadl2::SubprogramCallSequence:
	//	name=ID "{" ownedCallSpecification+=CallSpecification+ "}" ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")?
	//	("in" "modes" "(" (inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])*) ")")? ";";
	public Aadl2GrammarAccess.SubprogramCallSequenceElements getSubprogramCallSequenceAccess() {
		return gaAadl2.getSubprogramCallSequenceAccess();
	}
	
	public ParserRule getSubprogramCallSequenceRule() {
		return getSubprogramCallSequenceAccess().getRule();
	}

	//CallSpecification returns aadl2::CallSpecification:
	//	({aadl2::ProcessorCall} name=ID ":" "subprogram" "processor" "." subprogramAccessName=ID | {aadl2::SubprogramCall}
	//	name=ID ":" "subprogram" (context=[aadl2::CallContext|PNAME] "." calledSubprogram=[aadl2::CalledSubprogram] |
	//	calledSubprogram=[aadl2::CalledSubprogram|PNAME])) ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.CallSpecificationElements getCallSpecificationAccess() {
		return gaAadl2.getCallSpecificationAccess();
	}
	
	public ParserRule getCallSpecificationRule() {
		return getCallSpecificationAccess().getRule();
	}

	//// ******* Prototypes
	//Prototype returns aadl2::Prototype:
	//	((AbstractPrototype | BusPrototype | DevicePrototype | MemoryPrototype | ProcessPrototype | ProcessorPrototype |
	//	SubprogramPrototype | SubprogramGroupPrototype | ThreadPrototype | ThreadGroupPrototype | VirtualBusPrototype |
	//	VirtualProcessorPrototype | SystemPrototype | DataPrototype)
	//	constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? (array?="[" "]")? | FeatureGroupPrototype |
	//	FeaturePrototype) ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.PrototypeElements getPrototypeAccess() {
		return gaAadl2.getPrototypeAccess();
	}
	
	public ParserRule getPrototypeRule() {
		return getPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//AbstractPrototype returns aadl2::AbstractPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "abstract";
	public Aadl2GrammarAccess.AbstractPrototypeElements getAbstractPrototypeAccess() {
		return gaAadl2.getAbstractPrototypeAccess();
	}
	
	public ParserRule getAbstractPrototypeRule() {
		return getAbstractPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//BusPrototype returns aadl2::BusPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "bus";
	public Aadl2GrammarAccess.BusPrototypeElements getBusPrototypeAccess() {
		return gaAadl2.getBusPrototypeAccess();
	}
	
	public ParserRule getBusPrototypeRule() {
		return getBusPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//DataPrototype returns aadl2::DataPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "data";
	public Aadl2GrammarAccess.DataPrototypeElements getDataPrototypeAccess() {
		return gaAadl2.getDataPrototypeAccess();
	}
	
	public ParserRule getDataPrototypeRule() {
		return getDataPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//DevicePrototype returns aadl2::DevicePrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "device";
	public Aadl2GrammarAccess.DevicePrototypeElements getDevicePrototypeAccess() {
		return gaAadl2.getDevicePrototypeAccess();
	}
	
	public ParserRule getDevicePrototypeRule() {
		return getDevicePrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//MemoryPrototype returns aadl2::MemoryPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "memory";
	public Aadl2GrammarAccess.MemoryPrototypeElements getMemoryPrototypeAccess() {
		return gaAadl2.getMemoryPrototypeAccess();
	}
	
	public ParserRule getMemoryPrototypeRule() {
		return getMemoryPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//ProcessPrototype returns aadl2::ProcessPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "process";
	public Aadl2GrammarAccess.ProcessPrototypeElements getProcessPrototypeAccess() {
		return gaAadl2.getProcessPrototypeAccess();
	}
	
	public ParserRule getProcessPrototypeRule() {
		return getProcessPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//ProcessorPrototype returns aadl2::ProcessorPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "processor";
	public Aadl2GrammarAccess.ProcessorPrototypeElements getProcessorPrototypeAccess() {
		return gaAadl2.getProcessorPrototypeAccess();
	}
	
	public ParserRule getProcessorPrototypeRule() {
		return getProcessorPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//SubprogramPrototype returns aadl2::SubprogramPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "subprogram";
	public Aadl2GrammarAccess.SubprogramPrototypeElements getSubprogramPrototypeAccess() {
		return gaAadl2.getSubprogramPrototypeAccess();
	}
	
	public ParserRule getSubprogramPrototypeRule() {
		return getSubprogramPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//SubprogramGroupPrototype returns aadl2::SubprogramGroupPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "subprogram" "group";
	public Aadl2GrammarAccess.SubprogramGroupPrototypeElements getSubprogramGroupPrototypeAccess() {
		return gaAadl2.getSubprogramGroupPrototypeAccess();
	}
	
	public ParserRule getSubprogramGroupPrototypeRule() {
		return getSubprogramGroupPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//SystemPrototype returns aadl2::SystemPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "system";
	public Aadl2GrammarAccess.SystemPrototypeElements getSystemPrototypeAccess() {
		return gaAadl2.getSystemPrototypeAccess();
	}
	
	public ParserRule getSystemPrototypeRule() {
		return getSystemPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//ThreadPrototype returns aadl2::ThreadPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "thread";
	public Aadl2GrammarAccess.ThreadPrototypeElements getThreadPrototypeAccess() {
		return gaAadl2.getThreadPrototypeAccess();
	}
	
	public ParserRule getThreadPrototypeRule() {
		return getThreadPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//ThreadGroupPrototype returns aadl2::ThreadGroupPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "thread" "group";
	public Aadl2GrammarAccess.ThreadGroupPrototypeElements getThreadGroupPrototypeAccess() {
		return gaAadl2.getThreadGroupPrototypeAccess();
	}
	
	public ParserRule getThreadGroupPrototypeRule() {
		return getThreadGroupPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//VirtualBusPrototype returns aadl2::VirtualBusPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "virtual" "bus";
	public Aadl2GrammarAccess.VirtualBusPrototypeElements getVirtualBusPrototypeAccess() {
		return gaAadl2.getVirtualBusPrototypeAccess();
	}
	
	public ParserRule getVirtualBusPrototypeRule() {
		return getVirtualBusPrototypeAccess().getRule();
	}

	////	(constrainingClassifier=[aadl2::ComponentClassifier|QCREF])?
	////	( array?='[' ']')?
	//VirtualProcessorPrototype returns aadl2::VirtualProcessorPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "virtual" "processor";
	public Aadl2GrammarAccess.VirtualProcessorPrototypeElements getVirtualProcessorPrototypeAccess() {
		return gaAadl2.getVirtualProcessorPrototypeAccess();
	}
	
	public ParserRule getVirtualProcessorPrototypeRule() {
		return getVirtualProcessorPrototypeAccess().getRule();
	}

	//FeatureGroupPrototype returns aadl2::FeatureGroupPrototype:
	//	(name=ID ":" | refined=[aadl2::FeatureGroupPrototype|REFINEDNAME] ":" "refined" "to") "feature" "group"
	//	constrainingFeatureGroupType=[aadl2::FeatureGroupType|QCREF]?;
	public Aadl2GrammarAccess.FeatureGroupPrototypeElements getFeatureGroupPrototypeAccess() {
		return gaAadl2.getFeatureGroupPrototypeAccess();
	}
	
	public ParserRule getFeatureGroupPrototypeRule() {
		return getFeatureGroupPrototypeAccess().getRule();
	}

	//FeaturePrototype returns aadl2::FeaturePrototype:
	//	(name=ID ":" | refined=[aadl2::FeaturePrototype|REFINEDNAME] ":" "refined" "to") direction=InOutDirection? // only in or out not inout
	//	"feature" constrainingClassifier=[aadl2::ComponentClassifier|QCREF]?;
	public Aadl2GrammarAccess.FeaturePrototypeElements getFeaturePrototypeAccess() {
		return gaAadl2.getFeaturePrototypeAccess();
	}
	
	public ParserRule getFeaturePrototypeRule() {
		return getFeaturePrototypeAccess().getRule();
	}

	/// *
	// * Prototype Bindings
	// * / PrototypeBinding returns aadl2::PrototypeBinding:
	//	FeatureGroupPrototypeBinding | FeaturePrototypeBinding | ComponentPrototypeBinding;
	public Aadl2GrammarAccess.PrototypeBindingElements getPrototypeBindingAccess() {
		return gaAadl2.getPrototypeBindingAccess();
	}
	
	public ParserRule getPrototypeBindingRule() {
		return getPrototypeBindingAccess().getRule();
	}

	//FeatureGroupPrototypeBinding returns aadl2::FeatureGroupPrototypeBinding:
	//	formal=[aadl2::Prototype] "=>" "feature" "group" actual=FeatureGroupPrototypeActual;
	public Aadl2GrammarAccess.FeatureGroupPrototypeBindingElements getFeatureGroupPrototypeBindingAccess() {
		return gaAadl2.getFeatureGroupPrototypeBindingAccess();
	}
	
	public ParserRule getFeatureGroupPrototypeBindingRule() {
		return getFeatureGroupPrototypeBindingAccess().getRule();
	}

	//FeatureGroupPrototypeActual returns aadl2::FeatureGroupPrototypeActual:
	//	featureType=[aadl2::FeatureType|QCREF] ("(" binding+=PrototypeBinding ("," binding+=PrototypeBinding)* ")")?;
	public Aadl2GrammarAccess.FeatureGroupPrototypeActualElements getFeatureGroupPrototypeActualAccess() {
		return gaAadl2.getFeatureGroupPrototypeActualAccess();
	}
	
	public ParserRule getFeatureGroupPrototypeActualRule() {
		return getFeatureGroupPrototypeActualAccess().getRule();
	}

	//FeaturePrototypeBinding returns aadl2::FeaturePrototypeBinding:
	//	formal=[aadl2::Prototype] "=>" actual=(PortSpecification | AccessSpecification | FeaturePrototypeReference);
	public Aadl2GrammarAccess.FeaturePrototypeBindingElements getFeaturePrototypeBindingAccess() {
		return gaAadl2.getFeaturePrototypeBindingAccess();
	}
	
	public ParserRule getFeaturePrototypeBindingRule() {
		return getFeaturePrototypeBindingAccess().getRule();
	}

	////TODO MM change -  then allow reference to prototype for classifier reference	
	//// TODO how about binding with classifier
	//PortSpecification returns aadl2::PortSpecification:
	//	direction=PortDirection category=PortCategory "port" classifier=[aadl2::ComponentClassifier|QCREF]?;
	public Aadl2GrammarAccess.PortSpecificationElements getPortSpecificationAccess() {
		return gaAadl2.getPortSpecificationAccess();
	}
	
	public ParserRule getPortSpecificationRule() {
		return getPortSpecificationAccess().getRule();
	}

	//AccessSpecification returns aadl2::AccessSpecification:
	//	kind=AccessDirection category=AccessCategory "access" classifier=[aadl2::ComponentClassifier|QCREF]?;
	public Aadl2GrammarAccess.AccessSpecificationElements getAccessSpecificationAccess() {
		return gaAadl2.getAccessSpecificationAccess();
	}
	
	public ParserRule getAccessSpecificationRule() {
		return getAccessSpecificationAccess().getRule();
	}

	//FeaturePrototypeReference returns aadl2::FeaturePrototypeReference:
	//	direction=InOutDirection "feature" prototype=[aadl2::FeaturePrototype];
	public Aadl2GrammarAccess.FeaturePrototypeReferenceElements getFeaturePrototypeReferenceAccess() {
		return gaAadl2.getFeaturePrototypeReferenceAccess();
	}
	
	public ParserRule getFeaturePrototypeReferenceRule() {
		return getFeaturePrototypeReferenceAccess().getRule();
	}

	//ComponentPrototypeBinding returns aadl2::ComponentPrototypeBinding:
	//	formal=[aadl2::Prototype] "=>" (actual+=ComponentReference | "(" actual+=ComponentReference (","
	//	actual+=ComponentReference)* ")");
	public Aadl2GrammarAccess.ComponentPrototypeBindingElements getComponentPrototypeBindingAccess() {
		return gaAadl2.getComponentPrototypeBindingAccess();
	}
	
	public ParserRule getComponentPrototypeBindingRule() {
		return getComponentPrototypeBindingAccess().getRule();
	}

	//ComponentReference returns aadl2::ComponentPrototypeActual:
	//	category=ComponentCategory subcomponentType=[aadl2::SubcomponentType|QCREF] ("(" binding+=PrototypeBinding (","
	//	binding+=PrototypeBinding)* ")")?;
	public Aadl2GrammarAccess.ComponentReferenceElements getComponentReferenceAccess() {
		return gaAadl2.getComponentReferenceAccess();
	}
	
	public ParserRule getComponentReferenceRule() {
		return getComponentReferenceAccess().getRule();
	}

	/// *
	// * Subcomponents
	// * / AbstractSubcomponent returns aadl2::AbstractSubcomponent:
	//	(name=ID ":" | refined=[aadl2::SystemSubcomponent|REFINEDNAME] ":" "refined" "to") "abstract"
	//	(abstractSubcomponentType=[aadl2::AbstractSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.AbstractSubcomponentElements getAbstractSubcomponentAccess() {
		return gaAadl2.getAbstractSubcomponentAccess();
	}
	
	public ParserRule getAbstractSubcomponentRule() {
		return getAbstractSubcomponentAccess().getRule();
	}

	//SystemSubcomponent returns aadl2::SystemSubcomponent:
	//	(name=ID ":" | refined=[aadl2::SystemSubcomponent|REFINEDNAME] ":" "refined" "to") "system"
	//	(systemSubcomponentType=[aadl2::SystemSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.SystemSubcomponentElements getSystemSubcomponentAccess() {
		return gaAadl2.getSystemSubcomponentAccess();
	}
	
	public ParserRule getSystemSubcomponentRule() {
		return getSystemSubcomponentAccess().getRule();
	}

	//ProcessSubcomponent returns aadl2::ProcessSubcomponent:
	//	(name=ID ":" | refined=[aadl2::ProcessSubcomponent|REFINEDNAME] ":" "refined" "to") "process"
	//	(processSubcomponentType=[aadl2::ProcessSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.ProcessSubcomponentElements getProcessSubcomponentAccess() {
		return gaAadl2.getProcessSubcomponentAccess();
	}
	
	public ParserRule getProcessSubcomponentRule() {
		return getProcessSubcomponentAccess().getRule();
	}

	//ThreadGroupSubcomponent returns aadl2::ThreadGroupSubcomponent:
	//	(name=ID ":" | refined=[aadl2::ThreadGroupSubcomponent|REFINEDNAME] ":" "refined" "to") "thread" "group"
	//	(threadGroupSubcomponentType=[aadl2::ThreadGroupSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding
	//	("," ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.ThreadGroupSubcomponentElements getThreadGroupSubcomponentAccess() {
		return gaAadl2.getThreadGroupSubcomponentAccess();
	}
	
	public ParserRule getThreadGroupSubcomponentRule() {
		return getThreadGroupSubcomponentAccess().getRule();
	}

	//ThreadSubcomponent returns aadl2::ThreadSubcomponent:
	//	(name=ID ":" | refined=[aadl2::ThreadSubcomponent|REFINEDNAME] ":" "refined" "to") "thread"
	//	(threadSubcomponentType=[aadl2::ThreadSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.ThreadSubcomponentElements getThreadSubcomponentAccess() {
		return gaAadl2.getThreadSubcomponentAccess();
	}
	
	public ParserRule getThreadSubcomponentRule() {
		return getThreadSubcomponentAccess().getRule();
	}

	//SubprogramSubcomponent returns aadl2::SubprogramSubcomponent:
	//	(name=ID ":" | refined=[aadl2::SubprogramSubcomponent|REFINEDNAME] ":" "refined" "to") "subprogram"
	//	(subprogramSubcomponentType=[aadl2::SubprogramSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding
	//	("," ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.SubprogramSubcomponentElements getSubprogramSubcomponentAccess() {
		return gaAadl2.getSubprogramSubcomponentAccess();
	}
	
	public ParserRule getSubprogramSubcomponentRule() {
		return getSubprogramSubcomponentAccess().getRule();
	}

	//SubprogramGroupSubcomponent returns aadl2::SubprogramGroupSubcomponent:
	//	(name=ID ":" | refined=[aadl2::SubprogramGroupSubcomponent|REFINEDNAME] ":" "refined" "to") "subprogram" "group"
	//	(subprogramGroupSubcomponentType=[aadl2::SubprogramGroupSubcomponentType|QCREF] ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")?)?
	//	(arrayDimension+=ArrayDimension+ ("(" implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.SubprogramGroupSubcomponentElements getSubprogramGroupSubcomponentAccess() {
		return gaAadl2.getSubprogramGroupSubcomponentAccess();
	}
	
	public ParserRule getSubprogramGroupSubcomponentRule() {
		return getSubprogramGroupSubcomponentAccess().getRule();
	}

	//ProcessorSubcomponent returns aadl2::ProcessorSubcomponent:
	//	(name=ID ":" | refined=[aadl2::ProcessorSubcomponent|REFINEDNAME] ":" "refined" "to") "processor"
	//	(processorSubcomponentType=[aadl2::ProcessorSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.ProcessorSubcomponentElements getProcessorSubcomponentAccess() {
		return gaAadl2.getProcessorSubcomponentAccess();
	}
	
	public ParserRule getProcessorSubcomponentRule() {
		return getProcessorSubcomponentAccess().getRule();
	}

	//VirtualProcessorSubcomponent returns aadl2::VirtualProcessorSubcomponent:
	//	(name=ID ":" | refined=[aadl2::VirtualProcessorSubcomponent|REFINEDNAME] ":" "refined" "to") "virtual" "processor"
	//	(virtualProcessorSubcomponentType=[aadl2::VirtualProcessorSubcomponentType|QCREF] ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")?)?
	//	(arrayDimension+=ArrayDimension+ ("(" implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.VirtualProcessorSubcomponentElements getVirtualProcessorSubcomponentAccess() {
		return gaAadl2.getVirtualProcessorSubcomponentAccess();
	}
	
	public ParserRule getVirtualProcessorSubcomponentRule() {
		return getVirtualProcessorSubcomponentAccess().getRule();
	}

	//DeviceSubcomponent returns aadl2::DeviceSubcomponent:
	//	(name=ID ":" | refined=[aadl2::DeviceSubcomponent|REFINEDNAME] ":" "refined" "to") "device"
	//	(deviceSubcomponentType=[aadl2::DeviceSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.DeviceSubcomponentElements getDeviceSubcomponentAccess() {
		return gaAadl2.getDeviceSubcomponentAccess();
	}
	
	public ParserRule getDeviceSubcomponentRule() {
		return getDeviceSubcomponentAccess().getRule();
	}

	//MemorySubcomponent returns aadl2::MemorySubcomponent:
	//	(name=ID ":" | refined=[aadl2::MemorySubcomponent|REFINEDNAME] ":" "refined" "to") "memory"
	//	(memorySubcomponentType=[aadl2::MemorySubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.MemorySubcomponentElements getMemorySubcomponentAccess() {
		return gaAadl2.getMemorySubcomponentAccess();
	}
	
	public ParserRule getMemorySubcomponentRule() {
		return getMemorySubcomponentAccess().getRule();
	}

	//BusSubcomponent returns aadl2::BusSubcomponent:
	//	(name=ID ":" | refined=[aadl2::BusSubcomponent|REFINEDNAME] ":" "refined" "to") "bus"
	//	(busSubcomponentType=[aadl2::BusSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.BusSubcomponentElements getBusSubcomponentAccess() {
		return gaAadl2.getBusSubcomponentAccess();
	}
	
	public ParserRule getBusSubcomponentRule() {
		return getBusSubcomponentAccess().getRule();
	}

	//VirtualBusSubcomponent returns aadl2::VirtualBusSubcomponent:
	//	(name=ID ":" | refined=[aadl2::VirtualBusSubcomponent|REFINEDNAME] ":" "refined" "to") "virtual" "bus"
	//	(virtualBusSubcomponentType=[aadl2::VirtualBusClassifier|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.VirtualBusSubcomponentElements getVirtualBusSubcomponentAccess() {
		return gaAadl2.getVirtualBusSubcomponentAccess();
	}
	
	public ParserRule getVirtualBusSubcomponentRule() {
		return getVirtualBusSubcomponentAccess().getRule();
	}

	//DataSubcomponent returns aadl2::DataSubcomponent:
	//	(name=ID ":" | refined=[aadl2::DataSubcomponent|REFINEDNAME] ":" "refined" "to") "data"
	//	(dataSubcomponentType=[aadl2::DataSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in"
	//	"modes" "(" (ownedModeBinding+=ModeRef ("," ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.DataSubcomponentElements getDataSubcomponentAccess() {
		return gaAadl2.getDataSubcomponentAccess();
	}
	
	public ParserRule getDataSubcomponentRule() {
		return getDataSubcomponentAccess().getRule();
	}

	//ArrayDimension returns aadl2::ArrayDimension:
	//	{aadl2::ArrayDimension} "[" size=ArraySize? "]";
	public Aadl2GrammarAccess.ArrayDimensionElements getArrayDimensionAccess() {
		return gaAadl2.getArrayDimensionAccess();
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}

	//ArraySize returns aadl2::ArraySize:
	//	{aadl2::ArraySize} size=INTVALUE | sizeProperty=[aadl2::ArraySizeProperty|QPREF];
	public Aadl2GrammarAccess.ArraySizeElements getArraySizeAccess() {
		return gaAadl2.getArraySizeAccess();
	}
	
	public ParserRule getArraySizeRule() {
		return getArraySizeAccess().getRule();
	}

	//ComponentImplementationReference returns aadl2::ComponentImplementationReference:
	//	{aadl2::ComponentImplementationReference} implementation=[aadl2::ComponentImplementation|QCREF] ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")?;
	public Aadl2GrammarAccess.ComponentImplementationReferenceElements getComponentImplementationReferenceAccess() {
		return gaAadl2.getComponentImplementationReferenceAccess();
	}
	
	public ParserRule getComponentImplementationReferenceRule() {
		return getComponentImplementationReferenceAccess().getRule();
	}

	//// ******** Features
	//// needs to have classifier or prototype reference
	//DataPort returns aadl2::DataPort:
	//	{aadl2::DataPort} (name=ID ":" | refined=[aadl2::DataPort|REFINEDNAME] ":" "refined" "to") direction=PortDirection
	//	"data" "port" dataFeatureClassifier=[aadl2::DataSubcomponentType|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.DataPortElements getDataPortAccess() {
		return gaAadl2.getDataPortAccess();
	}
	
	public ParserRule getDataPortRule() {
		return getDataPortAccess().getRule();
	}

	//EventDataPort returns aadl2::EventDataPort:
	//	{aadl2::EventDataPort} (name=ID ":" | refined=[aadl2::EventDataPort|REFINEDNAME] ":" "refined" "to")
	//	direction=PortDirection "event" "data" "port" dataFeatureClassifier=[aadl2::DataSubcomponentType|QCREF]?
	//	arrayDimension+=ArrayDimension? ("{" ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.EventDataPortElements getEventDataPortAccess() {
		return gaAadl2.getEventDataPortAccess();
	}
	
	public ParserRule getEventDataPortRule() {
		return getEventDataPortAccess().getRule();
	}

	//EventPort returns aadl2::EventPort:
	//	{aadl2::EventPort} (name=ID ":" | refined=[aadl2::EventPort|REFINEDNAME] ":" "refined" "to") direction=PortDirection
	//	"event" "port" arrayDimension+=ArrayDimension? ("{" ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.EventPortElements getEventPortAccess() {
		return gaAadl2.getEventPortAccess();
	}
	
	public ParserRule getEventPortRule() {
		return getEventPortAccess().getRule();
	}

	//FeatureGroup returns aadl2::FeatureGroup:
	//	(name=ID ":" // default is inout if no direction
	//	| refined=[aadl2::FeatureGroup|REFINEDNAME] ":" "refined" "to") direction=InOutDirection? "feature" "group"
	//	(inverse?="inverse" "of")? featureType=[aadl2::FeatureType|QCREF] arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.FeatureGroupElements getFeatureGroupAccess() {
		return gaAadl2.getFeatureGroupAccess();
	}
	
	public ParserRule getFeatureGroupRule() {
		return getFeatureGroupAccess().getRule();
	}

	//Parameter returns aadl2::Parameter:
	//	(name=ID ":" | refined=[aadl2::Parameter|REFINEDNAME] ":" "refined" "to") direction=PortDirection "parameter"
	//	dataFeatureClassifier=[aadl2::DataSubcomponentType|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.ParameterElements getParameterAccess() {
		return gaAadl2.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// AccessCategory not set (is encoded in type)
	//SubprogramAccess returns aadl2::SubprogramAccess:
	//	(name=ID ":" | refined=[aadl2::SubprogramAccess|REFINEDNAME] ":" "refined" "to") kind=AccessDirection "subprogram"
	//	"access" subprogramFeatureClassifier=[aadl2::SubprogramSubcomponentType|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.SubprogramAccessElements getSubprogramAccessAccess() {
		return gaAadl2.getSubprogramAccessAccess();
	}
	
	public ParserRule getSubprogramAccessRule() {
		return getSubprogramAccessAccess().getRule();
	}

	//SubprogramGroupAccess returns aadl2::SubprogramGroupAccess:
	//	(name=ID ":" | refined=[aadl2::SubprogramGroupAccess|REFINEDNAME] ":" "refined" "to") kind=AccessDirection
	//	"subprogram" "group" "access" subprogramGroupFeatureClassifier=[aadl2::SubprogramGroupSubcomponentType|QCREF]?
	//	arrayDimension+=ArrayDimension? ("{" ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.SubprogramGroupAccessElements getSubprogramGroupAccessAccess() {
		return gaAadl2.getSubprogramGroupAccessAccess();
	}
	
	public ParserRule getSubprogramGroupAccessRule() {
		return getSubprogramGroupAccessAccess().getRule();
	}

	//BusAccess returns aadl2::BusAccess:
	//	(name=ID ":" | refined=[aadl2::BusAccess|REFINEDNAME] ":" "refined" "to") kind=AccessDirection "bus" "access"
	//	busFeatureClassifier=[aadl2::BusSubcomponentType|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.BusAccessElements getBusAccessAccess() {
		return gaAadl2.getBusAccessAccess();
	}
	
	public ParserRule getBusAccessRule() {
		return getBusAccessAccess().getRule();
	}

	//DataAccess returns aadl2::DataAccess:
	//	(name=ID ":" | refined=[aadl2::DataAccess|REFINEDNAME] ":" "refined" "to") kind=AccessDirection "data" "access"
	//	dataFeatureClassifier=[aadl2::DataSubcomponentType|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.DataAccessElements getDataAccessAccess() {
		return gaAadl2.getDataAccessAccess();
	}
	
	public ParserRule getDataAccessRule() {
		return getDataAccessAccess().getRule();
	}

	//AbstractFeature returns aadl2::AbstractFeature:
	//	(name=ID ":" // need to set inout if no direction
	//	| refined=[aadl2::AbstractFeature|REFINEDNAME] ":" "refined" "to") direction=InOutDirection? "feature"
	//	featureClassifier=[aadl2::FeaturePrototype|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.AbstractFeatureElements getAbstractFeatureAccess() {
		return gaAadl2.getAbstractFeatureAccess();
	}
	
	public ParserRule getAbstractFeatureRule() {
		return getAbstractFeatureAccess().getRule();
	}

	//PortDirection returns aadl2::DirectionType:
	//	"in" | "out" | "in" "out";
	public Aadl2GrammarAccess.PortDirectionElements getPortDirectionAccess() {
		return gaAadl2.getPortDirectionAccess();
	}
	
	public ParserRule getPortDirectionRule() {
		return getPortDirectionAccess().getRule();
	}

	//InOutDirection returns aadl2::DirectionType:
	//	"in" | "out";
	public Aadl2GrammarAccess.InOutDirectionElements getInOutDirectionAccess() {
		return gaAadl2.getInOutDirectionAccess();
	}
	
	public ParserRule getInOutDirectionRule() {
		return getInOutDirectionAccess().getRule();
	}

	//AccessDirection returns aadl2::AccessType:
	//	"requires" | "provides";
	public Aadl2GrammarAccess.AccessDirectionElements getAccessDirectionAccess() {
		return gaAadl2.getAccessDirectionAccess();
	}
	
	public ParserRule getAccessDirectionRule() {
		return getAccessDirectionAccess().getRule();
	}

	//PortCategory returns aadl2::PortCategory:
	//	"data" | "event" | "event" "data";
	public Aadl2GrammarAccess.PortCategoryElements getPortCategoryAccess() {
		return gaAadl2.getPortCategoryAccess();
	}
	
	public ParserRule getPortCategoryRule() {
		return getPortCategoryAccess().getRule();
	}

	//FeatureGroupType returns aadl2::FeatureGroupType:
	//	"feature" "group" name=ID (ownedExtension=GroupExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" // no none for FGT (noFeatures?='none' ';') |
	//	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort |
	//	ownedFeatureGroup+=FeatureGroup | ownedDataAccess+=DataAccess | ownedBusAccess+=BusAccess |
	//	ownedSubprogramAccess+=SubprogramAccess | ownedSubprogramGroupAccess+=SubprogramGroupAccess |
	//	ownedAbstractFeature+=AbstractFeature)+)? ("inverse" "of" inverse=[aadl2::FeatureGroupType|QCREF])? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.FeatureGroupTypeElements getFeatureGroupTypeAccess() {
		return gaAadl2.getFeatureGroupTypeAccess();
	}
	
	public ParserRule getFeatureGroupTypeRule() {
		return getFeatureGroupTypeAccess().getRule();
	}

	//// ********* connections 
	//ConnectedElement returns aadl2::ConnectedElement:
	//	(context=[aadl2::Context] ".")? connectionEnd=[aadl2::ConnectionEnd];
	public Aadl2GrammarAccess.ConnectedElementElements getConnectedElementAccess() {
		return gaAadl2.getConnectedElementAccess();
	}
	
	public ParserRule getConnectedElementRule() {
		return getConnectedElementAccess().getRule();
	}

	//ProcessorPort returns aadl2::ProcessorPort:
	//	"processor" "." name=ID;
	public Aadl2GrammarAccess.ProcessorPortElements getProcessorPortAccess() {
		return gaAadl2.getProcessorPortAccess();
	}
	
	public ParserRule getProcessorPortRule() {
		return getProcessorPortAccess().getRule();
	}

	//InternalEventPort returns aadl2::InternalEvent:
	//	"self" "." name=ID;
	public Aadl2GrammarAccess.InternalEventPortElements getInternalEventPortAccess() {
		return gaAadl2.getInternalEventPortAccess();
	}
	
	public ParserRule getInternalEventPortRule() {
		return getInternalEventPortAccess().getRule();
	}

	//ProcessorSubprogram returns aadl2::ProcessorSubprogram:
	//	"processor" "." name=ID;
	public Aadl2GrammarAccess.ProcessorSubprogramElements getProcessorSubprogramAccess() {
		return gaAadl2.getProcessorSubprogramAccess();
	}
	
	public ParserRule getProcessorSubprogramRule() {
		return getProcessorSubprogramAccess().getRule();
	}

	//AbstractConnectionEnd returns aadl2::AbstractConnectionEnd:
	//	ConnectedElement | ProcessorPort | InternalEventPort;
	public Aadl2GrammarAccess.AbstractConnectionEndElements getAbstractConnectionEndAccess() {
		return gaAadl2.getAbstractConnectionEndAccess();
	}
	
	public ParserRule getAbstractConnectionEndRule() {
		return getAbstractConnectionEndAccess().getRule();
	}

	//ProcessorConnectionEnd returns aadl2::AbstractConnectionEnd:
	//	ConnectedElement | ProcessorPort;
	public Aadl2GrammarAccess.ProcessorConnectionEndElements getProcessorConnectionEndAccess() {
		return gaAadl2.getProcessorConnectionEndAccess();
	}
	
	public ParserRule getProcessorConnectionEndRule() {
		return getProcessorConnectionEndAccess().getRule();
	}

	//PortConnection returns aadl2::PortConnection:
	//	(name=ID ":" "port" source=AbstractConnectionEnd ("->" | bidirectional?="<->") destination=ProcessorConnectionEnd |
	//	refined=[aadl2::PortConnection|REFINEDNAME] ":" "refined" "to" "port") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.PortConnectionElements getPortConnectionAccess() {
		return gaAadl2.getPortConnectionAccess();
	}
	
	public ParserRule getPortConnectionRule() {
		return getPortConnectionAccess().getRule();
	}

	//AccessConnection returns aadl2::AccessConnection:
	//	(name=ID ":" accessCategory=AccessCategory "access" source= //(ConnectedElement | ProcessorSubprogram)
	//	ConnectedElement ("->" | bidirectional?="<->") destination=ConnectedElement |
	//	refined=[aadl2::AccessConnection|REFINEDNAME] ":" "refined" "to" accessCategory=AccessCategory "access") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.AccessConnectionElements getAccessConnectionAccess() {
		return gaAadl2.getAccessConnectionAccess();
	}
	
	public ParserRule getAccessConnectionRule() {
		return getAccessConnectionAccess().getRule();
	}

	//FeatureGroupConnection returns aadl2::FeatureGroupConnection:
	//	(name=ID ":" "feature" "group" source=ConnectedElement ("->" | bidirectional?="<->") destination=ConnectedElement |
	//	refined=[aadl2::FeatureGroupConnection|REFINEDNAME] ":" "refined" "to" "feature" "group") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.FeatureGroupConnectionElements getFeatureGroupConnectionAccess() {
		return gaAadl2.getFeatureGroupConnectionAccess();
	}
	
	public ParserRule getFeatureGroupConnectionRule() {
		return getFeatureGroupConnectionAccess().getRule();
	}

	//FeatureConnection returns aadl2::FeatureConnection:
	//	(name=ID ":" "feature" source=ConnectedElement ("->" | bidirectional?="<->") destination=ConnectedElement |
	//	refined=[aadl2::FeatureConnection|REFINEDNAME] ":" "refined" "to" "feature") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.FeatureConnectionElements getFeatureConnectionAccess() {
		return gaAadl2.getFeatureConnectionAccess();
	}
	
	public ParserRule getFeatureConnectionRule() {
		return getFeatureConnectionAccess().getRule();
	}

	//ParameterConnection returns aadl2::ParameterConnection:
	//	(name=ID ":" "parameter" source=ConnectedElement "->" destination=ConnectedElement |
	//	refined=[aadl2::ParameterConnection|REFINEDNAME] ":" "refined" "to" "parameter") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.ParameterConnectionElements getParameterConnectionAccess() {
		return gaAadl2.getParameterConnectionAccess();
	}
	
	public ParserRule getParameterConnectionRule() {
		return getParameterConnectionAccess().getRule();
	}

	//AccessCategory returns aadl2::AccessCategory:
	//	"bus" | "data" | "subprogram" | "subprogram" "group";
	public Aadl2GrammarAccess.AccessCategoryElements getAccessCategoryAccess() {
		return gaAadl2.getAccessCategoryAccess();
	}
	
	public ParserRule getAccessCategoryRule() {
		return getAccessCategoryAccess().getRule();
	}

	//// ******** Flows 
	//enum FlowKind returns aadl2::FlowKind:
	//	source | path | sink;
	public Aadl2GrammarAccess.FlowKindElements getFlowKindAccess() {
		return gaAadl2.getFlowKindAccess();
	}
	
	public EnumRule getFlowKindRule() {
		return getFlowKindAccess().getRule();
	}

	//FlowSource returns aadl2::FlowKind:
	//	"source";
	public Aadl2GrammarAccess.FlowSourceElements getFlowSourceAccess() {
		return gaAadl2.getFlowSourceAccess();
	}
	
	public ParserRule getFlowSourceRule() {
		return getFlowSourceAccess().getRule();
	}

	//FlowSink returns aadl2::FlowKind:
	//	"sink";
	public Aadl2GrammarAccess.FlowSinkElements getFlowSinkAccess() {
		return gaAadl2.getFlowSinkAccess();
	}
	
	public ParserRule getFlowSinkRule() {
		return getFlowSinkAccess().getRule();
	}

	//FlowPath returns aadl2::FlowKind:
	//	"path";
	public Aadl2GrammarAccess.FlowPathElements getFlowPathAccess() {
		return gaAadl2.getFlowPathAccess();
	}
	
	public ParserRule getFlowPathRule() {
		return getFlowPathAccess().getRule();
	}

	//FlowSpecification returns aadl2::FlowSpecification:
	//	(FlowSourceSpec | FlowSinkSpec | FlowPathSpec | FlowSpecRefinement) ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])* ")")? ";";
	public Aadl2GrammarAccess.FlowSpecificationElements getFlowSpecificationAccess() {
		return gaAadl2.getFlowSpecificationAccess();
	}
	
	public ParserRule getFlowSpecificationRule() {
		return getFlowSpecificationAccess().getRule();
	}

	////	('{' (ownedPropertyAssociation+=PropertyAssociation)+ '}')?
	////	( 'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID](',' inModeOrTransition+=[aadl2::ModeFeature|ID] )* ')')? 
	////	';'
	//FlowSourceSpec returns aadl2::FlowSpecification:
	//	name=ID ":" "flow" kind=FlowSource outEnd=FlowEnd;
	public Aadl2GrammarAccess.FlowSourceSpecElements getFlowSourceSpecAccess() {
		return gaAadl2.getFlowSourceSpecAccess();
	}
	
	public ParserRule getFlowSourceSpecRule() {
		return getFlowSourceSpecAccess().getRule();
	}

	////	('{' (ownedPropertyAssociation+=PropertyAssociation)+ '}')?
	////	( 'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID](',' inModeOrTransition+=[aadl2::ModeFeature|ID] )* ')')? 
	////	';'
	//FlowSinkSpec returns aadl2::FlowSpecification:
	//	name=ID ":" "flow" kind=FlowSink InEnd=FlowEnd;
	public Aadl2GrammarAccess.FlowSinkSpecElements getFlowSinkSpecAccess() {
		return gaAadl2.getFlowSinkSpecAccess();
	}
	
	public ParserRule getFlowSinkSpecRule() {
		return getFlowSinkSpecAccess().getRule();
	}

	////	('{' (ownedPropertyAssociation+=PropertyAssociation)+ '}')?
	////	( 'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID](',' inModeOrTransition+=[aadl2::ModeFeature|ID] )* ')')? 
	////	';'
	//FlowPathSpec returns aadl2::FlowSpecification:
	//	name=ID ":" "flow" kind=FlowPath InEnd=FlowEnd "->" outEnd=FlowEnd;
	public Aadl2GrammarAccess.FlowPathSpecElements getFlowPathSpecAccess() {
		return gaAadl2.getFlowPathSpecAccess();
	}
	
	public ParserRule getFlowPathSpecRule() {
		return getFlowPathSpecAccess().getRule();
	}

	//FlowEnd returns aadl2::FlowEnd:
	//	(context=[aadl2::Context] ".")? feature=[aadl2::Feature];
	public Aadl2GrammarAccess.FlowEndElements getFlowEndAccess() {
		return gaAadl2.getFlowEndAccess();
	}
	
	public ParserRule getFlowEndRule() {
		return getFlowEndAccess().getRule();
	}

	////	( '{' (ownedPropertyAssociation+=PropertyAssociation)+ '}' 
	////		     (  'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID]( ',' inModeOrTransition+=[aadl2::ModeFeature|ID])*  ')')?	)|
	////	(  'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID]( ',' inModeOrTransition+=[aadl2::ModeFeature|ID])*  ')') 
	////	';'
	//FlowSpecRefinement returns aadl2::FlowSpecification:
	//	refined=[aadl2::FlowSpecification|REFINEDNAME] ":" "refined" "to" "flow" kind=FlowKind;
	public Aadl2GrammarAccess.FlowSpecRefinementElements getFlowSpecRefinementAccess() {
		return gaAadl2.getFlowSpecRefinementAccess();
	}
	
	public ParserRule getFlowSpecRefinementRule() {
		return getFlowSpecRefinementAccess().getRule();
	}

	//FlowImplementation returns aadl2::FlowImplementation:
	//	(FlowSourceImpl | FlowSinkImpl | FlowPathImpl) //	('{' (ownedPropertyAssociation+=PropertyAssociation)+ '}')?
	//	("in" "modes" "(" inModeOrTransition+=[aadl2::ModeFeature] ("," inModeOrTransition+=[aadl2::ModeFeature])* ")")? ";";
	public Aadl2GrammarAccess.FlowImplementationElements getFlowImplementationAccess() {
		return gaAadl2.getFlowImplementationAccess();
	}
	
	public ParserRule getFlowImplementationRule() {
		return getFlowImplementationAccess().getRule();
	}

	//////	('{' (ownedPropertyAssociation+=PropertyAssociation)+ '}')?
	////	( 'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID]( ',' inModeOrTransition+=[aadl2::ModeFeature|ID])*  ')')? 
	////	';'
	//FlowSourceImpl returns aadl2::FlowImplementation:
	//	specification=[aadl2::FlowSpecification] ":" "flow" kind=FlowSource (ownedFlowSegment+=SubcomponentFlow "->"
	//	ownedFlowSegment+=ConnectionFlow "->")* //	(outContext=[aadl2::Context|ID] '.' )? outFeature=[aadl2::Feature|ID]
	//	(ID ".")? ID;
	public Aadl2GrammarAccess.FlowSourceImplElements getFlowSourceImplAccess() {
		return gaAadl2.getFlowSourceImplAccess();
	}
	
	public ParserRule getFlowSourceImplRule() {
		return getFlowSourceImplAccess().getRule();
	}

	//////	('{' (ownedPropertyAssociation+=PropertyAssociation)+ '}')?
	////	( 'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID]( ',' inModeOrTransition+=[aadl2::ModeFeature|ID])*  ')')? 
	////	';'
	//FlowSinkImpl returns aadl2::FlowImplementation:
	//	specification= //name=ID 
	//	[aadl2::FlowSpecification] ":" "flow" kind=FlowSink //	(inContext=[aadl2::Context|ID] '.' )? inFeature=[aadl2::Feature|ID]
	//	(ID ".")? ID ("->" ownedFlowSegment+=ConnectionFlow "->" ownedFlowSegment+=SubcomponentFlow)*;
	public Aadl2GrammarAccess.FlowSinkImplElements getFlowSinkImplAccess() {
		return gaAadl2.getFlowSinkImplAccess();
	}
	
	public ParserRule getFlowSinkImplRule() {
		return getFlowSinkImplAccess().getRule();
	}

	//////	('{' (ownedPropertyAssociation+=PropertyAssociation)+ '}')?
	////	( 'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID]( ',' inModeOrTransition+=[aadl2::ModeFeature|ID])*  ')')? 
	////	';'
	//FlowPathImpl returns aadl2::FlowImplementation:
	//	specification= //name=ID 
	//	[aadl2::FlowSpecification] ":" "flow" kind=FlowPath //	(inContext=[aadl2::Context|ID] '.' )? inFeature=[aadl2::Feature|ID]
	//	(ID ".")? ID (("->" ownedFlowSegment+=ConnectionFlow "->" ownedFlowSegment+=SubcomponentFlow)* "->"
	//	ownedFlowSegment+=ConnectionFlow)? //	'->' (outContext=[aadl2::Context|ID] '.' )? outFeature=[aadl2::Feature|ID] 
	//	"->" (ID ".")? ID;
	public Aadl2GrammarAccess.FlowPathImplElements getFlowPathImplAccess() {
		return gaAadl2.getFlowPathImplAccess();
	}
	
	public ParserRule getFlowPathImplRule() {
		return getFlowPathImplAccess().getRule();
	}

	//EndToEndFlow returns aadl2::EndToEndFlow:
	//	(name=ID ":" "end" "to" "end" "flow" ownedEndToEndFlowSegment+=ETESubcomponentFlow ("->"
	//	ownedEndToEndFlowSegment+=ETEConnectionFlow "->" ownedEndToEndFlowSegment+=ETESubcomponentFlow)+ |
	//	refined=[aadl2::EndToEndFlow|REFINEDNAME] ":" "refined" "to" "end" "to" "end" "flow") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])* ")")? ";";
	public Aadl2GrammarAccess.EndToEndFlowElements getEndToEndFlowAccess() {
		return gaAadl2.getEndToEndFlowAccess();
	}
	
	public ParserRule getEndToEndFlowRule() {
		return getEndToEndFlowAccess().getRule();
	}

	////// refinement should have at elast one of property or in mdoes. We perform a validation check    
	////EndToEndFlowRefinement returns aadl2::EndToEndFlow:
	////	refined=[aadl2::EndToEndFlow|REFINEDNAME] ':' 'refined' 'to' 'end' 'to' 'end' 'flow'  
	////	( '{' (ownedPropertyAssociation+=PropertyAssociation)+ '}' 
	////		     (  'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID]( ',' inModeOrTransition+=[aadl2::ModeFeature|ID])*  ')')?	)|
	////	(  'in' 'modes' '(' inModeOrTransition+=[aadl2::ModeFeature|ID]( ',' inModeOrTransition+=[aadl2::ModeFeature|ID])*  ')') 
	////;
	//SubcomponentFlow returns aadl2::FlowSegment:
	//	(context=[aadl2::Subcomponent] ".")? flowElement=[aadl2::FlowElement];
	public Aadl2GrammarAccess.SubcomponentFlowElements getSubcomponentFlowAccess() {
		return gaAadl2.getSubcomponentFlowAccess();
	}
	
	public ParserRule getSubcomponentFlowRule() {
		return getSubcomponentFlowAccess().getRule();
	}

	//ConnectionFlow returns aadl2::FlowSegment:
	//	flowElement=[aadl2::Connection];
	public Aadl2GrammarAccess.ConnectionFlowElements getConnectionFlowAccess() {
		return gaAadl2.getConnectionFlowAccess();
	}
	
	public ParserRule getConnectionFlowRule() {
		return getConnectionFlowAccess().getRule();
	}

	//ETESubcomponentFlow returns aadl2::EndToEndFlowSegment:
	//	(context=[aadl2::Subcomponent] ".")? flowElement=[aadl2::EndToEndFlowElement];
	public Aadl2GrammarAccess.ETESubcomponentFlowElements getETESubcomponentFlowAccess() {
		return gaAadl2.getETESubcomponentFlowAccess();
	}
	
	public ParserRule getETESubcomponentFlowRule() {
		return getETESubcomponentFlowAccess().getRule();
	}

	//ETEConnectionFlow returns aadl2::EndToEndFlowSegment:
	//	flowElement=[aadl2::Connection];
	public Aadl2GrammarAccess.ETEConnectionFlowElements getETEConnectionFlowAccess() {
		return gaAadl2.getETEConnectionFlowAccess();
	}
	
	public ParserRule getETEConnectionFlowRule() {
		return getETEConnectionFlowAccess().getRule();
	}

	//// Modes 
	//Mode returns aadl2::Mode:
	//	name=ID ":" initial?="initial"? "mode" ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.ModeElements getModeAccess() {
		return gaAadl2.getModeAccess();
	}
	
	public ParserRule getModeRule() {
		return getModeAccess().getRule();
	}

	//RequiresMode returns aadl2::Mode:
	//	name=ID ":" initial?="initial"? derived?="mode" ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.RequiresModeElements getRequiresModeAccess() {
		return gaAadl2.getRequiresModeAccess();
	}
	
	public ParserRule getRequiresModeRule() {
		return getRequiresModeAccess().getRule();
	}

	//ModeTransition returns aadl2::ModeTransition:
	//	(name=ID ":")? source=[aadl2::Mode] "-[" ownedTrigger+=Trigger ("," ownedTrigger+=Trigger)* "]->"
	//	destination=[aadl2::Mode] ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.ModeTransitionElements getModeTransitionAccess() {
		return gaAadl2.getModeTransitionAccess();
	}
	
	public ParserRule getModeTransitionRule() {
		return getModeTransitionAccess().getRule();
	}

	//Trigger returns aadl2::ModeTransitionTrigger:
	//	TriggerPort | ProcessorPort | InternalEventPort;
	public Aadl2GrammarAccess.TriggerElements getTriggerAccess() {
		return gaAadl2.getTriggerAccess();
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//TriggerPort returns aadl2::TriggerPort:
	//	(context=[aadl2::Context] ".")? port=[aadl2::Port];
	public Aadl2GrammarAccess.TriggerPortElements getTriggerPortAccess() {
		return gaAadl2.getTriggerPortAccess();
	}
	
	public ParserRule getTriggerPortRule() {
		return getTriggerPortAccess().getRule();
	}

	//// used where component_in_modes is shown in standard grammar
	//ModeRef returns aadl2::ModeBinding:
	//	parentMode=[aadl2::Mode] ("=>" derivedMode=[aadl2::Mode])?;
	public Aadl2GrammarAccess.ModeRefElements getModeRefAccess() {
		return gaAadl2.getModeRefAccess();
	}
	
	public ParserRule getModeRefRule() {
		return getModeRefAccess().getRule();
	}

	//AnnexLibrary returns aadl2::AnnexLibrary: //	 ErrorModelLibrary | 
	//	DefaultAnnexLibrary;
	public Aadl2GrammarAccess.AnnexLibraryElements getAnnexLibraryAccess() {
		return gaAadl2.getAnnexLibraryAccess();
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//DefaultAnnexLibrary returns aadl2::DefaultAnnexLibrary:
	//	"annex" name=ID sourceText=ANNEXTEXT ";";
	public Aadl2GrammarAccess.DefaultAnnexLibraryElements getDefaultAnnexLibraryAccess() {
		return gaAadl2.getDefaultAnnexLibraryAccess();
	}
	
	public ParserRule getDefaultAnnexLibraryRule() {
		return getDefaultAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause: //	 ErrorModelSubclause | 
	//	DefaultAnnexSubclause;
	public Aadl2GrammarAccess.AnnexSubclauseElements getAnnexSubclauseAccess() {
		return gaAadl2.getAnnexSubclauseAccess();
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//DefaultAnnexSubclause returns aadl2::DefaultAnnexSubclause:
	//	"annex" name=ID sourceText=ANNEXTEXT ";";
	public Aadl2GrammarAccess.DefaultAnnexSubclauseElements getDefaultAnnexSubclauseAccess() {
		return gaAadl2.getDefaultAnnexSubclauseAccess();
	}
	
	public ParserRule getDefaultAnnexSubclauseRule() {
		return getDefaultAnnexSubclauseAccess().getRule();
	}

	//terminal ANNEXTEXT:
	//	"{**"->"**}";
	public TerminalRule getANNEXTEXTRule() {
		return gaAadl2.getANNEXTEXTRule();
	} 

	////terminal ANNEXTEXT	: 
	////			 ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'}') )*  '**}'
	////		; 
	//// **************
	//// Properties
	//PropertySet returns aadl2::PropertySet:
	//	"property" "set" name=ID "is" ("with" importedUnit+=[aadl2::PropertySet] ("," importedUnit+=[aadl2::PropertySet])*
	//	";")* (ownedPropertyType+=PropertyType | ownedProperty+=PropertyDefinition | ownedPropertyConstant+=PropertyConstant)*
	//	"end" ID ";";
	public Aadl2GrammarAccess.PropertySetElements getPropertySetAccess() {
		return gaAadl2.getPropertySetAccess();
	}
	
	public ParserRule getPropertySetRule() {
		return getPropertySetAccess().getRule();
	}

	//PropertyType returns aadl2::PropertyType:
	//	(BooleanType | StringType | EnumerationType | UnitsType | RealType | IntegerType | RangeType | ClassifierType |
	//	ReferenceType | RecordType) ";";
	public Aadl2GrammarAccess.PropertyTypeElements getPropertyTypeAccess() {
		return gaAadl2.getPropertyTypeAccess();
	}
	
	public ParserRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}

	//UnnamedPropertyType returns aadl2::PropertyType:
	//	ListType | UnnamedBooleanType | UnnamedStringType | UnnamedEnumerationType | UnnamedUnitsType | UnnamedRealType |
	//	UnnamedIntegerType | UnnamedRangeType | UnnamedClassifierType | UnnamedReferenceType | UnnamedRecordType;
	public Aadl2GrammarAccess.UnnamedPropertyTypeElements getUnnamedPropertyTypeAccess() {
		return gaAadl2.getUnnamedPropertyTypeAccess();
	}
	
	public ParserRule getUnnamedPropertyTypeRule() {
		return getUnnamedPropertyTypeAccess().getRule();
	}

	//BooleanType returns aadl2::AadlBoolean:
	//	name=ID ":" "type" "aadlboolean";
	public Aadl2GrammarAccess.BooleanTypeElements getBooleanTypeAccess() {
		return gaAadl2.getBooleanTypeAccess();
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//UnnamedBooleanType returns aadl2::AadlBoolean:
	//	{aadl2::AadlBoolean} "aadlboolean";
	public Aadl2GrammarAccess.UnnamedBooleanTypeElements getUnnamedBooleanTypeAccess() {
		return gaAadl2.getUnnamedBooleanTypeAccess();
	}
	
	public ParserRule getUnnamedBooleanTypeRule() {
		return getUnnamedBooleanTypeAccess().getRule();
	}

	//StringType returns aadl2::AadlString:
	//	name=ID ":" "type" "aadlstring";
	public Aadl2GrammarAccess.StringTypeElements getStringTypeAccess() {
		return gaAadl2.getStringTypeAccess();
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//UnnamedStringType returns aadl2::AadlString:
	//	{aadl2::AadlString} "aadlstring";
	public Aadl2GrammarAccess.UnnamedStringTypeElements getUnnamedStringTypeAccess() {
		return gaAadl2.getUnnamedStringTypeAccess();
	}
	
	public ParserRule getUnnamedStringTypeRule() {
		return getUnnamedStringTypeAccess().getRule();
	}

	//EnumerationType returns aadl2::EnumerationType:
	//	name=ID ":" "type" "enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
	public Aadl2GrammarAccess.EnumerationTypeElements getEnumerationTypeAccess() {
		return gaAadl2.getEnumerationTypeAccess();
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}

	//UnnamedEnumerationType returns aadl2::EnumerationType:
	//	"enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
	public Aadl2GrammarAccess.UnnamedEnumerationTypeElements getUnnamedEnumerationTypeAccess() {
		return gaAadl2.getUnnamedEnumerationTypeAccess();
	}
	
	public ParserRule getUnnamedEnumerationTypeRule() {
		return getUnnamedEnumerationTypeAccess().getRule();
	}

	//EnumerationLiteral returns aadl2::EnumerationLiteral:
	//	name=ID;
	public Aadl2GrammarAccess.EnumerationLiteralElements getEnumerationLiteralAccess() {
		return gaAadl2.getEnumerationLiteralAccess();
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}

	//UnitsType returns aadl2::UnitsType:
	//	name=ID ":" "type" "units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
	public Aadl2GrammarAccess.UnitsTypeElements getUnitsTypeAccess() {
		return gaAadl2.getUnitsTypeAccess();
	}
	
	public ParserRule getUnitsTypeRule() {
		return getUnitsTypeAccess().getRule();
	}

	//UnnamedUnitsType returns aadl2::UnitsType:
	//	"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
	public Aadl2GrammarAccess.UnnamedUnitsTypeElements getUnnamedUnitsTypeAccess() {
		return gaAadl2.getUnnamedUnitsTypeAccess();
	}
	
	public ParserRule getUnnamedUnitsTypeRule() {
		return getUnnamedUnitsTypeAccess().getRule();
	}

	//UnitLiteral returns aadl2::UnitLiteral:
	//	name=ID;
	public Aadl2GrammarAccess.UnitLiteralElements getUnitLiteralAccess() {
		return gaAadl2.getUnitLiteralAccess();
	}
	
	public ParserRule getUnitLiteralRule() {
		return getUnitLiteralAccess().getRule();
	}

	//UnitLiteralConversion returns aadl2::UnitLiteral:
	//	name=ID "=>" baseUnit=[aadl2::UnitLiteral] STAR factor=NumberValue;
	public Aadl2GrammarAccess.UnitLiteralConversionElements getUnitLiteralConversionAccess() {
		return gaAadl2.getUnitLiteralConversionAccess();
	}
	
	public ParserRule getUnitLiteralConversionRule() {
		return getUnitLiteralConversionAccess().getRule();
	}

	//RealType returns aadl2::AadlReal:
	//	name=ID ":" "type" "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	unitsType=[aadl2::UnitsType|QPREF])?;
	public Aadl2GrammarAccess.RealTypeElements getRealTypeAccess() {
		return gaAadl2.getRealTypeAccess();
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}

	//UnnamedRealType returns aadl2::AadlReal:
	//	{aadl2::AadlReal} "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	unitsType=[aadl2::UnitsType|QPREF])?;
	public Aadl2GrammarAccess.UnnamedRealTypeElements getUnnamedRealTypeAccess() {
		return gaAadl2.getUnnamedRealTypeAccess();
	}
	
	public ParserRule getUnnamedRealTypeRule() {
		return getUnnamedRealTypeAccess().getRule();
	}

	//IntegerType returns aadl2::AadlInteger:
	//	name=ID ":" "type" "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	unitsType=[aadl2::UnitsType|QPREF])?;
	public Aadl2GrammarAccess.IntegerTypeElements getIntegerTypeAccess() {
		return gaAadl2.getIntegerTypeAccess();
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//UnnamedIntegerType returns aadl2::AadlInteger:
	//	{aadl2::AadlInteger} "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	unitsType=[aadl2::UnitsType|QPREF])?;
	public Aadl2GrammarAccess.UnnamedIntegerTypeElements getUnnamedIntegerTypeAccess() {
		return gaAadl2.getUnnamedIntegerTypeAccess();
	}
	
	public ParserRule getUnnamedIntegerTypeRule() {
		return getUnnamedIntegerTypeAccess().getRule();
	}

	//RangeType returns aadl2::RangeType:
	//	name=ID ":" "type" "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
	//	numberType=[aadl2::NumberType|QPREF]);
	public Aadl2GrammarAccess.RangeTypeElements getRangeTypeAccess() {
		return gaAadl2.getRangeTypeAccess();
	}
	
	public ParserRule getRangeTypeRule() {
		return getRangeTypeAccess().getRule();
	}

	//UnnamedRangeType returns aadl2::RangeType:
	//	{aadl2::RangeType} "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
	//	numberType=[aadl2::NumberType|QPREF]);
	public Aadl2GrammarAccess.UnnamedRangeTypeElements getUnnamedRangeTypeAccess() {
		return gaAadl2.getUnnamedRangeTypeAccess();
	}
	
	public ParserRule getUnnamedRangeTypeRule() {
		return getUnnamedRangeTypeAccess().getRule();
	}

	//ClassifierType returns aadl2::ClassifierType:
	//	name=ID ":" "type" "classifier" ("(" classifierReference+=QCReference ("," classifierReference+=QCReference)* ")")?;
	public Aadl2GrammarAccess.ClassifierTypeElements getClassifierTypeAccess() {
		return gaAadl2.getClassifierTypeAccess();
	}
	
	public ParserRule getClassifierTypeRule() {
		return getClassifierTypeAccess().getRule();
	}

	//UnnamedClassifierType returns aadl2::ClassifierType:
	//	{aadl2::ClassifierType} "classifier" ("(" classifierReference+=QCReference ("," classifierReference+=QCReference)*
	//	")")?;
	public Aadl2GrammarAccess.UnnamedClassifierTypeElements getUnnamedClassifierTypeAccess() {
		return gaAadl2.getUnnamedClassifierTypeAccess();
	}
	
	public ParserRule getUnnamedClassifierTypeRule() {
		return getUnnamedClassifierTypeAccess().getRule();
	}

	//QCReference returns aadl2::MetaclassReference:
	//	("{" annexName=ID "}" STAR STAR)? metaclassName+=(CoreKeyWord | ID)+;
	public Aadl2GrammarAccess.QCReferenceElements getQCReferenceAccess() {
		return gaAadl2.getQCReferenceAccess();
	}
	
	public ParserRule getQCReferenceRule() {
		return getQCReferenceAccess().getRule();
	}

	//ReferenceType returns aadl2::ReferenceType:
	//	name=ID ":" "type" "reference" ("(" namedElementReference+=QCReference ("," namedElementReference+=QCReference)*
	//	")")?;
	public Aadl2GrammarAccess.ReferenceTypeElements getReferenceTypeAccess() {
		return gaAadl2.getReferenceTypeAccess();
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}

	//UnnamedReferenceType returns aadl2::ReferenceType:
	//	"reference" {aadl2::ReferenceType} ("(" namedElementReference+=QCReference ("," namedElementReference+=QCReference)*
	//	")")?;
	public Aadl2GrammarAccess.UnnamedReferenceTypeElements getUnnamedReferenceTypeAccess() {
		return gaAadl2.getUnnamedReferenceTypeAccess();
	}
	
	public ParserRule getUnnamedReferenceTypeRule() {
		return getUnnamedReferenceTypeAccess().getRule();
	}

	//RecordType returns aadl2::RecordType:
	//	name=ID ":" "type" "record" "(" ownedField+=RecordField+ ")";
	public Aadl2GrammarAccess.RecordTypeElements getRecordTypeAccess() {
		return gaAadl2.getRecordTypeAccess();
	}
	
	public ParserRule getRecordTypeRule() {
		return getRecordTypeAccess().getRule();
	}

	//UnnamedRecordType returns aadl2::RecordType:
	//	"record" "(" ownedField+=RecordField+ ")";
	public Aadl2GrammarAccess.UnnamedRecordTypeElements getUnnamedRecordTypeAccess() {
		return gaAadl2.getUnnamedRecordTypeAccess();
	}
	
	public ParserRule getUnnamedRecordTypeRule() {
		return getUnnamedRecordTypeAccess().getRule();
	}

	//RecordField returns aadl2::BasicProperty:
	//	name=ID ":" (propertyType=[aadl2::PropertyType|QPREF] //	('list' 'of')* is handled as part of UnnamedPropertytype
	//	| ownedPropertyType=UnnamedPropertyType) ";";
	public Aadl2GrammarAccess.RecordFieldElements getRecordFieldAccess() {
		return gaAadl2.getRecordFieldAccess();
	}
	
	public ParserRule getRecordFieldRule() {
		return getRecordFieldAccess().getRule();
	}

	////&&&&& Property Definition
	//PropertyDefinition returns aadl2::Property:
	//	name=ID ":" inherit?="inherit"? (propertyType=[aadl2::PropertyType|QPREF] //	('list' 'of')* is handled as part of UnnamedPropertytype
	//	| ownedPropertyType=UnnamedPropertyType) ("=>" defaultValue=PropertyExpression)? "applies" "to" "("
	//	(appliesTo+=PropertyOwner ("," appliesTo+=PropertyOwner)* | appliesTo+=AllReference) ")" ";";
	public Aadl2GrammarAccess.PropertyDefinitionElements getPropertyDefinitionAccess() {
		return gaAadl2.getPropertyDefinitionAccess();
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}

	//AllReference returns aadl2::MetaclassReference:
	//	metaclassName+= // &&&&& actually set it to NamedElement using ALL rule returning "named element" as string
	//	"all";
	public Aadl2GrammarAccess.AllReferenceElements getAllReferenceAccess() {
		return gaAadl2.getAllReferenceAccess();
	}
	
	public ParserRule getAllReferenceRule() {
		return getAllReferenceAccess().getRule();
	}

	//ListType returns aadl2::ListType:
	//	"list" "of" (elementType=[aadl2::PropertyType|QPREF] | ownedElementType=UnnamedPropertyType);
	public Aadl2GrammarAccess.ListTypeElements getListTypeAccess() {
		return gaAadl2.getListTypeAccess();
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}

	//PropertyOwner returns aadl2::PropertyOwner: // classifier value is always qualified by a package name
	//	QCReference;
	public Aadl2GrammarAccess.PropertyOwnerElements getPropertyOwnerAccess() {
		return gaAadl2.getPropertyOwnerAccess();
	}
	
	public ParserRule getPropertyOwnerRule() {
		return getPropertyOwnerAccess().getRule();
	}

	//PropertyConstant returns aadl2::PropertyConstant:
	//	name=ID ":" "constant" (propertyType=[aadl2::PropertyType|QPREF] //	('list' 'of')* is handled as part of UnnamedPropertytype
	//	| ownedPropertyType=UnnamedPropertyType) "=>" constantValue=ConstantPropertyExpression ";";
	public Aadl2GrammarAccess.PropertyConstantElements getPropertyConstantAccess() {
		return gaAadl2.getPropertyConstantAccess();
	}
	
	public ParserRule getPropertyConstantRule() {
		return getPropertyConstantAccess().getRule();
	}

	//NumberValue returns aadl2::NumberValue:
	//	RealLit | IntegerLit;
	public Aadl2GrammarAccess.NumberValueElements getNumberValueAccess() {
		return gaAadl2.getNumberValueAccess();
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}

	//RealLit returns aadl2::RealLiteral:
	//	value=SignedReal;
	public Aadl2GrammarAccess.RealLitElements getRealLitAccess() {
		return gaAadl2.getRealLitAccess();
	}
	
	public ParserRule getRealLitRule() {
		return getRealLitAccess().getRule();
	}

	//IntegerLit returns aadl2::IntegerLiteral:
	//	value=SignedInt;
	public Aadl2GrammarAccess.IntegerLitElements getIntegerLitAccess() {
		return gaAadl2.getIntegerLitAccess();
	}
	
	public ParserRule getIntegerLitRule() {
		return getIntegerLitAccess().getRule();
	}

	////|BooleanTerm
	//ConstantPropertyExpression returns aadl2::PropertyExpression:
	//	RecordTerm | NumericRangeTerm | ComputedTerm | StringTerm | RealTerm | IntegerTerm | ComponentClassifierTerm |
	//	ListTerm | ActualBooleanTerm | LiteralorReferenceTerm;
	public Aadl2GrammarAccess.ConstantPropertyExpressionElements getConstantPropertyExpressionAccess() {
		return gaAadl2.getConstantPropertyExpressionAccess();
	}
	
	public ParserRule getConstantPropertyExpressionRule() {
		return getConstantPropertyExpressionAccess().getRule();
	}

	//IntegerRange returns aadl2::NumericRange:
	//	lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant |
	//	ConstantValue);
	public Aadl2GrammarAccess.IntegerRangeElements getIntegerRangeAccess() {
		return gaAadl2.getIntegerRangeAccess();
	}
	
	public ParserRule getIntegerRangeRule() {
		return getIntegerRangeAccess().getRule();
	}

	//RealRange returns aadl2::NumericRange:
	//	lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue);
	public Aadl2GrammarAccess.RealRangeElements getRealRangeAccess() {
		return gaAadl2.getRealRangeAccess();
	}
	
	public ParserRule getRealRangeRule() {
		return getRealRangeAccess().getRule();
	}

	//// the next ones are filtered as they could be used in an annex
	////	 |'reference' | 'connections' |'constant'|'delta'
	////	| 'and' | 'all' | 'annex' | 'applies' |'binding'|'boolean'|'enumeration'|'path'|'private'
	////	|'extends'|'false'|'features'|'flows'|'in'|'inherit'|'initial'|'integer'|'inverse'|'is'|'list'|'modes'|'none'
	////	|'not'
	//// more to come if we have annex parsers 
	//CoreKeyWord:
	//	"system" | "thread" | "group" | "process" | "data" | "processor" | "memory" | "device" | "bus" | "virtual" |
	//	"subprogram" | "feature" | "package" | "parameter" | "port" | "calls" | "event" | "flow" | "implementation" | "type" |
	//	"mode" | "prototype" | "to" | "end" | "abstract" | "access" | "classifier";
	public Aadl2GrammarAccess.CoreKeyWordElements getCoreKeyWordAccess() {
		return gaAadl2.getCoreKeyWordAccess();
	}
	
	public ParserRule getCoreKeyWordRule() {
		return getCoreKeyWordAccess().getRule();
	}

	//// package anme
	//PNAME:
	//	ID ("::" ID)*;
	public Aadl2GrammarAccess.PNAMEElements getPNAMEAccess() {
		return gaAadl2.getPNAMEAccess();
	}
	
	public ParserRule getPNAMERule() {
		return getPNAMEAccess().getRule();
	}

	//// implementation name (used by value converter)
	//INAME:
	//	ID;
	public Aadl2GrammarAccess.INAMEElements getINAMEAccess() {
		return gaAadl2.getINAMEAccess();
	}
	
	public ParserRule getINAMERule() {
		return getINAMEAccess().getRule();
	}

	//// name of refined entity. Used to set name field by value converter	
	//REFINEDNAME:
	//	ID;
	public Aadl2GrammarAccess.REFINEDNAMEElements getREFINEDNAMEAccess() {
		return gaAadl2.getREFINEDNAMEAccess();
	}
	
	public ParserRule getREFINEDNAMERule() {
		return getREFINEDNAMEAccess().getRule();
	}

	//PModel returns aadl2::Element:
	//	ContainedPropertyAssociation | BasicPropertyAssociation | PropertyAssociation;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaAadl2.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	//ContainedPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? ("(" ownedValue+=ModalPropertyValue (","
	//	ownedValue+=ModalPropertyValue)* ")" | ownedValue+=PropertyValue) ("applies" "to" appliesTo+=ContainmentPath (","
	//	appliesTo+=ContainmentPath)*)? ";";
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaAadl2.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? ("(" ownedValue+=ModalPropertyValue (","
	//	ownedValue+=ModalPropertyValue)* ")" | ownedValue+=PropertyValue) ";";
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaAadl2.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] "=>" ownedValue+=PropertyValue ";";
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaAadl2.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	//ContainmentPath returns aadl2::ContainedNamedElement:
	//	{aadl2::ContainedNamedElement} containmentPathElement+=ContainmentPathElement ("."
	//	containmentPathElement+=ContainmentPathElement)*;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaAadl2.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	//ModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression // phf made this optional: need to check separately that only the last one is optional
	//	"in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")";
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaAadl2.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	////OptionalModalPropertyValue returns aadl2::ModalPropertyValue:
	////	ownedValue=PropertyExpression 
	////	// phf made this optional: need to check separately that only the last one is optional
	////	( 'in' 'modes' '(' 
	////	inMode+=[aadl2::Mode|ID] (',' inMode+=[aadl2::Mode|ID])*
	////	')')?
	////	;
	//// &&&&&&&&&& handling of in binding
	//PropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaAadl2.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression returns aadl2::PropertyExpression:
	//	RecordTerm //	 | BooleanTerm
	//	| ReferenceTerm | ComponentClassifierTerm | ComputedTerm | StringTerm | NumericRangeTerm | RealTerm | IntegerTerm |
	//	ListTerm | ActualBooleanTerm | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaAadl2.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm returns aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaAadl2.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//ActualBooleanTerm returns aadl2::PropertyExpression:
	//	ActualOrTerm | ActualAndTerm | BooleanLiteral | NotTerm | ConstantValue;
	public PropertiesGrammarAccess.ActualBooleanTermElements getActualBooleanTermAccess() {
		return gaAadl2.getActualBooleanTermAccess();
	}
	
	public ParserRule getActualBooleanTermRule() {
		return getActualBooleanTermAccess().getRule();
	}

	//ActualOrTerm returns aadl2::Operation:
	//	ownedPropertyExpression+=AndTerm op=OrOp ownedPropertyExpression+=AndTerm (op=OrOp ownedPropertyExpression+=AndTerm)*;
	public PropertiesGrammarAccess.ActualOrTermElements getActualOrTermAccess() {
		return gaAadl2.getActualOrTermAccess();
	}
	
	public ParserRule getActualOrTermRule() {
		return getActualOrTermAccess().getRule();
	}

	//ActualAndTerm returns aadl2::Operation:
	//	ownedPropertyExpression+=BooleanAtom op=AndOp ownedPropertyExpression+=BooleanAtom (op=AndOp
	//	ownedPropertyExpression+=BooleanAtom)*;
	public PropertiesGrammarAccess.ActualAndTermElements getActualAndTermAccess() {
		return gaAadl2.getActualAndTermAccess();
	}
	
	public ParserRule getActualAndTermRule() {
		return getActualAndTermAccess().getRule();
	}

	//BooleanTerm returns aadl2::PropertyExpression:
	//	OrTerm;
	public PropertiesGrammarAccess.BooleanTermElements getBooleanTermAccess() {
		return gaAadl2.getBooleanTermAccess();
	}
	
	public ParserRule getBooleanTermRule() {
		return getBooleanTermAccess().getRule();
	}

	//OrTerm returns aadl2::PropertyExpression:
	//	AndTerm ({aadl2::Operation.ownedPropertyExpression+=current} op=OrOp ownedPropertyExpression+=AndTerm)*;
	public PropertiesGrammarAccess.OrTermElements getOrTermAccess() {
		return gaAadl2.getOrTermAccess();
	}
	
	public ParserRule getOrTermRule() {
		return getOrTermAccess().getRule();
	}

	//AndTerm returns aadl2::PropertyExpression:
	//	BooleanAtom ({aadl2::Operation.ownedPropertyExpression+=current} op=AndOp ownedPropertyExpression+=BooleanAtom)*;
	public PropertiesGrammarAccess.AndTermElements getAndTermAccess() {
		return gaAadl2.getAndTermAccess();
	}
	
	public ParserRule getAndTermRule() {
		return getAndTermAccess().getRule();
	}

	//NotTerm returns aadl2::Operation:
	//	op=NotOp ownedPropertyExpression+=BooleanAtom;
	public PropertiesGrammarAccess.NotTermElements getNotTermAccess() {
		return gaAadl2.getNotTermAccess();
	}
	
	public ParserRule getNotTermRule() {
		return getNotTermAccess().getRule();
	}

	//BooleanAtom returns aadl2::PropertyExpression:
	//	BooleanLiteral | NotTerm | ConstantValue | "(" BooleanTerm ")";
	public PropertiesGrammarAccess.BooleanAtomElements getBooleanAtomAccess() {
		return gaAadl2.getBooleanAtomAccess();
	}
	
	public ParserRule getBooleanAtomRule() {
		return getBooleanAtomAccess().getRule();
	}

	//BooleanLiteral returns aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?="true" | "false");
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaAadl2.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue returns aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaAadl2.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm returns aadl2::ReferenceValue:
	//	"reference" "(" containmentPathElement+=ContainmentPathElement ("." containmentPathElement+=ContainmentPathElement)*
	//	")";
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaAadl2.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm returns aadl2::RecordValue:
	//	"(" ownedFieldValue+=FieldPropertyAssociation+ ")";
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaAadl2.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//ComputedTerm returns aadl2::ComputedValue:
	//	"compute" "(" function=ID ")";
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaAadl2.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm returns aadl2::ClassifierValue:
	//	"classifier" "(" classifier=[aadl2::ComponentClassifier|QCREF] ")";
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaAadl2.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm returns aadl2::ListValue:
	//	"(" ownedListElement+=PropertyExpression ("," ownedListElement+=PropertyExpression)* ")";
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaAadl2.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation returns aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty] "=>" ownedValue=PropertyExpression ";";
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaAadl2.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	//// need to add annex path element
	//ContainmentPathElement returns aadl2::ContainmentPathElement:
	//	namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange? | "annex" namedElement=[aadl2::NamedElement|ANNEXREF];
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaAadl2.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	//	"{" STAR STAR ID STAR STAR "}";
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaAadl2.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//enum OperationKind returns aadl2::OperationKind:
	//	and | or | not | plus="+" | minus="-";
	public PropertiesGrammarAccess.OperationKindElements getOperationKindAccess() {
		return gaAadl2.getOperationKindAccess();
	}
	
	public EnumRule getOperationKindRule() {
		return getOperationKindAccess().getRule();
	}

	//// Need Value Converters	
	//AndOp returns aadl2::OperationKind:
	//	"and";
	public PropertiesGrammarAccess.AndOpElements getAndOpAccess() {
		return gaAadl2.getAndOpAccess();
	}
	
	public ParserRule getAndOpRule() {
		return getAndOpAccess().getRule();
	}

	//OrOp returns aadl2::OperationKind:
	//	"or";
	public PropertiesGrammarAccess.OrOpElements getOrOpAccess() {
		return gaAadl2.getOrOpAccess();
	}
	
	public ParserRule getOrOpRule() {
		return getOrOpAccess().getRule();
	}

	//NotOp returns aadl2::OperationKind:
	//	"not";
	public PropertiesGrammarAccess.NotOpElements getNotOpAccess() {
		return gaAadl2.getNotOpAccess();
	}
	
	public ParserRule getNotOpRule() {
		return getNotOpAccess().getRule();
	}

	//PlusMinus returns aadl2::OperationKind:
	//	"+" | "-";
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaAadl2.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm returns aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaAadl2.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString: // remove quotes from string in ValueConverter
	//	STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaAadl2.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange returns aadl2::ArrayRange:
	//	{aadl2::ArrayRange} "[" lowerBound=INTVALUE (".." upperBound=INTVALUE)? "]";
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaAadl2.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant returns aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaAadl2.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//IntegerTerm returns aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.IntegerTermElements getIntegerTermAccess() {
		return gaAadl2.getIntegerTermAccess();
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedInt returns aadl2::Integer:
	//	("+" | "-")? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaAadl2.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//RealTerm returns aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.RealTermElements getRealTermAccess() {
		return gaAadl2.getRealTermAccess();
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//SignedReal returns aadl2::Real:
	//	("+" | "-")? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaAadl2.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm returns aadl2::RangeValue:
	//	minimum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	//	NumAlt ".." maximum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//	NumAlt ("delta" delta= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//	NumAlt)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaAadl2.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt returns aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaAadl2.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAadl2.getSL_COMMENTRule();
	} 

	//INTVALUE returns aadl2::Integer: //NUMERAL 	
	//	INTEGER_LIT;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaAadl2.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	////terminal NUMERAL:
	////	(DIGIT)+('_' (DIGIT)+)*
	////;
	////terminal INT returns ecore::EInt: (DIGIT)+('_' (DIGIT)+)*;
	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaAadl2.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	("e" | "E") "+"? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaAadl2.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("." DIGIT+ ("_" DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaAadl2.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("#" BASED_INTEGER "#" INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaAadl2.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return gaAadl2.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaAadl2.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaAadl2.getBASED_INTEGERRule();
	} 

	//QCREF:
	//	(ID "::")* ID ("." ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaAadl2.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	"*";
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaAadl2.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaAadl2.getSTRINGRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaAadl2.getIDRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaAadl2.getWSRule();
	} 
}
