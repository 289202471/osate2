/*
* generated by Xtext
*/
grammar InternalProperties;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.osate.xtext.aadl2.properties.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.osate.xtext.aadl2.properties.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

}

@parser::members {

 	private PropertiesGrammarAccess grammarAccess;
 	
    public InternalPropertiesParser(TokenStream input, PropertiesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PropertySet";	
   	}
   	
   	@Override
   	protected PropertiesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePropertySet
entryRulePropertySet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertySetRule()); }
	 iv_rulePropertySet=rulePropertySet 
	 { $current=$iv_rulePropertySet.current; } 
	 EOF 
;

// Rule PropertySet
rulePropertySet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='property' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertySetAccess().getPropertyKeyword_0());
    }
	otherlv_1='set' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertySetAccess().getSetKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getPropertySetAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertySetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='is' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertySetAccess().getIsKeyword_3());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertySetAccess().getOwnedPropertyTypeParserRuleCall_4_0_0()); 
	    }
		lv_owned_4_1=rulePropertyType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertySetRule());
	        }
       		add(
       			$current, 
       			"owned",
        		lv_owned_4_1, 
        		"PropertyType");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPropertySetAccess().getOwnedPropertyDefinitionParserRuleCall_4_0_1()); 
	    }
		lv_owned_4_2=rulePropertyDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertySetRule());
	        }
       		add(
       			$current, 
       			"owned",
        		lv_owned_4_2, 
        		"PropertyDefinition");
	        afterParserOrEnumRuleCall();
	    }

)

)
)+	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPropertySetAccess().getEndKeyword_5());
    }
this_ID_6=RULE_ID
    { 
    newLeafNode(this_ID_6, grammarAccess.getPropertySetAccess().getIDTerminalRuleCall_6()); 
    }
this_SEMI_7=RULE_SEMI
    { 
    newLeafNode(this_SEMI_7, grammarAccess.getPropertySetAccess().getSEMITerminalRuleCall_7()); 
    }
)
;





// Entry rule entryRulePropertyType
entryRulePropertyType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyTypeRule()); }
	 iv_rulePropertyType=rulePropertyType 
	 { $current=$iv_rulePropertyType.current; } 
	 EOF 
;

// Rule PropertyType
rulePropertyType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPropertyTypeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)this_COLON_1=RULE_COLON
    { 
    newLeafNode(this_COLON_1, grammarAccess.getPropertyTypeAccess().getCOLONTerminalRuleCall_1()); 
    }
	otherlv_2='type' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyTypeAccess().getTypeKeyword_2());
    }
this_SEMI_3=RULE_SEMI
    { 
    newLeafNode(this_SEMI_3, grammarAccess.getPropertyTypeAccess().getSEMITerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRulePropertyDefinition
entryRulePropertyDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyDefinitionRule()); }
	 iv_rulePropertyDefinition=rulePropertyDefinition 
	 { $current=$iv_rulePropertyDefinition.current; } 
	 EOF 
;

// Rule PropertyDefinition
rulePropertyDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPropertyDefinitionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)this_COLON_1=RULE_COLON
    { 
    newLeafNode(this_COLON_1, grammarAccess.getPropertyDefinitionAccess().getCOLONTerminalRuleCall_1()); 
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyDefinitionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getPropertyDefinitionAccess().getTypePropertyTypeCrossReference_2_0()); 
	}

)
)this_SEMI_3=RULE_SEMI
    { 
    newLeafNode(this_SEMI_3, grammarAccess.getPropertyDefinitionAccess().getSEMITerminalRuleCall_3()); 
    }
)
;







// Entry rule entryRulePropertyExpression
entryRulePropertyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyExpressionRule()); }
	 iv_rulePropertyExpression=rulePropertyExpression 
	 { $current=$iv_rulePropertyExpression.current; } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getProbabilityValueParserRuleCall_1()); 
    }
    this_ProbabilityValue_1=ruleProbabilityValue
    { 
        $current = $this_ProbabilityValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLiteralAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleProbabilityValue
entryRuleProbabilityValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProbabilityValueRule()); }
	 iv_ruleProbabilityValue=ruleProbabilityValue 
	 { $current=$iv_ruleProbabilityValue.current; } 
	 EOF 
;

// Rule ProbabilityValue
ruleProbabilityValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityValueAccess().getNumberREALParserRuleCall_0_0()); 
	    }
		lv_number_0_0=ruleREAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityValueRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_0_0, 
        		"REAL");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_distribution_1_0=RULE_ID
		{
			newLeafNode(lv_distribution_1_0, grammarAccess.getProbabilityValueAccess().getDistributionIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProbabilityValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"distribution",
        		lv_distribution_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getREALRule()); } 
	 iv_ruleREAL=ruleREAL 
	 { $current=$iv_ruleREAL.current.getText(); }  
	 EOF 
;

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); 
    }
    this_DOT_1=RULE_DOT    {
		$current.merge(this_DOT_1);
    }

    { 
    newLeafNode(this_DOT_1, grammarAccess.getREALAccess().getDOTTerminalRuleCall_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;









// Entry rule entryRuleINAME
entryRuleINAME returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINAMERule()); } 
	 iv_ruleINAME=ruleINAME 
	 { $current=$iv_ruleINAME.current.getText(); }  
	 EOF 
;

// Rule INAME
ruleINAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getINAMEAccess().getIDTerminalRuleCall()); 
    }

    ;







RULE_NONE : 'none' RULE_SEMI;

RULE_LTRANS : '-[';

RULE_RTRANS : ']->';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_SEMI : ';';

RULE_COLON : ':';

RULE_COMMA : ',';

RULE_DOT : '.';

RULE_LPARENS : '(';

RULE_RPARENS : ')';

RULE_LBRACKET : '[';

RULE_RBRACKET : ']';

RULE_LCURLY : '{';

RULE_RCURLY : '}';

RULE_ASSIGN : '=>';

RULE_APPEND : '+=>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


