/*
* generated by Xtext
*/

package org.osate.xtext.aadl2.properties.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PropertiesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PropertySetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertySet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cOwnedAlternatives_4_0 = (Alternatives)cOwnedAssignment_4.eContents().get(0);
		private final RuleCall cOwnedPropertyTypeParserRuleCall_4_0_0 = (RuleCall)cOwnedAlternatives_4_0.eContents().get(0);
		private final RuleCall cOwnedPropertyDefinitionParserRuleCall_4_0_1 = (RuleCall)cOwnedAlternatives_4_0.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cIDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cSEMITerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//PropertySet:
		//	"property" "set" name=ID "is" owned+=(PropertyType | PropertyDefinition)+ "end" ID SEMI;
		public ParserRule getRule() { return rule; }

		//"property" "set" name=ID "is" owned+=(PropertyType | PropertyDefinition)+ "end" ID SEMI
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//"set"
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"is"
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }

		//owned+=(PropertyType | PropertyDefinition)+
		public Assignment getOwnedAssignment_4() { return cOwnedAssignment_4; }

		//PropertyType | PropertyDefinition
		public Alternatives getOwnedAlternatives_4_0() { return cOwnedAlternatives_4_0; }

		//PropertyType
		public RuleCall getOwnedPropertyTypeParserRuleCall_4_0_0() { return cOwnedPropertyTypeParserRuleCall_4_0_0; }

		//PropertyDefinition
		public RuleCall getOwnedPropertyDefinitionParserRuleCall_4_0_1() { return cOwnedPropertyDefinitionParserRuleCall_4_0_1; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//ID
		public RuleCall getIDTerminalRuleCall_6() { return cIDTerminalRuleCall_6; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_7() { return cSEMITerminalRuleCall_7; }
	}

	public class PropertyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PropertyType:
		//	name=ID COLON "type" SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "type" SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class PropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypePropertyTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypePropertyTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypePropertyTypeCrossReference_2_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PropertyDefinition:
		//	name=ID COLON type=[PropertyType] SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON type=[PropertyType] SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//type=[PropertyType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[PropertyType]
		public CrossReference getTypePropertyTypeCrossReference_2_0() { return cTypePropertyTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypePropertyTypeIDTerminalRuleCall_2_0_1() { return cTypePropertyTypeIDTerminalRuleCall_2_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class PropertyAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePropertyExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PropertyAssociation:
		//	name=ID ASSIGN value=PropertyExpression SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID ASSIGN value=PropertyExpression SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_1() { return cASSIGNTerminalRuleCall_1; }

		//value=PropertyExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//PropertyExpression
		public RuleCall getValuePropertyExpressionParserRuleCall_2_0() { return cValuePropertyExpressionParserRuleCall_2_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class PropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProbabilityValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PropertyExpression:
		//	Literal | ProbabilityValue;
		public ParserRule getRule() { return rule; }

		//Literal | ProbabilityValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//ProbabilityValue
		public RuleCall getProbabilityValueParserRuleCall_1() { return cProbabilityValueParserRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Literal:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ProbabilityValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProbabilityValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberREALParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cDistributionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistributionIDTerminalRuleCall_1_0 = (RuleCall)cDistributionAssignment_1.eContents().get(0);
		
		//ProbabilityValue:
		//	number=REAL distribution=ID;
		public ParserRule getRule() { return rule; }

		//number=REAL distribution=ID
		public Group getGroup() { return cGroup; }

		//number=REAL
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }

		//REAL
		public RuleCall getNumberREALParserRuleCall_0_0() { return cNumberREALParserRuleCall_0_0; }

		//distribution=ID
		public Assignment getDistributionAssignment_1() { return cDistributionAssignment_1; }

		//ID
		public RuleCall getDistributionIDTerminalRuleCall_1_0() { return cDistributionIDTerminalRuleCall_1_0; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL:
		//	INT DOT INT;
		public ParserRule getRule() { return rule; }

		//INT DOT INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1() { return cDOTTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class QNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINAMEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QNAME:
		//	ID DOT INAME;
		public ParserRule getRule() { return rule; }

		//ID DOT INAME
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1() { return cDOTTerminalRuleCall_1; }

		//INAME
		public RuleCall getINAMEParserRuleCall_2() { return cINAMEParserRuleCall_2; }
	}

	public class PNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PNAME:
		//	ID ("::" ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("::" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("::" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class INAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INAME");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INAME:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class QCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QCREF:
		//	(ID "::")* ID (DOT ID)?;
		public ParserRule getRule() { return rule; }

		//(ID "::")* ID (DOT ID)?
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//(DOT ID)?
		public Group getGroup_2() { return cGroup_2; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0() { return cDOTTerminalRuleCall_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	
	
	private PropertySetElements pPropertySet;
	private PropertyTypeElements pPropertyType;
	private PropertyDefinitionElements pPropertyDefinition;
	private PropertyAssociationElements pPropertyAssociation;
	private PropertyExpressionElements pPropertyExpression;
	private LiteralElements pLiteral;
	private ProbabilityValueElements pProbabilityValue;
	private TerminalRule tNONE;
	private TerminalRule tLTRANS;
	private TerminalRule tRTRANS;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tSEMI;
	private TerminalRule tCOLON;
	private TerminalRule tCOMMA;
	private TerminalRule tDOT;
	private TerminalRule tLPARENS;
	private TerminalRule tRPARENS;
	private TerminalRule tLBRACKET;
	private TerminalRule tRBRACKET;
	private TerminalRule tLCURLY;
	private TerminalRule tRCURLY;
	private TerminalRule tASSIGN;
	private TerminalRule tAPPEND;
	private REALElements pREAL;
	private QNAMEElements pQNAME;
	private PNAMEElements pPNAME;
	private INAMEElements pINAME;
	private QCREFElements pQCREF;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PropertiesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PropertySet:
	//	"property" "set" name=ID "is" owned+=(PropertyType | PropertyDefinition)+ "end" ID SEMI;
	public PropertySetElements getPropertySetAccess() {
		return (pPropertySet != null) ? pPropertySet : (pPropertySet = new PropertySetElements());
	}
	
	public ParserRule getPropertySetRule() {
		return getPropertySetAccess().getRule();
	}

	//PropertyType:
	//	name=ID COLON "type" SEMI;
	public PropertyTypeElements getPropertyTypeAccess() {
		return (pPropertyType != null) ? pPropertyType : (pPropertyType = new PropertyTypeElements());
	}
	
	public ParserRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}

	//PropertyDefinition:
	//	name=ID COLON type=[PropertyType] SEMI;
	public PropertyDefinitionElements getPropertyDefinitionAccess() {
		return (pPropertyDefinition != null) ? pPropertyDefinition : (pPropertyDefinition = new PropertyDefinitionElements());
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}

	//PropertyAssociation:
	//	name=ID ASSIGN value=PropertyExpression SEMI;
	public PropertyAssociationElements getPropertyAssociationAccess() {
		return (pPropertyAssociation != null) ? pPropertyAssociation : (pPropertyAssociation = new PropertyAssociationElements());
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//PropertyExpression:
	//	Literal | ProbabilityValue;
	public PropertyExpressionElements getPropertyExpressionAccess() {
		return (pPropertyExpression != null) ? pPropertyExpression : (pPropertyExpression = new PropertyExpressionElements());
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//Literal:
	//	name=ID;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//ProbabilityValue:
	//	number=REAL distribution=ID;
	public ProbabilityValueElements getProbabilityValueAccess() {
		return (pProbabilityValue != null) ? pProbabilityValue : (pProbabilityValue = new ProbabilityValueElements());
	}
	
	public ParserRule getProbabilityValueRule() {
		return getProbabilityValueAccess().getRule();
	}

	//terminal NONE:
	//	"none" SEMI;
	public TerminalRule getNONERule() {
		return (tNONE != null) ? tNONE : (tNONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NONE"));
	} 

	//terminal LTRANS:
	//	"-[";
	public TerminalRule getLTRANSRule() {
		return (tLTRANS != null) ? tLTRANS : (tLTRANS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTRANS"));
	} 

	//terminal RTRANS:
	//	"]->";
	public TerminalRule getRTRANSRule() {
		return (tRTRANS != null) ? tRTRANS : (tRTRANS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RTRANS"));
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal SEMI:
	//	";";
	public TerminalRule getSEMIRule() {
		return (tSEMI != null) ? tSEMI : (tSEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMI"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal LPARENS:
	//	"(";
	public TerminalRule getLPARENSRule() {
		return (tLPARENS != null) ? tLPARENS : (tLPARENS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPARENS"));
	} 

	//terminal RPARENS:
	//	")";
	public TerminalRule getRPARENSRule() {
		return (tRPARENS != null) ? tRPARENS : (tRPARENS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPARENS"));
	} 

	//terminal LBRACKET:
	//	"[";
	public TerminalRule getLBRACKETRule() {
		return (tLBRACKET != null) ? tLBRACKET : (tLBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACKET"));
	} 

	//terminal RBRACKET:
	//	"]";
	public TerminalRule getRBRACKETRule() {
		return (tRBRACKET != null) ? tRBRACKET : (tRBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACKET"));
	} 

	//terminal LCURLY:
	//	"{";
	public TerminalRule getLCURLYRule() {
		return (tLCURLY != null) ? tLCURLY : (tLCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCURLY"));
	} 

	//terminal RCURLY:
	//	"}";
	public TerminalRule getRCURLYRule() {
		return (tRCURLY != null) ? tRCURLY : (tRCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RCURLY"));
	} 

	//terminal ASSIGN:
	//	"=>";
	public TerminalRule getASSIGNRule() {
		return (tASSIGN != null) ? tASSIGN : (tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN"));
	} 

	//terminal APPEND:
	//	"+=>";
	public TerminalRule getAPPENDRule() {
		return (tAPPEND != null) ? tAPPEND : (tAPPEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "APPEND"));
	} 

	//REAL:
	//	INT DOT INT;
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//QNAME:
	//	ID DOT INAME;
	public QNAMEElements getQNAMEAccess() {
		return (pQNAME != null) ? pQNAME : (pQNAME = new QNAMEElements());
	}
	
	public ParserRule getQNAMERule() {
		return getQNAMEAccess().getRule();
	}

	//PNAME:
	//	ID ("::" ID)*;
	public PNAMEElements getPNAMEAccess() {
		return (pPNAME != null) ? pPNAME : (pPNAME = new PNAMEElements());
	}
	
	public ParserRule getPNAMERule() {
		return getPNAMEAccess().getRule();
	}

	//INAME:
	//	ID;
	public INAMEElements getINAMEAccess() {
		return (pINAME != null) ? pINAME : (pINAME = new INAMEElements());
	}
	
	public ParserRule getINAMERule() {
		return getINAMEAccess().getRule();
	}

	//QCREF:
	//	(ID "::")* ID (DOT ID)?;
	public QCREFElements getQCREFAccess() {
		return (pQCREF != null) ? pQCREF : (pQCREF = new QCREFElements());
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
