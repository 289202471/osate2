
/*
* generated by Xtext
*/
lexer grammar InternalAadl2Lexer;


@header {
package org.osate.xtext.aadl2.ui.contentassist.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}




KEYWORD_96 : 'implementation';

KEYWORD_95 : 'subcomponents';

KEYWORD_91 : 'aadlboolean';

KEYWORD_92 : 'aadlinteger';

KEYWORD_93 : 'connections';

KEYWORD_94 : 'enumeration';

KEYWORD_86 : 'aadlstring';

KEYWORD_87 : 'classifier';

KEYWORD_88 : 'properties';

KEYWORD_89 : 'prototypes';

KEYWORD_90 : 'subprogram';

KEYWORD_83 : 'parameter';

KEYWORD_84 : 'processor';

KEYWORD_85 : 'reference';

KEYWORD_76 : 'aadlreal';

KEYWORD_77 : 'abstract';

KEYWORD_78 : 'constant';

KEYWORD_79 : 'features';

KEYWORD_80 : 'property';

KEYWORD_81 : 'provides';

KEYWORD_82 : 'requires';

KEYWORD_63 : 'applies';

KEYWORD_64 : 'compute';

KEYWORD_65 : 'extends';

KEYWORD_66 : 'feature';

KEYWORD_67 : 'inherit';

KEYWORD_68 : 'initial';

KEYWORD_69 : 'inverse';

KEYWORD_70 : 'package';

KEYWORD_71 : 'private';

KEYWORD_72 : 'process';

KEYWORD_73 : 'refined';

KEYWORD_74 : 'renames';

KEYWORD_75 : 'virtual';

KEYWORD_55 : 'access';

KEYWORD_56 : 'device';

KEYWORD_57 : 'memory';

KEYWORD_58 : 'public';

KEYWORD_59 : 'record';

KEYWORD_60 : 'source';

KEYWORD_61 : 'system';

KEYWORD_62 : 'thread';

KEYWORD_45 : 'annex';

KEYWORD_46 : 'calls';

KEYWORD_47 : 'delta';

KEYWORD_48 : 'event';

KEYWORD_49 : 'false';

KEYWORD_50 : 'flows';

KEYWORD_51 : 'group';

KEYWORD_52 : 'modes';

KEYWORD_53 : 'range';

KEYWORD_54 : 'units';

KEYWORD_34 : 'data';

KEYWORD_35 : 'flow';

KEYWORD_36 : 'mode';

KEYWORD_37 : 'none';

KEYWORD_38 : 'path';

KEYWORD_39 : 'port';

KEYWORD_40 : 'self';

KEYWORD_41 : 'sink';

KEYWORD_42 : 'true';

KEYWORD_43 : 'type';

KEYWORD_44 : 'with';

KEYWORD_24 : '+=>';

KEYWORD_25 : '<->';

KEYWORD_26 : ']->';

KEYWORD_27 : 'all';

KEYWORD_28 : 'and';

KEYWORD_29 : 'bus';

KEYWORD_30 : 'end';

KEYWORD_31 : 'not';

KEYWORD_32 : 'out';

KEYWORD_33 : 'set';

KEYWORD_14 : '->';

KEYWORD_15 : '-[';

KEYWORD_16 : '..';

KEYWORD_17 : '::';

KEYWORD_18 : '=>';

KEYWORD_19 : 'in';

KEYWORD_20 : 'is';

KEYWORD_21 : 'of';

KEYWORD_22 : 'or';

KEYWORD_23 : 'to';

KEYWORD_1 : '(';

KEYWORD_2 : ')';

KEYWORD_3 : '*';

KEYWORD_4 : '+';

KEYWORD_5 : ',';

KEYWORD_6 : '-';

KEYWORD_7 : '.';

KEYWORD_8 : ':';

KEYWORD_9 : ';';

KEYWORD_10 : '[';

KEYWORD_11 : ']';

KEYWORD_12 : '{';

KEYWORD_13 : '}';



RULE_ANNEXTEXT : '{**' ( options {greedy=false;} : . )*'**}';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



