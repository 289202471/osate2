/*
 * generated by Xtext
 */
package org.osate.xtext.aadl2.instance.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.osate.xtext.aadl2.instance.services.InstanceGrammarAccess

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class InstanceFormatter extends AbstractDeclarativeFormatter {

	@Inject extension InstanceGrammarAccess
	
	override protected void configureFormatting(FormattingConfig c) {
		findKeywordPairs("{", "}").forEach[
			c.setIndentationIncrement.after(first)
			c.setLinewrap.after(first)
			c.setIndentationDecrement.before(second)
			c.setLinewrap.before(second)
		]
		c.setLinewrap(1).after(systemOperationModeRule)
		c.setLinewrap(1).after(componentInstanceRule)
		c.setLinewrap(1).after(featureInstanceRule)
		c.setLinewrap(1).after(connectionInstanceRule)
		c.setLinewrap(1).after(connectionReferenceRule)
		c.setLinewrap(1).after(flowSpecificationInstanceRule)
		c.setLinewrap(1).after(endToEndFlowInstanceRule)
		c.setLinewrap(1).after(modeInstanceRule)
		c.setLinewrap(1).after(modeTransitionInstanceRule)
		c.setLinewrap(1).after(propertyAssociationInstanceRule)
	}
}