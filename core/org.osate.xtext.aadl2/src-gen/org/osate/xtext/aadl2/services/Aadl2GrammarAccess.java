/*
* generated by Xtext
*/

package org.osate.xtext.aadl2.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Aadl2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AadlPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AadlPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePNAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOwnedPublicSectionAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cOwnedPublicSectionPublicPackageSectionParserRuleCall_2_0_0_0 = (RuleCall)cOwnedPublicSectionAssignment_2_0_0.eContents().get(0);
		private final Assignment cOwnedPrivateSectionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOwnedPrivateSectionPrivatePackageSectionParserRuleCall_2_0_1_0 = (RuleCall)cOwnedPrivateSectionAssignment_2_0_1.eContents().get(0);
		private final Assignment cOwnedPrivateSectionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOwnedPrivateSectionPrivatePackageSectionParserRuleCall_2_1_0 = (RuleCall)cOwnedPrivateSectionAssignment_2_1.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		////AadlSpec:
		////	(AadlPackage | PropertySet);
		////NamedElement returns aadl2::NamedElement:
		////	Classifier | AadlPackage | Feature | Subcomponent | Prototype;
		////
		////Namespace returns Namespace: PackageSection | PropertySet | Classifier;	
		//AadlPackage returns aadl2::AadlPackage:
		//	"package" name=PNAME (ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection? |
		//	ownedPrivateSection=PrivatePackageSection) //	(=> 'properties'
		//	//	((ownedPropertyAssociation+=PropertyAssociation)+ | noProperties?=NONE))?
		//	"end" ID ("::" ID)* SEMI;
		public ParserRule getRule() { return rule; }

		//"package" name=PNAME (ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection? |
		//ownedPrivateSection=PrivatePackageSection) //	(=> 'properties'
		////	((ownedPropertyAssociation+=PropertyAssociation)+ | noProperties?=NONE))?
		//"end" ID ("::" ID)* SEMI
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=PNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PNAME
		public RuleCall getNamePNAMEParserRuleCall_1_0() { return cNamePNAMEParserRuleCall_1_0; }

		//ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection? |
		//ownedPrivateSection=PrivatePackageSection
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//ownedPublicSection=PublicPackageSection
		public Assignment getOwnedPublicSectionAssignment_2_0_0() { return cOwnedPublicSectionAssignment_2_0_0; }

		//PublicPackageSection
		public RuleCall getOwnedPublicSectionPublicPackageSectionParserRuleCall_2_0_0_0() { return cOwnedPublicSectionPublicPackageSectionParserRuleCall_2_0_0_0; }

		//ownedPrivateSection=PrivatePackageSection?
		public Assignment getOwnedPrivateSectionAssignment_2_0_1() { return cOwnedPrivateSectionAssignment_2_0_1; }

		//PrivatePackageSection
		public RuleCall getOwnedPrivateSectionPrivatePackageSectionParserRuleCall_2_0_1_0() { return cOwnedPrivateSectionPrivatePackageSectionParserRuleCall_2_0_1_0; }

		//ownedPrivateSection=PrivatePackageSection
		public Assignment getOwnedPrivateSectionAssignment_2_1() { return cOwnedPrivateSectionAssignment_2_1; }

		//PrivatePackageSection
		public RuleCall getOwnedPrivateSectionPrivatePackageSectionParserRuleCall_2_1_0() { return cOwnedPrivateSectionPrivatePackageSectionParserRuleCall_2_1_0; }

		////	(=> 'properties'
		////	((ownedPropertyAssociation+=PropertyAssociation)+ | noProperties?=NONE))?
		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }

		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }

		//("::" ID)*
		public Group getGroup_5() { return cGroup_5; }

		//"::"
		public Keyword getColonColonKeyword_5_0() { return cColonColonKeyword_5_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_5_1() { return cIDTerminalRuleCall_5_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_6() { return cSEMITerminalRuleCall_6; }
	}

	public class PackageSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPublicPackageSectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrivatePackageSectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PackageSection returns aadl2::PackageSection:
		//	PublicPackageSection | PrivatePackageSection;
		public ParserRule getRule() { return rule; }

		//PublicPackageSection | PrivatePackageSection
		public Alternatives getAlternatives() { return cAlternatives; }

		//PublicPackageSection
		public RuleCall getPublicPackageSectionParserRuleCall_0() { return cPublicPackageSectionParserRuleCall_0; }

		//PrivatePackageSection
		public RuleCall getPrivatePackageSectionParserRuleCall_1() { return cPrivatePackageSectionParserRuleCall_1; }
	}

	public class PublicPackageSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PublicPackageSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPublicPackageSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cImportedPackageAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cImportedPackageAadlPackageCrossReference_2_1_0 = (CrossReference)cImportedPackageAssignment_2_1.eContents().get(0);
		private final RuleCall cImportedPackageAadlPackagePNAMEParserRuleCall_2_1_0_1 = (RuleCall)cImportedPackageAadlPackageCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cImportedPackageAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cImportedPackageAadlPackageCrossReference_2_2_1_0 = (CrossReference)cImportedPackageAssignment_2_2_1.eContents().get(0);
		private final RuleCall cImportedPackageAadlPackagePNAMEParserRuleCall_2_2_1_0_1 = (RuleCall)cImportedPackageAadlPackageCrossReference_2_2_1_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedSystemTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedSystemTypeSystemTypeParserRuleCall_3_0_0 = (RuleCall)cOwnedSystemTypeAssignment_3_0.eContents().get(0);
		private final Assignment cOwnedSystemImplementationAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOwnedSystemImplementationSystemImplementationParserRuleCall_3_1_0 = (RuleCall)cOwnedSystemImplementationAssignment_3_1.eContents().get(0);
		private final Assignment cOwnedProcessorTypeAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cOwnedProcessorTypeProcessorTypeParserRuleCall_3_2_0 = (RuleCall)cOwnedProcessorTypeAssignment_3_2.eContents().get(0);
		private final Assignment cOwnedDataTypeAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cOwnedDataTypeDataTypeParserRuleCall_3_3_0 = (RuleCall)cOwnedDataTypeAssignment_3_3.eContents().get(0);
		
		//PublicPackageSection returns aadl2::PublicPackageSection:
		//	{aadl2::PublicPackageSection} "public" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
		//	(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
		//	ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*;
		public ParserRule getRule() { return rule; }

		//{aadl2::PublicPackageSection} "public" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
		//(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
		//ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*
		public Group getGroup() { return cGroup; }

		//{aadl2::PublicPackageSection}
		public Action getPublicPackageSectionAction_0() { return cPublicPackageSectionAction_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//(=> "with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
		//(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)*
		public Group getGroup_2() { return cGroup_2; }

		//=> "with"
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }

		//importedPackage+=[aadl2::AadlPackage|PNAME]
		public Assignment getImportedPackageAssignment_2_1() { return cImportedPackageAssignment_2_1; }

		//[aadl2::AadlPackage|PNAME]
		public CrossReference getImportedPackageAadlPackageCrossReference_2_1_0() { return cImportedPackageAadlPackageCrossReference_2_1_0; }

		//PNAME
		public RuleCall getImportedPackageAadlPackagePNAMEParserRuleCall_2_1_0_1() { return cImportedPackageAadlPackagePNAMEParserRuleCall_2_1_0_1; }

		//(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_2_0() { return cCOMMATerminalRuleCall_2_2_0; }

		//importedPackage+=[aadl2::AadlPackage|PNAME]
		public Assignment getImportedPackageAssignment_2_2_1() { return cImportedPackageAssignment_2_2_1; }

		//[aadl2::AadlPackage|PNAME]
		public CrossReference getImportedPackageAadlPackageCrossReference_2_2_1_0() { return cImportedPackageAadlPackageCrossReference_2_2_1_0; }

		//PNAME
		public RuleCall getImportedPackageAadlPackagePNAMEParserRuleCall_2_2_1_0_1() { return cImportedPackageAadlPackagePNAMEParserRuleCall_2_2_1_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_2_3() { return cSEMITerminalRuleCall_2_3; }

		//(ownedSystemType+=SystemType | ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType |
		//ownedDataType+=DataType)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedSystemType+=SystemType
		public Assignment getOwnedSystemTypeAssignment_3_0() { return cOwnedSystemTypeAssignment_3_0; }

		//SystemType
		public RuleCall getOwnedSystemTypeSystemTypeParserRuleCall_3_0_0() { return cOwnedSystemTypeSystemTypeParserRuleCall_3_0_0; }

		//ownedSystemImplementation+=SystemImplementation
		public Assignment getOwnedSystemImplementationAssignment_3_1() { return cOwnedSystemImplementationAssignment_3_1; }

		//SystemImplementation
		public RuleCall getOwnedSystemImplementationSystemImplementationParserRuleCall_3_1_0() { return cOwnedSystemImplementationSystemImplementationParserRuleCall_3_1_0; }

		//ownedProcessorType+=ProcessorType
		public Assignment getOwnedProcessorTypeAssignment_3_2() { return cOwnedProcessorTypeAssignment_3_2; }

		//ProcessorType
		public RuleCall getOwnedProcessorTypeProcessorTypeParserRuleCall_3_2_0() { return cOwnedProcessorTypeProcessorTypeParserRuleCall_3_2_0; }

		//ownedDataType+=DataType
		public Assignment getOwnedDataTypeAssignment_3_3() { return cOwnedDataTypeAssignment_3_3; }

		//DataType
		public RuleCall getOwnedDataTypeDataTypeParserRuleCall_3_3_0() { return cOwnedDataTypeDataTypeParserRuleCall_3_3_0; }
	}

	public class PrivatePackageSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrivatePackageSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrivatePackageSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cImportedPackageAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cImportedPackageAadlPackageCrossReference_2_1_0 = (CrossReference)cImportedPackageAssignment_2_1.eContents().get(0);
		private final RuleCall cImportedPackageAadlPackagePNAMEParserRuleCall_2_1_0_1 = (RuleCall)cImportedPackageAadlPackageCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cImportedPackageAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cImportedPackageAadlPackageCrossReference_2_2_1_0 = (CrossReference)cImportedPackageAssignment_2_2_1.eContents().get(0);
		private final RuleCall cImportedPackageAadlPackagePNAMEParserRuleCall_2_2_1_0_1 = (RuleCall)cImportedPackageAadlPackageCrossReference_2_2_1_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedSystemTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedSystemTypeSystemTypeParserRuleCall_3_0_0 = (RuleCall)cOwnedSystemTypeAssignment_3_0.eContents().get(0);
		private final Assignment cOwnedSystemImplementationAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOwnedSystemImplementationSystemImplementationParserRuleCall_3_1_0 = (RuleCall)cOwnedSystemImplementationAssignment_3_1.eContents().get(0);
		private final Assignment cOwnedProcessorTypeAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cOwnedProcessorTypeProcessorTypeParserRuleCall_3_2_0 = (RuleCall)cOwnedProcessorTypeAssignment_3_2.eContents().get(0);
		private final Assignment cOwnedDataTypeAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cOwnedDataTypeDataTypeParserRuleCall_3_3_0 = (RuleCall)cOwnedDataTypeAssignment_3_3.eContents().get(0);
		
		//// currently derived: (ownedClassifier+=Classifier | ownedAnnexLibrary+=AnnexLibrary)*;
		////Import : AadlPackage | PropertySet;
		////	(ownedClassifier+=Classifier | ownedAnnexLibrary+=AnnexLibrary)*
		//PrivatePackageSection returns aadl2::PrivatePackageSection:
		//	{aadl2::PrivatePackageSection} "private" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
		//	(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
		//	ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*;
		public ParserRule getRule() { return rule; }

		//{aadl2::PrivatePackageSection} "private" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
		//(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
		//ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*
		public Group getGroup() { return cGroup; }

		//{aadl2::PrivatePackageSection}
		public Action getPrivatePackageSectionAction_0() { return cPrivatePackageSectionAction_0; }

		//"private"
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }

		//(=> "with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
		//(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)*
		public Group getGroup_2() { return cGroup_2; }

		//=> "with"
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }

		//importedPackage+=[aadl2::AadlPackage|PNAME]
		public Assignment getImportedPackageAssignment_2_1() { return cImportedPackageAssignment_2_1; }

		//[aadl2::AadlPackage|PNAME]
		public CrossReference getImportedPackageAadlPackageCrossReference_2_1_0() { return cImportedPackageAadlPackageCrossReference_2_1_0; }

		//PNAME
		public RuleCall getImportedPackageAadlPackagePNAMEParserRuleCall_2_1_0_1() { return cImportedPackageAadlPackagePNAMEParserRuleCall_2_1_0_1; }

		//(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_2_0() { return cCOMMATerminalRuleCall_2_2_0; }

		//importedPackage+=[aadl2::AadlPackage|PNAME]
		public Assignment getImportedPackageAssignment_2_2_1() { return cImportedPackageAssignment_2_2_1; }

		//[aadl2::AadlPackage|PNAME]
		public CrossReference getImportedPackageAadlPackageCrossReference_2_2_1_0() { return cImportedPackageAadlPackageCrossReference_2_2_1_0; }

		//PNAME
		public RuleCall getImportedPackageAadlPackagePNAMEParserRuleCall_2_2_1_0_1() { return cImportedPackageAadlPackagePNAMEParserRuleCall_2_2_1_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_2_3() { return cSEMITerminalRuleCall_2_3; }

		//(ownedSystemType+=SystemType | ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType |
		//ownedDataType+=DataType)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedSystemType+=SystemType
		public Assignment getOwnedSystemTypeAssignment_3_0() { return cOwnedSystemTypeAssignment_3_0; }

		//SystemType
		public RuleCall getOwnedSystemTypeSystemTypeParserRuleCall_3_0_0() { return cOwnedSystemTypeSystemTypeParserRuleCall_3_0_0; }

		//ownedSystemImplementation+=SystemImplementation
		public Assignment getOwnedSystemImplementationAssignment_3_1() { return cOwnedSystemImplementationAssignment_3_1; }

		//SystemImplementation
		public RuleCall getOwnedSystemImplementationSystemImplementationParserRuleCall_3_1_0() { return cOwnedSystemImplementationSystemImplementationParserRuleCall_3_1_0; }

		//ownedProcessorType+=ProcessorType
		public Assignment getOwnedProcessorTypeAssignment_3_2() { return cOwnedProcessorTypeAssignment_3_2; }

		//ProcessorType
		public RuleCall getOwnedProcessorTypeProcessorTypeParserRuleCall_3_2_0() { return cOwnedProcessorTypeProcessorTypeParserRuleCall_3_2_0; }

		//ownedDataType+=DataType
		public Assignment getOwnedDataTypeAssignment_3_3() { return cOwnedDataTypeAssignment_3_3; }

		//DataType
		public RuleCall getOwnedDataTypeDataTypeParserRuleCall_3_3_0() { return cOwnedDataTypeDataTypeParserRuleCall_3_3_0; }
	}

	public class TypeExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtendedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExtendedComponentTypeCrossReference_1_0 = (CrossReference)cExtendedAssignment_1.eContents().get(0);
		private final RuleCall cExtendedComponentTypeQCREFParserRuleCall_1_0_1 = (RuleCall)cExtendedComponentTypeCrossReference_1_0.eContents().get(1);
		
		////Classifier returns aadl2::Classifier:
		////	ComponentClassifier | FeatureGroupType;
		////
		////ComponentClassifier returns aadl2::ComponentClassifier:
		////	SystemClassifier | DataClassifier|ProcessorClassifier|ProcessClassifier|ThreadClassifier;
		//TypeExtension returns aadl2::TypeExtension:
		//	"extends" extended=[aadl2::ComponentType|QCREF];
		public ParserRule getRule() { return rule; }

		//"extends" extended=[aadl2::ComponentType|QCREF]
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//extended=[aadl2::ComponentType|QCREF]
		public Assignment getExtendedAssignment_1() { return cExtendedAssignment_1; }

		//[aadl2::ComponentType|QCREF]
		public CrossReference getExtendedComponentTypeCrossReference_1_0() { return cExtendedComponentTypeCrossReference_1_0; }

		//QCREF
		public RuleCall getExtendedComponentTypeQCREFParserRuleCall_1_0_1() { return cExtendedComponentTypeQCREFParserRuleCall_1_0_1; }
	}

	public class ImplementationExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementationExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtendedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExtendedComponentImplementationCrossReference_1_0 = (CrossReference)cExtendedAssignment_1.eContents().get(0);
		private final RuleCall cExtendedComponentImplementationQCREFParserRuleCall_1_0_1 = (RuleCall)cExtendedComponentImplementationCrossReference_1_0.eContents().get(1);
		
		//ImplementationExtension returns aadl2::ImplementationExtension:
		//	"extends" extended=[aadl2::ComponentImplementation|QCREF];
		public ParserRule getRule() { return rule; }

		//"extends" extended=[aadl2::ComponentImplementation|QCREF]
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//extended=[aadl2::ComponentImplementation|QCREF]
		public Assignment getExtendedAssignment_1() { return cExtendedAssignment_1; }

		//[aadl2::ComponentImplementation|QCREF]
		public CrossReference getExtendedComponentImplementationCrossReference_1_0() { return cExtendedComponentImplementationCrossReference_1_0; }

		//QCREF
		public RuleCall getExtendedComponentImplementationQCREFParserRuleCall_1_0_1() { return cExtendedComponentImplementationQCREFParserRuleCall_1_0_1; }
	}

	public class FlowSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFlowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKindFlowKindEnumRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		private final Assignment cInFeatureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInFeatureFeatureCrossReference_4_0 = (CrossReference)cInFeatureAssignment_4.eContents().get(0);
		private final RuleCall cInFeatureFeatureIDTerminalRuleCall_4_0_1 = (RuleCall)cInFeatureFeatureCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOutFeatureAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cOutFeatureFeatureCrossReference_5_1_0 = (CrossReference)cOutFeatureAssignment_5_1.eContents().get(0);
		private final RuleCall cOutFeatureFeatureIDTerminalRuleCall_5_1_0_1 = (RuleCall)cOutFeatureFeatureCrossReference_5_1_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//FlowSpecification returns aadl2::FlowSpecification:
		//	name=ID COLON "flow" kind=FlowKind inFeature=[aadl2::Feature] ("->" outFeature=[aadl2::Feature])? SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "flow" kind=FlowKind inFeature=[aadl2::Feature] ("->" outFeature=[aadl2::Feature])? SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"flow"
		public Keyword getFlowKeyword_2() { return cFlowKeyword_2; }

		//kind=FlowKind
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }

		//FlowKind
		public RuleCall getKindFlowKindEnumRuleCall_3_0() { return cKindFlowKindEnumRuleCall_3_0; }

		//inFeature=[aadl2::Feature]
		public Assignment getInFeatureAssignment_4() { return cInFeatureAssignment_4; }

		//[aadl2::Feature]
		public CrossReference getInFeatureFeatureCrossReference_4_0() { return cInFeatureFeatureCrossReference_4_0; }

		//ID
		public RuleCall getInFeatureFeatureIDTerminalRuleCall_4_0_1() { return cInFeatureFeatureIDTerminalRuleCall_4_0_1; }

		//(=> "->" outFeature=[aadl2::Feature])?
		public Group getGroup_5() { return cGroup_5; }

		//=> "->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//outFeature=[aadl2::Feature]
		public Assignment getOutFeatureAssignment_5_1() { return cOutFeatureAssignment_5_1; }

		//[aadl2::Feature]
		public CrossReference getOutFeatureFeatureCrossReference_5_1_0() { return cOutFeatureFeatureCrossReference_5_1_0; }

		//ID
		public RuleCall getOutFeatureFeatureIDTerminalRuleCall_5_1_0_1() { return cOutFeatureFeatureIDTerminalRuleCall_5_1_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_6() { return cSEMITerminalRuleCall_6; }
	}

	public class ModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInitialAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInitialInitialKeyword_2_0 = (Keyword)cInitialAssignment_2.eContents().get(0);
		private final Keyword cModeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSEMITerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Mode returns aadl2::Mode:
		//	name=ID COLON initial?="initial"? "mode" SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON initial?="initial"? "mode" SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//initial?="initial"?
		public Assignment getInitialAssignment_2() { return cInitialAssignment_2; }

		//"initial"
		public Keyword getInitialInitialKeyword_2_0() { return cInitialInitialKeyword_2_0; }

		//"mode"
		public Keyword getModeKeyword_3() { return cModeKeyword_3; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_4() { return cSEMITerminalRuleCall_4; }
	}

	public class ModeTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModeTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceModeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceModeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceModeCrossReference_1_0.eContents().get(1);
		private final RuleCall cLTRANSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOwnedTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedTriggerTriggerPortParserRuleCall_3_0 = (RuleCall)cOwnedTriggerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cOwnedTriggerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedTriggerTriggerPortParserRuleCall_4_1_0 = (RuleCall)cOwnedTriggerAssignment_4_1.eContents().get(0);
		private final RuleCall cRTRANSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cDestinationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDestinationModeCrossReference_6_0 = (CrossReference)cDestinationAssignment_6.eContents().get(0);
		private final RuleCall cDestinationModeIDTerminalRuleCall_6_0_1 = (RuleCall)cDestinationModeCrossReference_6_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//ModeTransition returns aadl2::ModeTransition:
		//	(name=ID COLON)? source=[aadl2::Mode] LTRANS ownedTrigger+=TriggerPort (COMMA ownedTrigger+=TriggerPort)* RTRANS
		//	destination=[aadl2::Mode] SEMI;
		public ParserRule getRule() { return rule; }

		//(name=ID COLON)? source=[aadl2::Mode] LTRANS ownedTrigger+=TriggerPort (COMMA ownedTrigger+=TriggerPort)* RTRANS
		//destination=[aadl2::Mode] SEMI
		public Group getGroup() { return cGroup; }

		//(name=ID COLON)?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_1() { return cCOLONTerminalRuleCall_0_1; }

		//source=[aadl2::Mode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//[aadl2::Mode]
		public CrossReference getSourceModeCrossReference_1_0() { return cSourceModeCrossReference_1_0; }

		//ID
		public RuleCall getSourceModeIDTerminalRuleCall_1_0_1() { return cSourceModeIDTerminalRuleCall_1_0_1; }

		//LTRANS
		public RuleCall getLTRANSTerminalRuleCall_2() { return cLTRANSTerminalRuleCall_2; }

		//ownedTrigger+=TriggerPort
		public Assignment getOwnedTriggerAssignment_3() { return cOwnedTriggerAssignment_3; }

		//TriggerPort
		public RuleCall getOwnedTriggerTriggerPortParserRuleCall_3_0() { return cOwnedTriggerTriggerPortParserRuleCall_3_0; }

		//(COMMA ownedTrigger+=TriggerPort)*
		public Group getGroup_4() { return cGroup_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }

		//ownedTrigger+=TriggerPort
		public Assignment getOwnedTriggerAssignment_4_1() { return cOwnedTriggerAssignment_4_1; }

		//TriggerPort
		public RuleCall getOwnedTriggerTriggerPortParserRuleCall_4_1_0() { return cOwnedTriggerTriggerPortParserRuleCall_4_1_0; }

		//RTRANS
		public RuleCall getRTRANSTerminalRuleCall_5() { return cRTRANSTerminalRuleCall_5; }

		//destination=[aadl2::Mode]
		public Assignment getDestinationAssignment_6() { return cDestinationAssignment_6; }

		//[aadl2::Mode]
		public CrossReference getDestinationModeCrossReference_6_0() { return cDestinationModeCrossReference_6_0; }

		//ID
		public RuleCall getDestinationModeIDTerminalRuleCall_6_0_1() { return cDestinationModeIDTerminalRuleCall_6_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_7() { return cSEMITerminalRuleCall_7; }
	}

	public class TriggerPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerPort");
		private final Assignment cPortAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPortPortCrossReference_0 = (CrossReference)cPortAssignment.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_0_1 = (RuleCall)cPortPortCrossReference_0.eContents().get(1);
		
		//TriggerPort returns aadl2::TriggerPort:
		//	port=[aadl2::Port];
		public ParserRule getRule() { return rule; }

		//port=[aadl2::Port]
		public Assignment getPortAssignment() { return cPortAssignment; }

		//[aadl2::Port]
		public CrossReference getPortPortCrossReference_0() { return cPortPortCrossReference_0; }

		//ID
		public RuleCall getPortPortIDTerminalRuleCall_0_1() { return cPortPortIDTerminalRuleCall_0_1; }
	}

	public class ComponentCategoryKWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentCategoryKW");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDataKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDeviceKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMemoryKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cProcessKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cProcessorKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cSubprogramKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cGroupKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cSystemKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cThreadKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cGroupKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cThreadKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cVirtualKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cBusKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cVirtualKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cProcessorKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		
		////enum ComponentCategory returns aadl2::ComponentCategory:
		////	abstract='abstract' | bus='bus' | data='data'
		////	| device='device' | memory='memory' | process='process' | processor='processor'
		////	| subprogramGroup='subprogram group' | system='system' | threadGroup='thread group'
		////	| thread='thread' | virtualBus='virtual bus' | virtualProcessor='virtual processor';
		//ComponentCategoryKW returns aadl2::ComponentCategory:
		//	"abstract" | "bus" | "data" | "device" | "memory" | "process" | "processor" | "subprogram" "group" | "system" |
		//	"thread" "group" | "thread" | "virtual" "bus" | "virtual" "processor";
		public ParserRule getRule() { return rule; }

		//"abstract" | "bus" | "data" | "device" | "memory" | "process" | "processor" | "subprogram" "group" | "system" | "thread"
		//"group" | "thread" | "virtual" "bus" | "virtual" "processor"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"abstract"
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"bus"
		public Keyword getBusKeyword_1() { return cBusKeyword_1; }

		//"data"
		public Keyword getDataKeyword_2() { return cDataKeyword_2; }

		//"device"
		public Keyword getDeviceKeyword_3() { return cDeviceKeyword_3; }

		//"memory"
		public Keyword getMemoryKeyword_4() { return cMemoryKeyword_4; }

		//"process"
		public Keyword getProcessKeyword_5() { return cProcessKeyword_5; }

		//"processor"
		public Keyword getProcessorKeyword_6() { return cProcessorKeyword_6; }

		//"subprogram" "group"
		public Group getGroup_7() { return cGroup_7; }

		//"subprogram"
		public Keyword getSubprogramKeyword_7_0() { return cSubprogramKeyword_7_0; }

		//"group"
		public Keyword getGroupKeyword_7_1() { return cGroupKeyword_7_1; }

		//"system"
		public Keyword getSystemKeyword_8() { return cSystemKeyword_8; }

		//"thread" "group"
		public Group getGroup_9() { return cGroup_9; }

		//"thread"
		public Keyword getThreadKeyword_9_0() { return cThreadKeyword_9_0; }

		//"group"
		public Keyword getGroupKeyword_9_1() { return cGroupKeyword_9_1; }

		//"thread"
		public Keyword getThreadKeyword_10() { return cThreadKeyword_10; }

		//"virtual" "bus"
		public Group getGroup_11() { return cGroup_11; }

		//"virtual"
		public Keyword getVirtualKeyword_11_0() { return cVirtualKeyword_11_0; }

		//"bus"
		public Keyword getBusKeyword_11_1() { return cBusKeyword_11_1; }

		//"virtual" "processor"
		public Group getGroup_12() { return cGroup_12; }

		//"virtual"
		public Keyword getVirtualKeyword_12_0() { return cVirtualKeyword_12_0; }

		//"processor"
		public Keyword getProcessorKeyword_12_1() { return cProcessorKeyword_12_1; }
	}

	public class SystemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPrototypesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cNoPrototypesAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cNoPrototypesNONETerminalRuleCall_2_1_0_0 = (RuleCall)cNoPrototypesAssignment_2_1_0.eContents().get(0);
		private final Assignment cOwnedPrototypeAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cOwnedPrototypePrototypeParserRuleCall_2_1_1_0 = (RuleCall)cOwnedPrototypeAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFeaturesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cNoFeaturesAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cNoFeaturesNONETerminalRuleCall_3_1_0_0 = (RuleCall)cNoFeaturesAssignment_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cAlternatives_3_1.eContents().get(1);
		private final Assignment cOwnedDataPortAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cOwnedDataPortDataPortParserRuleCall_3_1_1_0_0 = (RuleCall)cOwnedDataPortAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cOwnedEventPortAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cOwnedEventPortEventPortParserRuleCall_3_1_1_1_0 = (RuleCall)cOwnedEventPortAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cOwnedEventDataPortAssignment_3_1_1_2 = (Assignment)cAlternatives_3_1_1.eContents().get(2);
		private final RuleCall cOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0 = (RuleCall)cOwnedEventDataPortAssignment_3_1_1_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFlowsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cOwnedFlowSpecificationAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0 = (RuleCall)cOwnedFlowSpecificationAssignment_4_1_0.eContents().get(0);
		private final Assignment cNoFlowsAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cNoFlowsNONETerminalRuleCall_4_1_1_0 = (RuleCall)cNoFlowsAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cModesKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_0_1 = (Alternatives)cGroup_5_0.eContents().get(1);
		private final Assignment cOwnedModeAssignment_5_0_1_0 = (Assignment)cAlternatives_5_0_1.eContents().get(0);
		private final RuleCall cOwnedModeModeParserRuleCall_5_0_1_0_0 = (RuleCall)cOwnedModeAssignment_5_0_1_0.eContents().get(0);
		private final Assignment cOwnedModeTransitionAssignment_5_0_1_1 = (Assignment)cAlternatives_5_0_1.eContents().get(1);
		private final RuleCall cOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0 = (RuleCall)cOwnedModeTransitionAssignment_5_0_1_1.eContents().get(0);
		private final Assignment cNoModesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cNoModesNONETerminalRuleCall_5_1_0 = (RuleCall)cNoModesAssignment_5_1.eContents().get(0);
		private final Assignment cOwnedAnnexSubclauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0 = (RuleCall)cOwnedAnnexSubclauseAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cIDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cSEMITerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//SystemType returns aadl2::SystemType:
		//	"system" name=ID //	(ownedExtension=TypeExtension)?
		//	//	(=> 'extends' extends=[aadl2::SystemType|QCREF])?
		//	("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
		//	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort | FeatureGroup))+))? //| FeatureGroup
		//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		//	//	((ownedMode+=Mode)+))?
		//	| noModes?=NONE)? //	(=> 'properties'
		//	//	((ownedPropertyAssociation+=PropertyAssociation)+
		//	//	| noProperties?=NONE))?
		//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
		public ParserRule getRule() { return rule; }

		//"system" name=ID //	(ownedExtension=TypeExtension)?
		////	(=> 'extends' extends=[aadl2::SystemType|QCREF])?
		//("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
		//(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort | FeatureGroup))+))? //| FeatureGroup
		//("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)? //	(=> 'properties'
		////	((ownedPropertyAssociation+=PropertyAssociation)+
		////	| noProperties?=NONE))?
		//ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(=> "prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))?
		public Group getGroup_2() { return cGroup_2; }

		//=> "prototypes"
		public Keyword getPrototypesKeyword_2_0() { return cPrototypesKeyword_2_0; }

		//noPrototypes?=NONE | ownedPrototype+=Prototype+
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//noPrototypes?=NONE
		public Assignment getNoPrototypesAssignment_2_1_0() { return cNoPrototypesAssignment_2_1_0; }

		//NONE
		public RuleCall getNoPrototypesNONETerminalRuleCall_2_1_0_0() { return cNoPrototypesNONETerminalRuleCall_2_1_0_0; }

		//ownedPrototype+=Prototype+
		public Assignment getOwnedPrototypeAssignment_2_1_1() { return cOwnedPrototypeAssignment_2_1_1; }

		//Prototype
		public RuleCall getOwnedPrototypePrototypeParserRuleCall_2_1_1_0() { return cOwnedPrototypePrototypeParserRuleCall_2_1_1_0; }

		//(=> "features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
		//ownedEventDataPort+=EventDataPort)+))?
		public Group getGroup_3() { return cGroup_3; }

		//=> "features"
		public Keyword getFeaturesKeyword_3_0() { return cFeaturesKeyword_3_0; }

		//noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//noFeatures?=NONE
		public Assignment getNoFeaturesAssignment_3_1_0() { return cNoFeaturesAssignment_3_1_0; }

		//NONE
		public RuleCall getNoFeaturesNONETerminalRuleCall_3_1_0_0() { return cNoFeaturesNONETerminalRuleCall_3_1_0_0; }

		//(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//ownedDataPort+=DataPort
		public Assignment getOwnedDataPortAssignment_3_1_1_0() { return cOwnedDataPortAssignment_3_1_1_0; }

		//DataPort
		public RuleCall getOwnedDataPortDataPortParserRuleCall_3_1_1_0_0() { return cOwnedDataPortDataPortParserRuleCall_3_1_1_0_0; }

		//ownedEventPort+=EventPort
		public Assignment getOwnedEventPortAssignment_3_1_1_1() { return cOwnedEventPortAssignment_3_1_1_1; }

		//EventPort
		public RuleCall getOwnedEventPortEventPortParserRuleCall_3_1_1_1_0() { return cOwnedEventPortEventPortParserRuleCall_3_1_1_1_0; }

		//ownedEventDataPort+=EventDataPort
		public Assignment getOwnedEventDataPortAssignment_3_1_1_2() { return cOwnedEventDataPortAssignment_3_1_1_2; }

		//EventDataPort
		public RuleCall getOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0() { return cOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0; }

		//(=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
		public Group getGroup_4() { return cGroup_4; }

		//=> "flows"
		public Keyword getFlowsKeyword_4_0() { return cFlowsKeyword_4_0; }

		//ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//ownedFlowSpecification+=FlowSpecification+
		public Assignment getOwnedFlowSpecificationAssignment_4_1_0() { return cOwnedFlowSpecificationAssignment_4_1_0; }

		//FlowSpecification
		public RuleCall getOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0() { return cOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0; }

		//noFlows?=NONE
		public Assignment getNoFlowsAssignment_4_1_1() { return cNoFlowsAssignment_4_1_1; }

		//NONE
		public RuleCall getNoFlowsNONETerminalRuleCall_4_1_1_0() { return cNoFlowsNONETerminalRuleCall_4_1_1_0; }

		//(=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Group getGroup_5_0() { return cGroup_5_0; }

		//=> "modes"
		public Keyword getModesKeyword_5_0_0() { return cModesKeyword_5_0_0; }

		//(ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Alternatives getAlternatives_5_0_1() { return cAlternatives_5_0_1; }

		//ownedMode+=Mode
		public Assignment getOwnedModeAssignment_5_0_1_0() { return cOwnedModeAssignment_5_0_1_0; }

		//Mode
		public RuleCall getOwnedModeModeParserRuleCall_5_0_1_0_0() { return cOwnedModeModeParserRuleCall_5_0_1_0_0; }

		//ownedModeTransition+=ModeTransition
		public Assignment getOwnedModeTransitionAssignment_5_0_1_1() { return cOwnedModeTransitionAssignment_5_0_1_1; }

		//ModeTransition
		public RuleCall getOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0() { return cOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0; }

		//noModes?=NONE
		public Assignment getNoModesAssignment_5_1() { return cNoModesAssignment_5_1; }

		//NONE
		public RuleCall getNoModesNONETerminalRuleCall_5_1_0() { return cNoModesNONETerminalRuleCall_5_1_0; }

		//ownedAnnexSubclause+=AnnexSubclause*
		public Assignment getOwnedAnnexSubclauseAssignment_6() { return cOwnedAnnexSubclauseAssignment_6; }

		//AnnexSubclause
		public RuleCall getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0() { return cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }

		//ID
		public RuleCall getIDTerminalRuleCall_8() { return cIDTerminalRuleCall_8; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_9() { return cSEMITerminalRuleCall_9; }
	}

	public class ProcessTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPrototypesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cNoPrototypesAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cNoPrototypesNONETerminalRuleCall_2_1_0_0 = (RuleCall)cNoPrototypesAssignment_2_1_0.eContents().get(0);
		private final Assignment cOwnedPrototypeAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cOwnedPrototypePrototypeParserRuleCall_2_1_1_0 = (RuleCall)cOwnedPrototypeAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFeaturesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cNoFeaturesAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cNoFeaturesNONETerminalRuleCall_3_1_0_0 = (RuleCall)cNoFeaturesAssignment_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cAlternatives_3_1.eContents().get(1);
		private final Assignment cOwnedDataPortAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cOwnedDataPortDataPortParserRuleCall_3_1_1_0_0 = (RuleCall)cOwnedDataPortAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cOwnedEventPortAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cOwnedEventPortEventPortParserRuleCall_3_1_1_1_0 = (RuleCall)cOwnedEventPortAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cOwnedEventDataPortAssignment_3_1_1_2 = (Assignment)cAlternatives_3_1_1.eContents().get(2);
		private final RuleCall cOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0 = (RuleCall)cOwnedEventDataPortAssignment_3_1_1_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFlowsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cOwnedFlowSpecificationAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0 = (RuleCall)cOwnedFlowSpecificationAssignment_4_1_0.eContents().get(0);
		private final Assignment cNoFlowsAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cNoFlowsNONETerminalRuleCall_4_1_1_0 = (RuleCall)cNoFlowsAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cModesKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_0_1 = (Alternatives)cGroup_5_0.eContents().get(1);
		private final Assignment cOwnedModeAssignment_5_0_1_0 = (Assignment)cAlternatives_5_0_1.eContents().get(0);
		private final RuleCall cOwnedModeModeParserRuleCall_5_0_1_0_0 = (RuleCall)cOwnedModeAssignment_5_0_1_0.eContents().get(0);
		private final Assignment cOwnedModeTransitionAssignment_5_0_1_1 = (Assignment)cAlternatives_5_0_1.eContents().get(1);
		private final RuleCall cOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0 = (RuleCall)cOwnedModeTransitionAssignment_5_0_1_1.eContents().get(0);
		private final Assignment cNoModesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cNoModesNONETerminalRuleCall_5_1_0 = (RuleCall)cNoModesAssignment_5_1.eContents().get(0);
		private final Assignment cOwnedAnnexSubclauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0 = (RuleCall)cOwnedAnnexSubclauseAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cIDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cSEMITerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//ProcessType returns aadl2::ProcessType:
		//	"process" name=ID //	(ownedExtension=TypeExtension)?
		//	//	(=> 'extends' extends=[aadl2::ProcessType|QCREF])?
		//	("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
		//	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
		//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		//	//	((ownedMode+=Mode)+))?
		//	| noModes?=NONE)? //	(=> 'properties'
		//	//	((ownedPropertyAssociation+=PropertyAssociation)+
		//	//	| noProperties?=NONE))?
		//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
		public ParserRule getRule() { return rule; }

		//"process" name=ID //	(ownedExtension=TypeExtension)?
		////	(=> 'extends' extends=[aadl2::ProcessType|QCREF])?
		//("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
		//(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
		//("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)? //	(=> 'properties'
		////	((ownedPropertyAssociation+=PropertyAssociation)+
		////	| noProperties?=NONE))?
		//ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
		public Group getGroup() { return cGroup; }

		//"process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(=> "prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))?
		public Group getGroup_2() { return cGroup_2; }

		//=> "prototypes"
		public Keyword getPrototypesKeyword_2_0() { return cPrototypesKeyword_2_0; }

		//noPrototypes?=NONE | ownedPrototype+=Prototype+
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//noPrototypes?=NONE
		public Assignment getNoPrototypesAssignment_2_1_0() { return cNoPrototypesAssignment_2_1_0; }

		//NONE
		public RuleCall getNoPrototypesNONETerminalRuleCall_2_1_0_0() { return cNoPrototypesNONETerminalRuleCall_2_1_0_0; }

		//ownedPrototype+=Prototype+
		public Assignment getOwnedPrototypeAssignment_2_1_1() { return cOwnedPrototypeAssignment_2_1_1; }

		//Prototype
		public RuleCall getOwnedPrototypePrototypeParserRuleCall_2_1_1_0() { return cOwnedPrototypePrototypeParserRuleCall_2_1_1_0; }

		//(=> "features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
		//ownedEventDataPort+=EventDataPort)+))?
		public Group getGroup_3() { return cGroup_3; }

		//=> "features"
		public Keyword getFeaturesKeyword_3_0() { return cFeaturesKeyword_3_0; }

		//noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//noFeatures?=NONE
		public Assignment getNoFeaturesAssignment_3_1_0() { return cNoFeaturesAssignment_3_1_0; }

		//NONE
		public RuleCall getNoFeaturesNONETerminalRuleCall_3_1_0_0() { return cNoFeaturesNONETerminalRuleCall_3_1_0_0; }

		//(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//ownedDataPort+=DataPort
		public Assignment getOwnedDataPortAssignment_3_1_1_0() { return cOwnedDataPortAssignment_3_1_1_0; }

		//DataPort
		public RuleCall getOwnedDataPortDataPortParserRuleCall_3_1_1_0_0() { return cOwnedDataPortDataPortParserRuleCall_3_1_1_0_0; }

		//ownedEventPort+=EventPort
		public Assignment getOwnedEventPortAssignment_3_1_1_1() { return cOwnedEventPortAssignment_3_1_1_1; }

		//EventPort
		public RuleCall getOwnedEventPortEventPortParserRuleCall_3_1_1_1_0() { return cOwnedEventPortEventPortParserRuleCall_3_1_1_1_0; }

		//ownedEventDataPort+=EventDataPort
		public Assignment getOwnedEventDataPortAssignment_3_1_1_2() { return cOwnedEventDataPortAssignment_3_1_1_2; }

		//EventDataPort
		public RuleCall getOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0() { return cOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0; }

		//(=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
		public Group getGroup_4() { return cGroup_4; }

		//=> "flows"
		public Keyword getFlowsKeyword_4_0() { return cFlowsKeyword_4_0; }

		//ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//ownedFlowSpecification+=FlowSpecification+
		public Assignment getOwnedFlowSpecificationAssignment_4_1_0() { return cOwnedFlowSpecificationAssignment_4_1_0; }

		//FlowSpecification
		public RuleCall getOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0() { return cOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0; }

		//noFlows?=NONE
		public Assignment getNoFlowsAssignment_4_1_1() { return cNoFlowsAssignment_4_1_1; }

		//NONE
		public RuleCall getNoFlowsNONETerminalRuleCall_4_1_1_0() { return cNoFlowsNONETerminalRuleCall_4_1_1_0; }

		//(=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Group getGroup_5_0() { return cGroup_5_0; }

		//=> "modes"
		public Keyword getModesKeyword_5_0_0() { return cModesKeyword_5_0_0; }

		//(ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Alternatives getAlternatives_5_0_1() { return cAlternatives_5_0_1; }

		//ownedMode+=Mode
		public Assignment getOwnedModeAssignment_5_0_1_0() { return cOwnedModeAssignment_5_0_1_0; }

		//Mode
		public RuleCall getOwnedModeModeParserRuleCall_5_0_1_0_0() { return cOwnedModeModeParserRuleCall_5_0_1_0_0; }

		//ownedModeTransition+=ModeTransition
		public Assignment getOwnedModeTransitionAssignment_5_0_1_1() { return cOwnedModeTransitionAssignment_5_0_1_1; }

		//ModeTransition
		public RuleCall getOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0() { return cOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0; }

		//noModes?=NONE
		public Assignment getNoModesAssignment_5_1() { return cNoModesAssignment_5_1; }

		//NONE
		public RuleCall getNoModesNONETerminalRuleCall_5_1_0() { return cNoModesNONETerminalRuleCall_5_1_0; }

		//ownedAnnexSubclause+=AnnexSubclause*
		public Assignment getOwnedAnnexSubclauseAssignment_6() { return cOwnedAnnexSubclauseAssignment_6; }

		//AnnexSubclause
		public RuleCall getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0() { return cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }

		//ID
		public RuleCall getIDTerminalRuleCall_8() { return cIDTerminalRuleCall_8; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_9() { return cSEMITerminalRuleCall_9; }
	}

	public class ThreadTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThreadType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThreadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPrototypesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cNoPrototypesAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cNoPrototypesNONETerminalRuleCall_2_1_0_0 = (RuleCall)cNoPrototypesAssignment_2_1_0.eContents().get(0);
		private final Assignment cOwnedPrototypeAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cOwnedPrototypePrototypeParserRuleCall_2_1_1_0 = (RuleCall)cOwnedPrototypeAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFeaturesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cNoFeaturesAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cNoFeaturesNONETerminalRuleCall_3_1_0_0 = (RuleCall)cNoFeaturesAssignment_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cAlternatives_3_1.eContents().get(1);
		private final Assignment cOwnedDataPortAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cOwnedDataPortDataPortParserRuleCall_3_1_1_0_0 = (RuleCall)cOwnedDataPortAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cOwnedEventPortAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cOwnedEventPortEventPortParserRuleCall_3_1_1_1_0 = (RuleCall)cOwnedEventPortAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cOwnedEventDataPortAssignment_3_1_1_2 = (Assignment)cAlternatives_3_1_1.eContents().get(2);
		private final RuleCall cOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0 = (RuleCall)cOwnedEventDataPortAssignment_3_1_1_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFlowsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cOwnedFlowSpecificationAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0 = (RuleCall)cOwnedFlowSpecificationAssignment_4_1_0.eContents().get(0);
		private final Assignment cNoFlowsAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cNoFlowsNONETerminalRuleCall_4_1_1_0 = (RuleCall)cNoFlowsAssignment_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cModesKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_0_1 = (Alternatives)cGroup_5_0.eContents().get(1);
		private final Assignment cOwnedModeAssignment_5_0_1_0 = (Assignment)cAlternatives_5_0_1.eContents().get(0);
		private final RuleCall cOwnedModeModeParserRuleCall_5_0_1_0_0 = (RuleCall)cOwnedModeAssignment_5_0_1_0.eContents().get(0);
		private final Assignment cOwnedModeTransitionAssignment_5_0_1_1 = (Assignment)cAlternatives_5_0_1.eContents().get(1);
		private final RuleCall cOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0 = (RuleCall)cOwnedModeTransitionAssignment_5_0_1_1.eContents().get(0);
		private final Assignment cNoModesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cNoModesNONETerminalRuleCall_5_1_0 = (RuleCall)cNoModesAssignment_5_1.eContents().get(0);
		private final Assignment cOwnedAnnexSubclauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0 = (RuleCall)cOwnedAnnexSubclauseAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cIDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cSEMITerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//ThreadType returns aadl2::ThreadType:
		//	"thread" name=ID //	(ownedExtension=TypeExtension)?
		//	//	(=> 'extends' extends=[aadl2::ThreadType|QCREF])?
		//	("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
		//	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
		//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		//	//	((ownedMode+=Mode)+))?
		//	| noModes?=NONE)? //	(=> 'properties'
		//	//	((ownedPropertyAssociation+=PropertyAssociation)+
		//	//	| noProperties?=NONE))?
		//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
		public ParserRule getRule() { return rule; }

		//"thread" name=ID //	(ownedExtension=TypeExtension)?
		////	(=> 'extends' extends=[aadl2::ThreadType|QCREF])?
		//("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
		//(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
		//("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)? //	(=> 'properties'
		////	((ownedPropertyAssociation+=PropertyAssociation)+
		////	| noProperties?=NONE))?
		//ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
		public Group getGroup() { return cGroup; }

		//"thread"
		public Keyword getThreadKeyword_0() { return cThreadKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(=> "prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))?
		public Group getGroup_2() { return cGroup_2; }

		//=> "prototypes"
		public Keyword getPrototypesKeyword_2_0() { return cPrototypesKeyword_2_0; }

		//noPrototypes?=NONE | ownedPrototype+=Prototype+
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//noPrototypes?=NONE
		public Assignment getNoPrototypesAssignment_2_1_0() { return cNoPrototypesAssignment_2_1_0; }

		//NONE
		public RuleCall getNoPrototypesNONETerminalRuleCall_2_1_0_0() { return cNoPrototypesNONETerminalRuleCall_2_1_0_0; }

		//ownedPrototype+=Prototype+
		public Assignment getOwnedPrototypeAssignment_2_1_1() { return cOwnedPrototypeAssignment_2_1_1; }

		//Prototype
		public RuleCall getOwnedPrototypePrototypeParserRuleCall_2_1_1_0() { return cOwnedPrototypePrototypeParserRuleCall_2_1_1_0; }

		//(=> "features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
		//ownedEventDataPort+=EventDataPort)+))?
		public Group getGroup_3() { return cGroup_3; }

		//=> "features"
		public Keyword getFeaturesKeyword_3_0() { return cFeaturesKeyword_3_0; }

		//noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//noFeatures?=NONE
		public Assignment getNoFeaturesAssignment_3_1_0() { return cNoFeaturesAssignment_3_1_0; }

		//NONE
		public RuleCall getNoFeaturesNONETerminalRuleCall_3_1_0_0() { return cNoFeaturesNONETerminalRuleCall_3_1_0_0; }

		//(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//ownedDataPort+=DataPort
		public Assignment getOwnedDataPortAssignment_3_1_1_0() { return cOwnedDataPortAssignment_3_1_1_0; }

		//DataPort
		public RuleCall getOwnedDataPortDataPortParserRuleCall_3_1_1_0_0() { return cOwnedDataPortDataPortParserRuleCall_3_1_1_0_0; }

		//ownedEventPort+=EventPort
		public Assignment getOwnedEventPortAssignment_3_1_1_1() { return cOwnedEventPortAssignment_3_1_1_1; }

		//EventPort
		public RuleCall getOwnedEventPortEventPortParserRuleCall_3_1_1_1_0() { return cOwnedEventPortEventPortParserRuleCall_3_1_1_1_0; }

		//ownedEventDataPort+=EventDataPort
		public Assignment getOwnedEventDataPortAssignment_3_1_1_2() { return cOwnedEventDataPortAssignment_3_1_1_2; }

		//EventDataPort
		public RuleCall getOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0() { return cOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0; }

		//(=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
		public Group getGroup_4() { return cGroup_4; }

		//=> "flows"
		public Keyword getFlowsKeyword_4_0() { return cFlowsKeyword_4_0; }

		//ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//ownedFlowSpecification+=FlowSpecification+
		public Assignment getOwnedFlowSpecificationAssignment_4_1_0() { return cOwnedFlowSpecificationAssignment_4_1_0; }

		//FlowSpecification
		public RuleCall getOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0() { return cOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0; }

		//noFlows?=NONE
		public Assignment getNoFlowsAssignment_4_1_1() { return cNoFlowsAssignment_4_1_1; }

		//NONE
		public RuleCall getNoFlowsNONETerminalRuleCall_4_1_1_0() { return cNoFlowsNONETerminalRuleCall_4_1_1_0; }

		//(=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Group getGroup_5_0() { return cGroup_5_0; }

		//=> "modes"
		public Keyword getModesKeyword_5_0_0() { return cModesKeyword_5_0_0; }

		//(ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Alternatives getAlternatives_5_0_1() { return cAlternatives_5_0_1; }

		//ownedMode+=Mode
		public Assignment getOwnedModeAssignment_5_0_1_0() { return cOwnedModeAssignment_5_0_1_0; }

		//Mode
		public RuleCall getOwnedModeModeParserRuleCall_5_0_1_0_0() { return cOwnedModeModeParserRuleCall_5_0_1_0_0; }

		//ownedModeTransition+=ModeTransition
		public Assignment getOwnedModeTransitionAssignment_5_0_1_1() { return cOwnedModeTransitionAssignment_5_0_1_1; }

		//ModeTransition
		public RuleCall getOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0() { return cOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0; }

		//noModes?=NONE
		public Assignment getNoModesAssignment_5_1() { return cNoModesAssignment_5_1; }

		//NONE
		public RuleCall getNoModesNONETerminalRuleCall_5_1_0() { return cNoModesNONETerminalRuleCall_5_1_0; }

		//ownedAnnexSubclause+=AnnexSubclause*
		public Assignment getOwnedAnnexSubclauseAssignment_6() { return cOwnedAnnexSubclauseAssignment_6; }

		//AnnexSubclause
		public RuleCall getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0() { return cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }

		//ID
		public RuleCall getIDTerminalRuleCall_8() { return cIDTerminalRuleCall_8; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_9() { return cSEMITerminalRuleCall_9; }
	}

	public class ProcessorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFeaturesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cNoFeaturesAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cNoFeaturesNONETerminalRuleCall_2_1_0_0 = (RuleCall)cNoFeaturesAssignment_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cAlternatives_2_1.eContents().get(1);
		private final Assignment cOwnedDataPortAssignment_2_1_1_0 = (Assignment)cAlternatives_2_1_1.eContents().get(0);
		private final RuleCall cOwnedDataPortDataPortParserRuleCall_2_1_1_0_0 = (RuleCall)cOwnedDataPortAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cOwnedEventPortAssignment_2_1_1_1 = (Assignment)cAlternatives_2_1_1.eContents().get(1);
		private final RuleCall cOwnedEventPortEventPortParserRuleCall_2_1_1_1_0 = (RuleCall)cOwnedEventPortAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cOwnedEventDataPortAssignment_2_1_1_2 = (Assignment)cAlternatives_2_1_1.eContents().get(2);
		private final RuleCall cOwnedEventDataPortEventDataPortParserRuleCall_2_1_1_2_0 = (RuleCall)cOwnedEventDataPortAssignment_2_1_1_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFlowsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cOwnedFlowSpecificationAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cOwnedFlowSpecificationFlowSpecificationParserRuleCall_3_1_0_0 = (RuleCall)cOwnedFlowSpecificationAssignment_3_1_0.eContents().get(0);
		private final Assignment cNoFlowsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cNoFlowsNONETerminalRuleCall_3_1_1_0 = (RuleCall)cNoFlowsAssignment_3_1_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cModesKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Assignment cOwnedModeAssignment_4_0_1_0 = (Assignment)cAlternatives_4_0_1.eContents().get(0);
		private final RuleCall cOwnedModeModeParserRuleCall_4_0_1_0_0 = (RuleCall)cOwnedModeAssignment_4_0_1_0.eContents().get(0);
		private final Assignment cOwnedModeTransitionAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final RuleCall cOwnedModeTransitionModeTransitionParserRuleCall_4_0_1_1_0 = (RuleCall)cOwnedModeTransitionAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cNoModesAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cNoModesNONETerminalRuleCall_4_1_0 = (RuleCall)cNoModesAssignment_4_1.eContents().get(0);
		private final Assignment cOwnedAnnexSubclauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0 = (RuleCall)cOwnedAnnexSubclauseAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cIDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cSEMITerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//ProcessorType returns aadl2::ProcessorType:
		//	"processor" name=ID //	(=> 'extends' extends=[aadl2::ProcessorType|QCREF])?
		//	//	(ownedExtension=TypeExtension)?
		//	("features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
		//	ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
		//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		//	//	((ownedMode+=Mode)+))?
		//	| noModes?=NONE)? //	(=> 'properties'
		//	//	((ownedPropertyAssociation+=PropertyAssociation)+
		//	//	| noProperties?=NONE))?
		//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
		public ParserRule getRule() { return rule; }

		//"processor" name=ID //	(=> 'extends' extends=[aadl2::ProcessorType|QCREF])?
		////	(ownedExtension=TypeExtension)?
		//("features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
		//ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
		//("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)? //	(=> 'properties'
		////	((ownedPropertyAssociation+=PropertyAssociation)+
		////	| noProperties?=NONE))?
		//ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
		public Group getGroup() { return cGroup; }

		//"processor"
		public Keyword getProcessorKeyword_0() { return cProcessorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(=> "features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
		//ownedEventDataPort+=EventDataPort)+))?
		public Group getGroup_2() { return cGroup_2; }

		//=> "features"
		public Keyword getFeaturesKeyword_2_0() { return cFeaturesKeyword_2_0; }

		//noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//noFeatures?=NONE
		public Assignment getNoFeaturesAssignment_2_1_0() { return cNoFeaturesAssignment_2_1_0; }

		//NONE
		public RuleCall getNoFeaturesNONETerminalRuleCall_2_1_0_0() { return cNoFeaturesNONETerminalRuleCall_2_1_0_0; }

		//(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }

		//ownedDataPort+=DataPort
		public Assignment getOwnedDataPortAssignment_2_1_1_0() { return cOwnedDataPortAssignment_2_1_1_0; }

		//DataPort
		public RuleCall getOwnedDataPortDataPortParserRuleCall_2_1_1_0_0() { return cOwnedDataPortDataPortParserRuleCall_2_1_1_0_0; }

		//ownedEventPort+=EventPort
		public Assignment getOwnedEventPortAssignment_2_1_1_1() { return cOwnedEventPortAssignment_2_1_1_1; }

		//EventPort
		public RuleCall getOwnedEventPortEventPortParserRuleCall_2_1_1_1_0() { return cOwnedEventPortEventPortParserRuleCall_2_1_1_1_0; }

		//ownedEventDataPort+=EventDataPort
		public Assignment getOwnedEventDataPortAssignment_2_1_1_2() { return cOwnedEventDataPortAssignment_2_1_1_2; }

		//EventDataPort
		public RuleCall getOwnedEventDataPortEventDataPortParserRuleCall_2_1_1_2_0() { return cOwnedEventDataPortEventDataPortParserRuleCall_2_1_1_2_0; }

		//(=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
		public Group getGroup_3() { return cGroup_3; }

		//=> "flows"
		public Keyword getFlowsKeyword_3_0() { return cFlowsKeyword_3_0; }

		//ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//ownedFlowSpecification+=FlowSpecification+
		public Assignment getOwnedFlowSpecificationAssignment_3_1_0() { return cOwnedFlowSpecificationAssignment_3_1_0; }

		//FlowSpecification
		public RuleCall getOwnedFlowSpecificationFlowSpecificationParserRuleCall_3_1_0_0() { return cOwnedFlowSpecificationFlowSpecificationParserRuleCall_3_1_0_0; }

		//noFlows?=NONE
		public Assignment getNoFlowsAssignment_3_1_1() { return cNoFlowsAssignment_3_1_1; }

		//NONE
		public RuleCall getNoFlowsNONETerminalRuleCall_3_1_1_0() { return cNoFlowsNONETerminalRuleCall_3_1_1_0; }

		//(=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Group getGroup_4_0() { return cGroup_4_0; }

		//=> "modes"
		public Keyword getModesKeyword_4_0_0() { return cModesKeyword_4_0_0; }

		//(ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }

		//ownedMode+=Mode
		public Assignment getOwnedModeAssignment_4_0_1_0() { return cOwnedModeAssignment_4_0_1_0; }

		//Mode
		public RuleCall getOwnedModeModeParserRuleCall_4_0_1_0_0() { return cOwnedModeModeParserRuleCall_4_0_1_0_0; }

		//ownedModeTransition+=ModeTransition
		public Assignment getOwnedModeTransitionAssignment_4_0_1_1() { return cOwnedModeTransitionAssignment_4_0_1_1; }

		//ModeTransition
		public RuleCall getOwnedModeTransitionModeTransitionParserRuleCall_4_0_1_1_0() { return cOwnedModeTransitionModeTransitionParserRuleCall_4_0_1_1_0; }

		//noModes?=NONE
		public Assignment getNoModesAssignment_4_1() { return cNoModesAssignment_4_1; }

		//NONE
		public RuleCall getNoModesNONETerminalRuleCall_4_1_0() { return cNoModesNONETerminalRuleCall_4_1_0; }

		//ownedAnnexSubclause+=AnnexSubclause*
		public Assignment getOwnedAnnexSubclauseAssignment_5() { return cOwnedAnnexSubclauseAssignment_5; }

		//AnnexSubclause
		public RuleCall getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0() { return cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//ID
		public RuleCall getIDTerminalRuleCall_7() { return cIDTerminalRuleCall_7; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_8() { return cSEMITerminalRuleCall_8; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFeaturesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNoFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNoFeaturesNONETerminalRuleCall_2_1_0 = (RuleCall)cNoFeaturesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFlowsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cOwnedFlowSpecificationAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cOwnedFlowSpecificationFlowSpecificationParserRuleCall_3_1_0_0 = (RuleCall)cOwnedFlowSpecificationAssignment_3_1_0.eContents().get(0);
		private final Assignment cNoFlowsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cNoFlowsNONETerminalRuleCall_3_1_1_0 = (RuleCall)cNoFlowsAssignment_3_1_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cModesKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Assignment cOwnedModeAssignment_4_0_1_0 = (Assignment)cAlternatives_4_0_1.eContents().get(0);
		private final RuleCall cOwnedModeModeParserRuleCall_4_0_1_0_0 = (RuleCall)cOwnedModeAssignment_4_0_1_0.eContents().get(0);
		private final Assignment cOwnedModeTransitionAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final RuleCall cOwnedModeTransitionModeTransitionParserRuleCall_4_0_1_1_0 = (RuleCall)cOwnedModeTransitionAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cNoModesAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cNoModesNONETerminalRuleCall_4_1_0 = (RuleCall)cNoModesAssignment_4_1.eContents().get(0);
		private final Assignment cOwnedAnnexSubclauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0 = (RuleCall)cOwnedAnnexSubclauseAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cIDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cSEMITerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//DataType returns aadl2::DataType:
		//	"data" name=ID //	(=> 'extends' extends=[aadl2::DataType|QCREF])?
		//	//	(ownedExtension=TypeExtension)?
		//	("features" noFeatures?=NONE)? //	| (ownedDataPort+=DataPort| ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+ )
		//	//	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
		//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		//	//	((ownedMode+=Mode)+))?
		//	| noModes?=NONE)? //	(=> 'properties'
		//	//	((ownedPropertyAssociation+=PropertyAssociation)+
		//	//	| noProperties?=NONE))?
		//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
		public ParserRule getRule() { return rule; }

		//"data" name=ID //	(=> 'extends' extends=[aadl2::DataType|QCREF])?
		////	(ownedExtension=TypeExtension)?
		//("features" noFeatures?=NONE)? //	| (ownedDataPort+=DataPort| ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+ )
		////	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
		//("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
		//ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)? //	(=> 'properties'
		////	((ownedPropertyAssociation+=PropertyAssociation)+
		////	| noProperties?=NONE))?
		//ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(=> "features" noFeatures?=NONE)?
		public Group getGroup_2() { return cGroup_2; }

		//=> "features"
		public Keyword getFeaturesKeyword_2_0() { return cFeaturesKeyword_2_0; }

		//noFeatures?=NONE
		public Assignment getNoFeaturesAssignment_2_1() { return cNoFeaturesAssignment_2_1; }

		//NONE
		public RuleCall getNoFeaturesNONETerminalRuleCall_2_1_0() { return cNoFeaturesNONETerminalRuleCall_2_1_0; }

		//(=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
		public Group getGroup_3() { return cGroup_3; }

		//=> "flows"
		public Keyword getFlowsKeyword_3_0() { return cFlowsKeyword_3_0; }

		//ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//ownedFlowSpecification+=FlowSpecification+
		public Assignment getOwnedFlowSpecificationAssignment_3_1_0() { return cOwnedFlowSpecificationAssignment_3_1_0; }

		//FlowSpecification
		public RuleCall getOwnedFlowSpecificationFlowSpecificationParserRuleCall_3_1_0_0() { return cOwnedFlowSpecificationFlowSpecificationParserRuleCall_3_1_0_0; }

		//noFlows?=NONE
		public Assignment getNoFlowsAssignment_3_1_1() { return cNoFlowsAssignment_3_1_1; }

		//NONE
		public RuleCall getNoFlowsNONETerminalRuleCall_3_1_1_0() { return cNoFlowsNONETerminalRuleCall_3_1_1_0; }

		//(=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
		////	((ownedMode+=Mode)+))?
		//| noModes?=NONE)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Group getGroup_4_0() { return cGroup_4_0; }

		//=> "modes"
		public Keyword getModesKeyword_4_0_0() { return cModesKeyword_4_0_0; }

		//(ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }

		//ownedMode+=Mode
		public Assignment getOwnedModeAssignment_4_0_1_0() { return cOwnedModeAssignment_4_0_1_0; }

		//Mode
		public RuleCall getOwnedModeModeParserRuleCall_4_0_1_0_0() { return cOwnedModeModeParserRuleCall_4_0_1_0_0; }

		//ownedModeTransition+=ModeTransition
		public Assignment getOwnedModeTransitionAssignment_4_0_1_1() { return cOwnedModeTransitionAssignment_4_0_1_1; }

		//ModeTransition
		public RuleCall getOwnedModeTransitionModeTransitionParserRuleCall_4_0_1_1_0() { return cOwnedModeTransitionModeTransitionParserRuleCall_4_0_1_1_0; }

		//noModes?=NONE
		public Assignment getNoModesAssignment_4_1() { return cNoModesAssignment_4_1; }

		//NONE
		public RuleCall getNoModesNONETerminalRuleCall_4_1_0() { return cNoModesNONETerminalRuleCall_4_1_0; }

		//ownedAnnexSubclause+=AnnexSubclause*
		public Assignment getOwnedAnnexSubclauseAssignment_5() { return cOwnedAnnexSubclauseAssignment_5; }

		//AnnexSubclause
		public RuleCall getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0() { return cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//ID
		public RuleCall getIDTerminalRuleCall_7() { return cIDTerminalRuleCall_7; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_8() { return cSEMITerminalRuleCall_8; }
	}

	public class SystemImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemImplementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cImplementationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSubcomponentsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0 = (Alternatives)cAlternatives_2_1.eContents().get(0);
		private final Assignment cOwnedSystemSubcomponentAssignment_2_1_0_0 = (Assignment)cAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cOwnedSystemSubcomponentSystemSubcomponentParserRuleCall_2_1_0_0_0 = (RuleCall)cOwnedSystemSubcomponentAssignment_2_1_0_0.eContents().get(0);
		private final Assignment cOwnedProcessorSubcomponentAssignment_2_1_0_1 = (Assignment)cAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cOwnedProcessorSubcomponentProcessorSubcomponentParserRuleCall_2_1_0_1_0 = (RuleCall)cOwnedProcessorSubcomponentAssignment_2_1_0_1.eContents().get(0);
		private final Assignment cOwnedDataSubcomponentAssignment_2_1_0_2 = (Assignment)cAlternatives_2_1_0.eContents().get(2);
		private final RuleCall cOwnedDataSubcomponentDataSubcomponentParserRuleCall_2_1_0_2_0 = (RuleCall)cOwnedDataSubcomponentAssignment_2_1_0_2.eContents().get(0);
		private final Assignment cNoSubcomponentsAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cNoSubcomponentsNONETerminalRuleCall_2_1_1_0 = (RuleCall)cNoSubcomponentsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConnectionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cOwnedPortConnectionAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cOwnedPortConnectionPortConnectionParserRuleCall_3_1_0_0 = (RuleCall)cOwnedPortConnectionAssignment_3_1_0.eContents().get(0);
		private final Assignment cNoConnectionsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cNoConnectionsNONETerminalRuleCall_3_1_1_0 = (RuleCall)cNoConnectionsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFlowsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNoFlowsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNoFlowsNONETerminalRuleCall_4_1_0 = (RuleCall)cNoFlowsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cModesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_1_0 = (Alternatives)cAlternatives_5_1.eContents().get(0);
		private final Assignment cOwnedModeAssignment_5_1_0_0 = (Assignment)cAlternatives_5_1_0.eContents().get(0);
		private final RuleCall cOwnedModeModeParserRuleCall_5_1_0_0_0 = (RuleCall)cOwnedModeAssignment_5_1_0_0.eContents().get(0);
		private final Assignment cOwnedModeTransitionAssignment_5_1_0_1 = (Assignment)cAlternatives_5_1_0.eContents().get(1);
		private final RuleCall cOwnedModeTransitionModeTransitionParserRuleCall_5_1_0_1_0 = (RuleCall)cOwnedModeTransitionAssignment_5_1_0_1.eContents().get(0);
		private final Assignment cNoModesAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cNoModesNONETerminalRuleCall_5_1_1_0 = (RuleCall)cNoModesAssignment_5_1_1.eContents().get(0);
		private final Assignment cOwnedAnnexSubclauseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0 = (RuleCall)cOwnedAnnexSubclauseAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cIDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cDOTTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cINAMEParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cSEMITerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		////ComponentImplementation :
		////	SystemImplementation | DataImplementation 
		////;
		//SystemImplementation returns aadl2::SystemImplementation: //	{aadl2::SystemImplementation}
		//	"system" "implementation" //	ownedRealization=Realization DOT name=INAME
		//	//	(ownedExtension=ImplementationExtension)?
		//	//	implemented=[aadl2::ComponentType|ID] DOT name=INAME
		//	//	(=> 'extends' extends=[aadl2::SystemImplementation|QCREF])?
		//	("subcomponents" ((ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
		//	ownedDataSubcomponent+=DataSubcomponent)+ // ownedSubcomponent instaed of each subclass
		//	//	((ownedSubcomponent+=Subcomponent )+
		//	| noSubcomponents?=NONE))? ("connections" (ownedPortConnection+=PortConnection+ | noConnections?=NONE))? ("flows"
		//	noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE))? //	(=> 'properties'
		//	//	((ownedPropertyAssociation+=PropertyAssociation)+
		//	//	| noProperties?=NONE))?
		//	ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI;
		public ParserRule getRule() { return rule; }

		////	{aadl2::SystemImplementation}
		//"system" "implementation" //	ownedRealization=Realization DOT name=INAME
		////	(ownedExtension=ImplementationExtension)?
		////	implemented=[aadl2::ComponentType|ID] DOT name=INAME
		////	(=> 'extends' extends=[aadl2::SystemImplementation|QCREF])?
		//("subcomponents" ((ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
		//ownedDataSubcomponent+=DataSubcomponent)+ // ownedSubcomponent instaed of each subclass
		////	((ownedSubcomponent+=Subcomponent )+
		//| noSubcomponents?=NONE))? ("connections" (ownedPortConnection+=PortConnection+ | noConnections?=NONE))? ("flows"
		//noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE))? //	(=> 'properties'
		////	((ownedPropertyAssociation+=PropertyAssociation)+
		////	| noProperties?=NONE))?
		//ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI
		public Group getGroup() { return cGroup; }

		////	{aadl2::SystemImplementation}
		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//"implementation"
		public Keyword getImplementationKeyword_1() { return cImplementationKeyword_1; }

		//(=> "subcomponents" ((ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
		//ownedDataSubcomponent+=DataSubcomponent)+ // ownedSubcomponent instaed of each subclass
		////	((ownedSubcomponent+=Subcomponent )+
		//| noSubcomponents?=NONE))?
		public Group getGroup_2() { return cGroup_2; }

		//=> "subcomponents"
		public Keyword getSubcomponentsKeyword_2_0() { return cSubcomponentsKeyword_2_0; }

		//(ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
		//ownedDataSubcomponent+=DataSubcomponent)+ // ownedSubcomponent instaed of each subclass
		////	((ownedSubcomponent+=Subcomponent )+
		//| noSubcomponents?=NONE
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//(ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
		//ownedDataSubcomponent+=DataSubcomponent)+
		public Alternatives getAlternatives_2_1_0() { return cAlternatives_2_1_0; }

		//ownedSystemSubcomponent+=SystemSubcomponent
		public Assignment getOwnedSystemSubcomponentAssignment_2_1_0_0() { return cOwnedSystemSubcomponentAssignment_2_1_0_0; }

		//SystemSubcomponent
		public RuleCall getOwnedSystemSubcomponentSystemSubcomponentParserRuleCall_2_1_0_0_0() { return cOwnedSystemSubcomponentSystemSubcomponentParserRuleCall_2_1_0_0_0; }

		//ownedProcessorSubcomponent+=ProcessorSubcomponent
		public Assignment getOwnedProcessorSubcomponentAssignment_2_1_0_1() { return cOwnedProcessorSubcomponentAssignment_2_1_0_1; }

		//ProcessorSubcomponent
		public RuleCall getOwnedProcessorSubcomponentProcessorSubcomponentParserRuleCall_2_1_0_1_0() { return cOwnedProcessorSubcomponentProcessorSubcomponentParserRuleCall_2_1_0_1_0; }

		//ownedDataSubcomponent+=DataSubcomponent
		public Assignment getOwnedDataSubcomponentAssignment_2_1_0_2() { return cOwnedDataSubcomponentAssignment_2_1_0_2; }

		//DataSubcomponent
		public RuleCall getOwnedDataSubcomponentDataSubcomponentParserRuleCall_2_1_0_2_0() { return cOwnedDataSubcomponentDataSubcomponentParserRuleCall_2_1_0_2_0; }

		//noSubcomponents?=NONE
		public Assignment getNoSubcomponentsAssignment_2_1_1() { return cNoSubcomponentsAssignment_2_1_1; }

		//NONE
		public RuleCall getNoSubcomponentsNONETerminalRuleCall_2_1_1_0() { return cNoSubcomponentsNONETerminalRuleCall_2_1_1_0; }

		//(=> "connections" (ownedPortConnection+=PortConnection+ | noConnections?=NONE))?
		public Group getGroup_3() { return cGroup_3; }

		//=> "connections"
		public Keyword getConnectionsKeyword_3_0() { return cConnectionsKeyword_3_0; }

		//ownedPortConnection+=PortConnection+ | noConnections?=NONE
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//ownedPortConnection+=PortConnection+
		public Assignment getOwnedPortConnectionAssignment_3_1_0() { return cOwnedPortConnectionAssignment_3_1_0; }

		//PortConnection
		public RuleCall getOwnedPortConnectionPortConnectionParserRuleCall_3_1_0_0() { return cOwnedPortConnectionPortConnectionParserRuleCall_3_1_0_0; }

		//noConnections?=NONE
		public Assignment getNoConnectionsAssignment_3_1_1() { return cNoConnectionsAssignment_3_1_1; }

		//NONE
		public RuleCall getNoConnectionsNONETerminalRuleCall_3_1_1_0() { return cNoConnectionsNONETerminalRuleCall_3_1_1_0; }

		//(=> "flows" noFlows?=NONE)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "flows"
		public Keyword getFlowsKeyword_4_0() { return cFlowsKeyword_4_0; }

		//noFlows?=NONE
		public Assignment getNoFlowsAssignment_4_1() { return cNoFlowsAssignment_4_1; }

		//NONE
		public RuleCall getNoFlowsNONETerminalRuleCall_4_1_0() { return cNoFlowsNONETerminalRuleCall_4_1_0; }

		//(=> "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE))?
		public Group getGroup_5() { return cGroup_5; }

		//=> "modes"
		public Keyword getModesKeyword_5_0() { return cModesKeyword_5_0; }

		//(ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//(ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Alternatives getAlternatives_5_1_0() { return cAlternatives_5_1_0; }

		//ownedMode+=Mode
		public Assignment getOwnedModeAssignment_5_1_0_0() { return cOwnedModeAssignment_5_1_0_0; }

		//Mode
		public RuleCall getOwnedModeModeParserRuleCall_5_1_0_0_0() { return cOwnedModeModeParserRuleCall_5_1_0_0_0; }

		//ownedModeTransition+=ModeTransition
		public Assignment getOwnedModeTransitionAssignment_5_1_0_1() { return cOwnedModeTransitionAssignment_5_1_0_1; }

		//ModeTransition
		public RuleCall getOwnedModeTransitionModeTransitionParserRuleCall_5_1_0_1_0() { return cOwnedModeTransitionModeTransitionParserRuleCall_5_1_0_1_0; }

		//noModes?=NONE
		public Assignment getNoModesAssignment_5_1_1() { return cNoModesAssignment_5_1_1; }

		//NONE
		public RuleCall getNoModesNONETerminalRuleCall_5_1_1_0() { return cNoModesNONETerminalRuleCall_5_1_1_0; }

		//ownedAnnexSubclause+=AnnexSubclause*
		public Assignment getOwnedAnnexSubclauseAssignment_6() { return cOwnedAnnexSubclauseAssignment_6; }

		//AnnexSubclause
		public RuleCall getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0() { return cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }

		//ID
		public RuleCall getIDTerminalRuleCall_8() { return cIDTerminalRuleCall_8; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_9() { return cDOTTerminalRuleCall_9; }

		//INAME
		public RuleCall getINAMEParserRuleCall_10() { return cINAMEParserRuleCall_10; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_11() { return cSEMITerminalRuleCall_11; }
	}

	public class DataImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataImplementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cImplementationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSubcomponentsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cOwnedDataSubcomponentAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cOwnedDataSubcomponentDataSubcomponentParserRuleCall_2_1_0_0 = (RuleCall)cOwnedDataSubcomponentAssignment_2_1_0.eContents().get(0);
		private final Assignment cNoSubcomponentsAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cNoSubcomponentsNONETerminalRuleCall_2_1_1_0 = (RuleCall)cNoSubcomponentsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFlowsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNoFlowsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNoFlowsNONETerminalRuleCall_3_1_0 = (RuleCall)cNoFlowsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cModesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_4_1_0 = (Alternatives)cAlternatives_4_1.eContents().get(0);
		private final Assignment cOwnedModeAssignment_4_1_0_0 = (Assignment)cAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cOwnedModeModeParserRuleCall_4_1_0_0_0 = (RuleCall)cOwnedModeAssignment_4_1_0_0.eContents().get(0);
		private final Assignment cOwnedModeTransitionAssignment_4_1_0_1 = (Assignment)cAlternatives_4_1_0.eContents().get(1);
		private final RuleCall cOwnedModeTransitionModeTransitionParserRuleCall_4_1_0_1_0 = (RuleCall)cOwnedModeTransitionAssignment_4_1_0_1.eContents().get(0);
		private final Assignment cNoModesAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cNoModesNONETerminalRuleCall_4_1_1_0 = (RuleCall)cNoModesAssignment_4_1_1.eContents().get(0);
		private final Assignment cOwnedAnnexSubclauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0 = (RuleCall)cOwnedAnnexSubclauseAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cIDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cDOTTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cINAMEParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cSEMITerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//DataImplementation returns aadl2::DataImplementation:
		//	"data" "implementation" //	implemented=[aadl2::DataType|ID] DOT name=INAME
		//	//	(=> 'extends' extends=[aadl2::DataImplementation|QCREF])?
		//	//	ownedRealization=Realization DOT name=INAME
		//	//	(ownedExtension=ImplementationExtension)?
		//	("subcomponents" (ownedDataSubcomponent+=DataSubcomponent //	((ownedSubcomponent+=Subcomponent )+
		//	| noSubcomponents?=NONE))? ("flows" noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		//	| noModes?=NONE))? //	(=> 'properties'
		//	//	((ownedPropertyAssociation+=PropertyAssociation)+
		//	//	| noProperties?=NONE))?
		//	ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI;
		public ParserRule getRule() { return rule; }

		//"data" "implementation" //	implemented=[aadl2::DataType|ID] DOT name=INAME
		////	(=> 'extends' extends=[aadl2::DataImplementation|QCREF])?
		////	ownedRealization=Realization DOT name=INAME
		////	(ownedExtension=ImplementationExtension)?
		//("subcomponents" (ownedDataSubcomponent+=DataSubcomponent //	((ownedSubcomponent+=Subcomponent )+
		//| noSubcomponents?=NONE))? ("flows" noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ |
		//noModes?=NONE))? //	(=> 'properties'
		////	((ownedPropertyAssociation+=PropertyAssociation)+
		////	| noProperties?=NONE))?
		//ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//"implementation"
		public Keyword getImplementationKeyword_1() { return cImplementationKeyword_1; }

		//(=> "subcomponents" (ownedDataSubcomponent+=DataSubcomponent //	((ownedSubcomponent+=Subcomponent )+
		//| noSubcomponents?=NONE))?
		public Group getGroup_2() { return cGroup_2; }

		//=> "subcomponents"
		public Keyword getSubcomponentsKeyword_2_0() { return cSubcomponentsKeyword_2_0; }

		//ownedDataSubcomponent+=DataSubcomponent //	((ownedSubcomponent+=Subcomponent )+
		//| noSubcomponents?=NONE
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//ownedDataSubcomponent+=DataSubcomponent
		public Assignment getOwnedDataSubcomponentAssignment_2_1_0() { return cOwnedDataSubcomponentAssignment_2_1_0; }

		//DataSubcomponent
		public RuleCall getOwnedDataSubcomponentDataSubcomponentParserRuleCall_2_1_0_0() { return cOwnedDataSubcomponentDataSubcomponentParserRuleCall_2_1_0_0; }

		//noSubcomponents?=NONE
		public Assignment getNoSubcomponentsAssignment_2_1_1() { return cNoSubcomponentsAssignment_2_1_1; }

		//NONE
		public RuleCall getNoSubcomponentsNONETerminalRuleCall_2_1_1_0() { return cNoSubcomponentsNONETerminalRuleCall_2_1_1_0; }

		//(=> "flows" noFlows?=NONE)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "flows"
		public Keyword getFlowsKeyword_3_0() { return cFlowsKeyword_3_0; }

		//noFlows?=NONE
		public Assignment getNoFlowsAssignment_3_1() { return cNoFlowsAssignment_3_1; }

		//NONE
		public RuleCall getNoFlowsNONETerminalRuleCall_3_1_0() { return cNoFlowsNONETerminalRuleCall_3_1_0; }

		//(=> "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE))?
		public Group getGroup_4() { return cGroup_4; }

		//=> "modes"
		public Keyword getModesKeyword_4_0() { return cModesKeyword_4_0; }

		//(ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//(ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
		public Alternatives getAlternatives_4_1_0() { return cAlternatives_4_1_0; }

		//ownedMode+=Mode
		public Assignment getOwnedModeAssignment_4_1_0_0() { return cOwnedModeAssignment_4_1_0_0; }

		//Mode
		public RuleCall getOwnedModeModeParserRuleCall_4_1_0_0_0() { return cOwnedModeModeParserRuleCall_4_1_0_0_0; }

		//ownedModeTransition+=ModeTransition
		public Assignment getOwnedModeTransitionAssignment_4_1_0_1() { return cOwnedModeTransitionAssignment_4_1_0_1; }

		//ModeTransition
		public RuleCall getOwnedModeTransitionModeTransitionParserRuleCall_4_1_0_1_0() { return cOwnedModeTransitionModeTransitionParserRuleCall_4_1_0_1_0; }

		//noModes?=NONE
		public Assignment getNoModesAssignment_4_1_1() { return cNoModesAssignment_4_1_1; }

		//NONE
		public RuleCall getNoModesNONETerminalRuleCall_4_1_1_0() { return cNoModesNONETerminalRuleCall_4_1_1_0; }

		//ownedAnnexSubclause+=AnnexSubclause*
		public Assignment getOwnedAnnexSubclauseAssignment_5() { return cOwnedAnnexSubclauseAssignment_5; }

		//AnnexSubclause
		public RuleCall getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0() { return cOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//ID
		public RuleCall getIDTerminalRuleCall_7() { return cIDTerminalRuleCall_7; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_8() { return cDOTTerminalRuleCall_8; }

		//INAME
		public RuleCall getINAMEParserRuleCall_9() { return cINAMEParserRuleCall_9; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_10() { return cSEMITerminalRuleCall_10; }
	}

	public class RealizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Realization");
		private final Assignment cImplementedAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cImplementedSystemTypeCrossReference_0 = (CrossReference)cImplementedAssignment.eContents().get(0);
		private final RuleCall cImplementedSystemTypeIDTerminalRuleCall_0_1 = (RuleCall)cImplementedSystemTypeCrossReference_0.eContents().get(1);
		
		//Realization returns aadl2::Realization:
		//	implemented=[aadl2::SystemType];
		public ParserRule getRule() { return rule; }

		//implemented=[aadl2::SystemType]
		public Assignment getImplementedAssignment() { return cImplementedAssignment; }

		//[aadl2::SystemType]
		public CrossReference getImplementedSystemTypeCrossReference_0() { return cImplementedSystemTypeCrossReference_0; }

		//ID
		public RuleCall getImplementedSystemTypeIDTerminalRuleCall_0_1() { return cImplementedSystemTypeIDTerminalRuleCall_0_1; }
	}

	public class PrototypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prototype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentPrototypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureGroupPrototypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeaturePrototypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Prototype returns aadl2::Prototype:
		//	ComponentPrototype | FeatureGroupPrototype | FeaturePrototype;
		public ParserRule getRule() { return rule; }

		//ComponentPrototype | FeatureGroupPrototype | FeaturePrototype
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentPrototype
		public RuleCall getComponentPrototypeParserRuleCall_0() { return cComponentPrototypeParserRuleCall_0; }

		//FeatureGroupPrototype
		public RuleCall getFeatureGroupPrototypeParserRuleCall_1() { return cFeatureGroupPrototypeParserRuleCall_1; }

		//FeaturePrototype
		public RuleCall getFeaturePrototypeParserRuleCall_2() { return cFeaturePrototypeParserRuleCall_2; }
	}

	public class ComponentPrototypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentPrototype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cCategoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCategoryComponentCategoryKWParserRuleCall_2_0 = (RuleCall)cCategoryAssignment_2.eContents().get(0);
		private final Assignment cConstrainingClassifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cConstrainingClassifierComponentClassifierCrossReference_3_0 = (CrossReference)cConstrainingClassifierAssignment_3.eContents().get(0);
		private final RuleCall cConstrainingClassifierComponentClassifierQCREFParserRuleCall_3_0_1 = (RuleCall)cConstrainingClassifierComponentClassifierCrossReference_3_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ComponentPrototype returns aadl2::ComponentPrototype:
		//	name=ID COLON category=ComponentCategoryKW constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
		//	SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON category=ComponentCategoryKW constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
		//SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//category=ComponentCategoryKW
		public Assignment getCategoryAssignment_2() { return cCategoryAssignment_2; }

		//ComponentCategoryKW
		public RuleCall getCategoryComponentCategoryKWParserRuleCall_2_0() { return cCategoryComponentCategoryKWParserRuleCall_2_0; }

		//constrainingClassifier=[aadl2::ComponentClassifier|QCREF]?
		public Assignment getConstrainingClassifierAssignment_3() { return cConstrainingClassifierAssignment_3; }

		//[aadl2::ComponentClassifier|QCREF]
		public CrossReference getConstrainingClassifierComponentClassifierCrossReference_3_0() { return cConstrainingClassifierComponentClassifierCrossReference_3_0; }

		//QCREF
		public RuleCall getConstrainingClassifierComponentClassifierQCREFParserRuleCall_3_0_1() { return cConstrainingClassifierComponentClassifierQCREFParserRuleCall_3_0_1; }

		////	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
		//SEMI
		public RuleCall getSEMITerminalRuleCall_4() { return cSEMITerminalRuleCall_4; }
	}

	public class FeatureGroupPrototypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureGroupPrototype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFeatureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGroupKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConstrainingFeatureGroupTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cConstrainingFeatureGroupTypeFeatureGroupTypeCrossReference_4_0 = (CrossReference)cConstrainingFeatureGroupTypeAssignment_4.eContents().get(0);
		private final RuleCall cConstrainingFeatureGroupTypeFeatureGroupTypeQCREFParserRuleCall_4_0_1 = (RuleCall)cConstrainingFeatureGroupTypeFeatureGroupTypeCrossReference_4_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//FeatureGroupPrototype returns aadl2::FeatureGroupPrototype:
		//	name=ID COLON "feature" "group" constrainingFeatureGroupType=[aadl2::FeatureGroupType|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
		//	SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "feature" "group" constrainingFeatureGroupType=[aadl2::FeatureGroupType|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
		//SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"feature"
		public Keyword getFeatureKeyword_2() { return cFeatureKeyword_2; }

		//"group"
		public Keyword getGroupKeyword_3() { return cGroupKeyword_3; }

		//constrainingFeatureGroupType=[aadl2::FeatureGroupType|QCREF]?
		public Assignment getConstrainingFeatureGroupTypeAssignment_4() { return cConstrainingFeatureGroupTypeAssignment_4; }

		//[aadl2::FeatureGroupType|QCREF]
		public CrossReference getConstrainingFeatureGroupTypeFeatureGroupTypeCrossReference_4_0() { return cConstrainingFeatureGroupTypeFeatureGroupTypeCrossReference_4_0; }

		//QCREF
		public RuleCall getConstrainingFeatureGroupTypeFeatureGroupTypeQCREFParserRuleCall_4_0_1() { return cConstrainingFeatureGroupTypeFeatureGroupTypeQCREFParserRuleCall_4_0_1; }

		////	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class FeaturePrototypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeaturePrototype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFeatureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDirectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectionPortDirectionParserRuleCall_3_0 = (RuleCall)cDirectionAssignment_3.eContents().get(0);
		private final Assignment cConstrainingClassifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cConstrainingClassifierComponentClassifierCrossReference_4_0 = (CrossReference)cConstrainingClassifierAssignment_4.eContents().get(0);
		private final RuleCall cConstrainingClassifierComponentClassifierQCREFParserRuleCall_4_0_1 = (RuleCall)cConstrainingClassifierComponentClassifierCrossReference_4_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//FeaturePrototype returns aadl2::FeaturePrototype:
		//	name=ID COLON "feature" direction=PortDirection? // only in or out not inout
		//	//(incoming?='in' | outgoing?='out')?
		//	constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
		//	SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "feature" direction=PortDirection? // only in or out not inout
		////(incoming?='in' | outgoing?='out')?
		//constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
		//SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"feature"
		public Keyword getFeatureKeyword_2() { return cFeatureKeyword_2; }

		//direction=PortDirection?
		public Assignment getDirectionAssignment_3() { return cDirectionAssignment_3; }

		//PortDirection
		public RuleCall getDirectionPortDirectionParserRuleCall_3_0() { return cDirectionPortDirectionParserRuleCall_3_0; }

		//constrainingClassifier=[aadl2::ComponentClassifier|QCREF]?
		public Assignment getConstrainingClassifierAssignment_4() { return cConstrainingClassifierAssignment_4; }

		//[aadl2::ComponentClassifier|QCREF]
		public CrossReference getConstrainingClassifierComponentClassifierCrossReference_4_0() { return cConstrainingClassifierComponentClassifierCrossReference_4_0; }

		//QCREF
		public RuleCall getConstrainingClassifierComponentClassifierQCREFParserRuleCall_4_0_1() { return cConstrainingClassifierComponentClassifierQCREFParserRuleCall_4_0_1; }

		////	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class DataPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionPortDirectionParserRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		private final Keyword cDataKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPortKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDataClassifierAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cDataClassifierDataTypeCrossReference_5_0 = (CrossReference)cDataClassifierAssignment_5.eContents().get(0);
		private final RuleCall cDataClassifierDataTypeQCREFParserRuleCall_5_0_1 = (RuleCall)cDataClassifierDataTypeCrossReference_5_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		////ComponentClassifierOrPrototype returns aadl2::ComponentClassifierOrPrototype:
		////	ComponentClassifier | ComponentPrototype;
		//DataPort returns aadl2::DataPort:
		//	name=ID COLON direction=PortDirection "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON direction=PortDirection "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//direction=PortDirection
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }

		//PortDirection
		public RuleCall getDirectionPortDirectionParserRuleCall_2_0() { return cDirectionPortDirectionParserRuleCall_2_0; }

		//"data"
		public Keyword getDataKeyword_3() { return cDataKeyword_3; }

		//"port"
		public Keyword getPortKeyword_4() { return cPortKeyword_4; }

		//dataClassifier=[aadl2::DataType|QCREF]?
		public Assignment getDataClassifierAssignment_5() { return cDataClassifierAssignment_5; }

		//[aadl2::DataType|QCREF]
		public CrossReference getDataClassifierDataTypeCrossReference_5_0() { return cDataClassifierDataTypeCrossReference_5_0; }

		//QCREF
		public RuleCall getDataClassifierDataTypeQCREFParserRuleCall_5_0_1() { return cDataClassifierDataTypeQCREFParserRuleCall_5_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_6() { return cSEMITerminalRuleCall_6; }
	}

	public class EventDataPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDataPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionPortDirectionParserRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		private final Keyword cEventKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDataKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cPortKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDataClassifierAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDataClassifierDataTypeCrossReference_6_0 = (CrossReference)cDataClassifierAssignment_6.eContents().get(0);
		private final RuleCall cDataClassifierDataTypeQCREFParserRuleCall_6_0_1 = (RuleCall)cDataClassifierDataTypeCrossReference_6_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		////	name=ID COLON ( incoming?=IN)? (outgoing?=OUT)? 'data' 'port' (dataClassifier=[DataType|QCREF])? SEMI ;
		//EventDataPort returns aadl2::EventDataPort:
		//	name=ID COLON direction=PortDirection "event" "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON direction=PortDirection "event" "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//direction=PortDirection
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }

		//PortDirection
		public RuleCall getDirectionPortDirectionParserRuleCall_2_0() { return cDirectionPortDirectionParserRuleCall_2_0; }

		//"event"
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }

		//"data"
		public Keyword getDataKeyword_4() { return cDataKeyword_4; }

		//"port"
		public Keyword getPortKeyword_5() { return cPortKeyword_5; }

		//dataClassifier=[aadl2::DataType|QCREF]?
		public Assignment getDataClassifierAssignment_6() { return cDataClassifierAssignment_6; }

		//[aadl2::DataType|QCREF]
		public CrossReference getDataClassifierDataTypeCrossReference_6_0() { return cDataClassifierDataTypeCrossReference_6_0; }

		//QCREF
		public RuleCall getDataClassifierDataTypeQCREFParserRuleCall_6_0_1() { return cDataClassifierDataTypeQCREFParserRuleCall_6_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_7() { return cSEMITerminalRuleCall_7; }
	}

	public class EventPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionPortDirectionParserRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		private final Keyword cEventKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPortKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////	name=ID COLON ( incoming?=IN)? (outgoing?=OUT)? 'event' 'data' 'port' (dataClassifier=[DataType|QCREF])? SEMI ;
		//EventPort returns aadl2::EventPort:
		//	name=ID COLON direction=PortDirection "event" "port" SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON direction=PortDirection "event" "port" SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//direction=PortDirection
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }

		//PortDirection
		public RuleCall getDirectionPortDirectionParserRuleCall_2_0() { return cDirectionPortDirectionParserRuleCall_2_0; }

		//"event"
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }

		//"port"
		public Keyword getPortKeyword_4() { return cPortKeyword_4; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class FeatureGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFeatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGroupKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureGroupTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFeatureGroupTypeFeatureGroupTypeCrossReference_3_0 = (CrossReference)cFeatureGroupTypeAssignment_3.eContents().get(0);
		private final RuleCall cFeatureGroupTypeFeatureGroupTypeQCREFParserRuleCall_3_0_1 = (RuleCall)cFeatureGroupTypeFeatureGroupTypeCrossReference_3_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////	name=ID COLON ( incoming?=IN |outgoing?=OUT | (incoming?=IN outgoing?=OUT)) 'event' 'port' SEMI ;
		//FeatureGroup returns aadl2::FeatureGroup:
		//	name=ID "feature" "group" featureGroupType=[aadl2::FeatureGroupType|QCREF] SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID "feature" "group" featureGroupType=[aadl2::FeatureGroupType|QCREF] SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"feature"
		public Keyword getFeatureKeyword_1() { return cFeatureKeyword_1; }

		//"group"
		public Keyword getGroupKeyword_2() { return cGroupKeyword_2; }

		//featureGroupType=[aadl2::FeatureGroupType|QCREF]
		public Assignment getFeatureGroupTypeAssignment_3() { return cFeatureGroupTypeAssignment_3; }

		//[aadl2::FeatureGroupType|QCREF]
		public CrossReference getFeatureGroupTypeFeatureGroupTypeCrossReference_3_0() { return cFeatureGroupTypeFeatureGroupTypeCrossReference_3_0; }

		//QCREF
		public RuleCall getFeatureGroupTypeFeatureGroupTypeQCREFParserRuleCall_3_0_1() { return cFeatureGroupTypeFeatureGroupTypeQCREFParserRuleCall_3_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_4() { return cSEMITerminalRuleCall_4; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature returns aadl2::Feature:
		//	Port | FeatureGroup;
		public ParserRule getRule() { return rule; }

		//Port | FeatureGroup
		public Alternatives getAlternatives() { return cAlternatives; }

		//Port
		public RuleCall getPortParserRuleCall_0() { return cPortParserRuleCall_0; }

		//FeatureGroup
		public RuleCall getFeatureGroupParserRuleCall_1() { return cFeatureGroupParserRuleCall_1; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEventDataPortParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Port returns aadl2::Port:
		//	DataPort | EventPort | EventDataPort;
		public ParserRule getRule() { return rule; }

		//DataPort | EventPort | EventDataPort
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataPort
		public RuleCall getDataPortParserRuleCall_0() { return cDataPortParserRuleCall_0; }

		//EventPort
		public RuleCall getEventPortParserRuleCall_1() { return cEventPortParserRuleCall_1; }

		//EventDataPort
		public RuleCall getEventDataPortParserRuleCall_2() { return cEventDataPortParserRuleCall_2; }
	}

	public class PortDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cOutKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		////enum DirectionType returns aadl2::DirectionType: in = 'in'  | out = 'out' | inOut = 'in out';
		//PortDirection returns aadl2::DirectionType:
		//	"in" | "out" | "in" "out";
		public ParserRule getRule() { return rule; }

		//"in" | "out" | "in" "out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//"out"
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }

		//"in" "out"
		public Group getGroup_2() { return cGroup_2; }

		//"in"
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }

		//"out"
		public Keyword getOutKeyword_2_1() { return cOutKeyword_2_1; }
	}

	public class ModeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentModeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParentModeModeCrossReference_0_0 = (CrossReference)cParentModeAssignment_0.eContents().get(0);
		private final RuleCall cParentModeModeIDTerminalRuleCall_0_0_1 = (RuleCall)cParentModeModeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDerivedModeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cDerivedModeModeCrossReference_1_1_0 = (CrossReference)cDerivedModeAssignment_1_1.eContents().get(0);
		private final RuleCall cDerivedModeModeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cDerivedModeModeCrossReference_1_1_0.eContents().get(1);
		
		//ModeRef returns aadl2::ModeBinding:
		//	parentMode=[aadl2::Mode] ("->" derivedMode=[aadl2::Mode])?;
		public ParserRule getRule() { return rule; }

		//parentMode=[aadl2::Mode] ("->" derivedMode=[aadl2::Mode])?
		public Group getGroup() { return cGroup; }

		//parentMode=[aadl2::Mode]
		public Assignment getParentModeAssignment_0() { return cParentModeAssignment_0; }

		//[aadl2::Mode]
		public CrossReference getParentModeModeCrossReference_0_0() { return cParentModeModeCrossReference_0_0; }

		//ID
		public RuleCall getParentModeModeIDTerminalRuleCall_0_0_1() { return cParentModeModeIDTerminalRuleCall_0_0_1; }

		//("->" derivedMode=[aadl2::Mode])?
		public Group getGroup_1() { return cGroup_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }

		//derivedMode=[aadl2::Mode]
		public Assignment getDerivedModeAssignment_1_1() { return cDerivedModeAssignment_1_1; }

		//[aadl2::Mode]
		public CrossReference getDerivedModeModeCrossReference_1_1_0() { return cDerivedModeModeCrossReference_1_1_0; }

		//ID
		public RuleCall getDerivedModeModeIDTerminalRuleCall_1_1_0_1() { return cDerivedModeModeIDTerminalRuleCall_1_1_0_1; }
	}

	public class SystemSubcomponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemSubcomponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSystemKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSystemClassifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSystemClassifierSystemClassifierCrossReference_3_0 = (CrossReference)cSystemClassifierAssignment_3.eContents().get(0);
		private final RuleCall cSystemClassifierSystemClassifierQCREFParserRuleCall_3_0_1 = (RuleCall)cSystemClassifierSystemClassifierCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cModesKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cLPARENSTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Alternatives cAlternatives_4_3 = (Alternatives)cGroup_4.eContents().get(3);
		private final Assignment cModeBindingAssignment_4_3_0 = (Assignment)cAlternatives_4_3.eContents().get(0);
		private final RuleCall cModeBindingModeRefParserRuleCall_4_3_0_0 = (RuleCall)cModeBindingAssignment_4_3_0.eContents().get(0);
		private final Assignment cAllModesAssignment_4_3_1 = (Assignment)cAlternatives_4_3.eContents().get(1);
		private final Keyword cAllModesAllKeyword_4_3_1_0 = (Keyword)cAllModesAssignment_4_3_1.eContents().get(0);
		private final RuleCall cRPARENSTerminalRuleCall_4_4 = (RuleCall)cGroup_4.eContents().get(4);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////SubcomponentForSystem returns Subcomponent:
		////	name=ID COLON category=SystemSubCategories 
		//////	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
		////	 (classifier=[ProcessorClassifier|QCREF])?
		//////	('in' 'modes' LPARENS ((modeBinding+=ModeRef)+ | allModes?='all') RPARENS)?
		////	SEMI;
		//SystemSubcomponent returns aadl2::SystemSubcomponent:
		//	name=ID COLON "system" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
		//	//	(classifier=[ComponentClassifierOrPrototype|QCREF] )?
		//	// Could not disambiguate the following rule
		//	//([SystemClassifier|QCREF]|prototype=[ComponentPrototype|ID])
		//	systemClassifier=[aadl2::SystemClassifier|QCREF] ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
		//	RPARENS)? SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "system" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
		////	(classifier=[ComponentClassifierOrPrototype|QCREF] )?
		//// Could not disambiguate the following rule
		////([SystemClassifier|QCREF]|prototype=[ComponentPrototype|ID])
		//systemClassifier=[aadl2::SystemClassifier|QCREF] ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
		//RPARENS)? SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"system"
		public Keyword getSystemKeyword_2() { return cSystemKeyword_2; }

		////	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
		////	(classifier=[ComponentClassifierOrPrototype|QCREF] )?
		//// Could not disambiguate the following rule
		////([SystemClassifier|QCREF]|prototype=[ComponentPrototype|ID])
		//systemClassifier=[aadl2::SystemClassifier|QCREF]
		public Assignment getSystemClassifierAssignment_3() { return cSystemClassifierAssignment_3; }

		//[aadl2::SystemClassifier|QCREF]
		public CrossReference getSystemClassifierSystemClassifierCrossReference_3_0() { return cSystemClassifierSystemClassifierCrossReference_3_0; }

		//QCREF
		public RuleCall getSystemClassifierSystemClassifierQCREFParserRuleCall_3_0_1() { return cSystemClassifierSystemClassifierQCREFParserRuleCall_3_0_1; }

		//("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
		public Group getGroup_4() { return cGroup_4; }

		//"in"
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }

		//"modes"
		public Keyword getModesKeyword_4_1() { return cModesKeyword_4_1; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_4_2() { return cLPARENSTerminalRuleCall_4_2; }

		//modeBinding+=ModeRef+ | allModes?="all"
		public Alternatives getAlternatives_4_3() { return cAlternatives_4_3; }

		//modeBinding+=ModeRef+
		public Assignment getModeBindingAssignment_4_3_0() { return cModeBindingAssignment_4_3_0; }

		//ModeRef
		public RuleCall getModeBindingModeRefParserRuleCall_4_3_0_0() { return cModeBindingModeRefParserRuleCall_4_3_0_0; }

		//allModes?="all"
		public Assignment getAllModesAssignment_4_3_1() { return cAllModesAssignment_4_3_1; }

		//"all"
		public Keyword getAllModesAllKeyword_4_3_1_0() { return cAllModesAllKeyword_4_3_1_0; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_4_4() { return cRPARENSTerminalRuleCall_4_4; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class ProcessorSubcomponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessorSubcomponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cProcessorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessorClassifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cProcessorClassifierProcessorClassifierCrossReference_3_0 = (CrossReference)cProcessorClassifierAssignment_3.eContents().get(0);
		private final RuleCall cProcessorClassifierProcessorClassifierQCREFParserRuleCall_3_0_1 = (RuleCall)cProcessorClassifierProcessorClassifierCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cModesKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cLPARENSTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Alternatives cAlternatives_4_3 = (Alternatives)cGroup_4.eContents().get(3);
		private final Assignment cModeBindingAssignment_4_3_0 = (Assignment)cAlternatives_4_3.eContents().get(0);
		private final RuleCall cModeBindingModeRefParserRuleCall_4_3_0_0 = (RuleCall)cModeBindingAssignment_4_3_0.eContents().get(0);
		private final Assignment cAllModesAssignment_4_3_1 = (Assignment)cAlternatives_4_3.eContents().get(1);
		private final Keyword cAllModesAllKeyword_4_3_1_0 = (Keyword)cAllModesAssignment_4_3_1.eContents().get(0);
		private final RuleCall cRPARENSTerminalRuleCall_4_4 = (RuleCall)cGroup_4.eContents().get(4);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ProcessorSubcomponent returns aadl2::ProcessorSubcomponent:
		//	name=ID COLON "processor" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
		//	processorClassifier=[aadl2::ProcessorClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
		//	RPARENS)? SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "processor" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
		//processorClassifier=[aadl2::ProcessorClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
		//RPARENS)? SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"processor"
		public Keyword getProcessorKeyword_2() { return cProcessorKeyword_2; }

		//processorClassifier=[aadl2::ProcessorClassifier|QCREF]?
		public Assignment getProcessorClassifierAssignment_3() { return cProcessorClassifierAssignment_3; }

		//[aadl2::ProcessorClassifier|QCREF]
		public CrossReference getProcessorClassifierProcessorClassifierCrossReference_3_0() { return cProcessorClassifierProcessorClassifierCrossReference_3_0; }

		//QCREF
		public RuleCall getProcessorClassifierProcessorClassifierQCREFParserRuleCall_3_0_1() { return cProcessorClassifierProcessorClassifierQCREFParserRuleCall_3_0_1; }

		//("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
		public Group getGroup_4() { return cGroup_4; }

		//"in"
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }

		//"modes"
		public Keyword getModesKeyword_4_1() { return cModesKeyword_4_1; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_4_2() { return cLPARENSTerminalRuleCall_4_2; }

		//modeBinding+=ModeRef+ | allModes?="all"
		public Alternatives getAlternatives_4_3() { return cAlternatives_4_3; }

		//modeBinding+=ModeRef+
		public Assignment getModeBindingAssignment_4_3_0() { return cModeBindingAssignment_4_3_0; }

		//ModeRef
		public RuleCall getModeBindingModeRefParserRuleCall_4_3_0_0() { return cModeBindingModeRefParserRuleCall_4_3_0_0; }

		//allModes?="all"
		public Assignment getAllModesAssignment_4_3_1() { return cAllModesAssignment_4_3_1; }

		//"all"
		public Keyword getAllModesAllKeyword_4_3_1_0() { return cAllModesAllKeyword_4_3_1_0; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_4_4() { return cRPARENSTerminalRuleCall_4_4; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class DataSubcomponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataSubcomponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cDataKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataClassifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDataClassifierDataClassifierCrossReference_3_0 = (CrossReference)cDataClassifierAssignment_3.eContents().get(0);
		private final RuleCall cDataClassifierDataClassifierQCREFParserRuleCall_3_0_1 = (RuleCall)cDataClassifierDataClassifierCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cModesKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cLPARENSTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Alternatives cAlternatives_4_3 = (Alternatives)cGroup_4.eContents().get(3);
		private final Assignment cModeBindingAssignment_4_3_0 = (Assignment)cAlternatives_4_3.eContents().get(0);
		private final RuleCall cModeBindingModeRefParserRuleCall_4_3_0_0 = (RuleCall)cModeBindingAssignment_4_3_0.eContents().get(0);
		private final Assignment cAllModesAssignment_4_3_1 = (Assignment)cAlternatives_4_3.eContents().get(1);
		private final Keyword cAllModesAllKeyword_4_3_1_0 = (Keyword)cAllModesAssignment_4_3_1.eContents().get(0);
		private final RuleCall cRPARENSTerminalRuleCall_4_4 = (RuleCall)cGroup_4.eContents().get(4);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DataSubcomponent returns aadl2::DataSubcomponent:
		//	name=ID COLON "data" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
		//	dataClassifier=[aadl2::DataClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
		//	SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "data" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
		//dataClassifier=[aadl2::DataClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
		//SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"data"
		public Keyword getDataKeyword_2() { return cDataKeyword_2; }

		//dataClassifier=[aadl2::DataClassifier|QCREF]?
		public Assignment getDataClassifierAssignment_3() { return cDataClassifierAssignment_3; }

		//[aadl2::DataClassifier|QCREF]
		public CrossReference getDataClassifierDataClassifierCrossReference_3_0() { return cDataClassifierDataClassifierCrossReference_3_0; }

		//QCREF
		public RuleCall getDataClassifierDataClassifierQCREFParserRuleCall_3_0_1() { return cDataClassifierDataClassifierQCREFParserRuleCall_3_0_1; }

		//("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
		public Group getGroup_4() { return cGroup_4; }

		//"in"
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }

		//"modes"
		public Keyword getModesKeyword_4_1() { return cModesKeyword_4_1; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_4_2() { return cLPARENSTerminalRuleCall_4_2; }

		//modeBinding+=ModeRef+ | allModes?="all"
		public Alternatives getAlternatives_4_3() { return cAlternatives_4_3; }

		//modeBinding+=ModeRef+
		public Assignment getModeBindingAssignment_4_3_0() { return cModeBindingAssignment_4_3_0; }

		//ModeRef
		public RuleCall getModeBindingModeRefParserRuleCall_4_3_0_0() { return cModeBindingModeRefParserRuleCall_4_3_0_0; }

		//allModes?="all"
		public Assignment getAllModesAssignment_4_3_1() { return cAllModesAssignment_4_3_1; }

		//"all"
		public Keyword getAllModesAllKeyword_4_3_1_0() { return cAllModesAllKeyword_4_3_1_0; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_4_4() { return cRPARENSTerminalRuleCall_4_4; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class SubcomponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subcomponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemSubcomponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessorSubcomponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataSubcomponentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Subcomponent returns aadl2::Subcomponent:
		//	SystemSubcomponent | ProcessorSubcomponent | DataSubcomponent;
		public ParserRule getRule() { return rule; }

		//SystemSubcomponent | ProcessorSubcomponent | DataSubcomponent
		public Alternatives getAlternatives() { return cAlternatives; }

		//SystemSubcomponent
		public RuleCall getSystemSubcomponentParserRuleCall_0() { return cSystemSubcomponentParserRuleCall_0; }

		//ProcessorSubcomponent
		public RuleCall getProcessorSubcomponentParserRuleCall_1() { return cProcessorSubcomponentParserRuleCall_1; }

		//DataSubcomponent
		public RuleCall getDataSubcomponentParserRuleCall_2() { return cDataSubcomponentParserRuleCall_2; }
	}

	public class PortConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cKindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindConnectionTypeParserRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSourceContextAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cSourceContextContextCrossReference_3_0_0 = (CrossReference)cSourceContextAssignment_3_0.eContents().get(0);
		private final RuleCall cSourceContextContextIDTerminalRuleCall_3_0_0_1 = (RuleCall)cSourceContextContextCrossReference_3_0_0.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceConnectionEndCrossReference_4_0 = (CrossReference)cSourceAssignment_4.eContents().get(0);
		private final RuleCall cSourceConnectionEndIDTerminalRuleCall_4_0_1 = (RuleCall)cSourceConnectionEndCrossReference_4_0.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cBidirectionalAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0 = (Keyword)cBidirectionalAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cDestinationContextAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final CrossReference cDestinationContextContextCrossReference_6_0_0 = (CrossReference)cDestinationContextAssignment_6_0.eContents().get(0);
		private final RuleCall cDestinationContextContextIDTerminalRuleCall_6_0_0_1 = (RuleCall)cDestinationContextContextCrossReference_6_0_0.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cDestinationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cDestinationConnectionEndCrossReference_7_0 = (CrossReference)cDestinationAssignment_7.eContents().get(0);
		private final RuleCall cDestinationConnectionEndIDTerminalRuleCall_7_0_1 = (RuleCall)cDestinationConnectionEndCrossReference_7_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		////SystemClassifier returns aadl2::SystemClassifier:
		////	SystemType | SystemImplementation;
		////
		////ProcessorClassifier returns aadl2::ProcessorClassifier:
		////	ProcessorType;
		////ProcessClassifier returns aadl2::ProcessClassifier:
		////	ProcessType;
		////ThreadClassifier returns aadl2::ThreadClassifier:
		////	ThreadType;
		////
		////DataClassifier returns aadl2::DataClassifier:
		////	DataType | DataImplementation;
		//PortConnection returns aadl2::PortConnection:
		//	name=ID COLON kind=ConnectionType (sourceContext=[aadl2::Context] DOT)? source=[aadl2::ConnectionEnd] ("->" |
		//	bidirectional?="<->") (destinationContext=[aadl2::Context] DOT)? destination=[aadl2::ConnectionEnd] SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON kind=ConnectionType (sourceContext=[aadl2::Context] DOT)? source=[aadl2::ConnectionEnd] ("->" |
		//bidirectional?="<->") (destinationContext=[aadl2::Context] DOT)? destination=[aadl2::ConnectionEnd] SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//kind=ConnectionType
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }

		//ConnectionType
		public RuleCall getKindConnectionTypeParserRuleCall_2_0() { return cKindConnectionTypeParserRuleCall_2_0; }

		//(sourceContext=[aadl2::Context] DOT)?
		public Group getGroup_3() { return cGroup_3; }

		//sourceContext=[aadl2::Context]
		public Assignment getSourceContextAssignment_3_0() { return cSourceContextAssignment_3_0; }

		//[aadl2::Context]
		public CrossReference getSourceContextContextCrossReference_3_0_0() { return cSourceContextContextCrossReference_3_0_0; }

		//ID
		public RuleCall getSourceContextContextIDTerminalRuleCall_3_0_0_1() { return cSourceContextContextIDTerminalRuleCall_3_0_0_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_3_1() { return cDOTTerminalRuleCall_3_1; }

		//source=[aadl2::ConnectionEnd]
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }

		//[aadl2::ConnectionEnd]
		public CrossReference getSourceConnectionEndCrossReference_4_0() { return cSourceConnectionEndCrossReference_4_0; }

		//ID
		public RuleCall getSourceConnectionEndIDTerminalRuleCall_4_0_1() { return cSourceConnectionEndIDTerminalRuleCall_4_0_1; }

		//"->" | bidirectional?="<->"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//bidirectional?="<->"
		public Assignment getBidirectionalAssignment_5_1() { return cBidirectionalAssignment_5_1; }

		//"<->"
		public Keyword getBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0() { return cBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0; }

		//(destinationContext=[aadl2::Context] DOT)?
		public Group getGroup_6() { return cGroup_6; }

		//destinationContext=[aadl2::Context]
		public Assignment getDestinationContextAssignment_6_0() { return cDestinationContextAssignment_6_0; }

		//[aadl2::Context]
		public CrossReference getDestinationContextContextCrossReference_6_0_0() { return cDestinationContextContextCrossReference_6_0_0; }

		//ID
		public RuleCall getDestinationContextContextIDTerminalRuleCall_6_0_0_1() { return cDestinationContextContextIDTerminalRuleCall_6_0_0_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_6_1() { return cDOTTerminalRuleCall_6_1; }

		//destination=[aadl2::ConnectionEnd]
		public Assignment getDestinationAssignment_7() { return cDestinationAssignment_7; }

		//[aadl2::ConnectionEnd]
		public CrossReference getDestinationConnectionEndCrossReference_7_0() { return cDestinationConnectionEndCrossReference_7_0; }

		//ID
		public RuleCall getDestinationConnectionEndIDTerminalRuleCall_7_0_1() { return cDestinationConnectionEndIDTerminalRuleCall_7_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_8() { return cSEMITerminalRuleCall_8; }
	}

	public class ConnectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAccessKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFeatureKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFeatureKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cGroupKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cParameterKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPortKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		////enum ConnectionKind returns ConnectionKind:
		////	ACCESS='access' | FEATURE='feature' | FEATUREGROUP = 'feature group' | PARAMETER = 'parameter' | PORT = 'port';
		//ConnectionType returns aadl2::ConnectionKind:
		//	"access" | "feature" | "feature" "group" | "parameter" | "port";
		public ParserRule getRule() { return rule; }

		//"access" | "feature" | "feature" "group" | "parameter" | "port"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"access"
		public Keyword getAccessKeyword_0() { return cAccessKeyword_0; }

		//"feature"
		public Keyword getFeatureKeyword_1() { return cFeatureKeyword_1; }

		//"feature" "group"
		public Group getGroup_2() { return cGroup_2; }

		//"feature"
		public Keyword getFeatureKeyword_2_0() { return cFeatureKeyword_2_0; }

		//"group"
		public Keyword getGroupKeyword_2_1() { return cGroupKeyword_2_1; }

		//"parameter"
		public Keyword getParameterKeyword_3() { return cParameterKeyword_3; }

		//"port"
		public Keyword getPortKeyword_4() { return cPortKeyword_4; }
	}

	public class ConnectionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataSubcomponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConnectionEnd returns aadl2::ConnectionEnd:
		//	DataSubcomponent | Feature;
		public ParserRule getRule() { return rule; }

		//DataSubcomponent | Feature
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataSubcomponent
		public RuleCall getDataSubcomponentParserRuleCall_0() { return cDataSubcomponentParserRuleCall_0; }

		//Feature
		public RuleCall getFeatureParserRuleCall_1() { return cFeatureParserRuleCall_1; }
	}

	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final RuleCall cSubcomponentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Subcomponent | ComponentType; // THE CULPRIT
		//Context returns aadl2::Context:
		//	Subcomponent;
		public ParserRule getRule() { return rule; }

		//Subcomponent
		public RuleCall getSubcomponentParserRuleCall() { return cSubcomponentParserRuleCall; }
	}

	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connection");
		private final RuleCall cPortConnectionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Connection returns aadl2::Connection:
		//	PortConnection;
		public ParserRule getRule() { return rule; }

		//PortConnection
		public RuleCall getPortConnectionParserRuleCall() { return cPortConnectionParserRuleCall; }
	}

	public class FeatureGroupTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureGroupType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//FeatureGroupType returns aadl2::FeatureGroupType:
		//	"feature" "group" name=ID "end" ID SEMI;
		public ParserRule getRule() { return rule; }

		//"feature" "group" name=ID "end" ID SEMI
		public Group getGroup() { return cGroup; }

		//"feature"
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }

		//"group"
		public Keyword getGroupKeyword_1() { return cGroupKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }

		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexLibrary");
		private final RuleCall cDefaultAnnexLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//	DefaultAnnexLibrary;
		public ParserRule getRule() { return rule; }

		//DefaultAnnexLibrary
		public RuleCall getDefaultAnnexLibraryParserRuleCall() { return cDefaultAnnexLibraryParserRuleCall; }
	}

	public class DefaultAnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultAnnexLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSourceTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceTextANNEXTEXTTerminalRuleCall_2_0 = (RuleCall)cSourceTextAssignment_2.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DefaultAnnexLibrary returns aadl2::DefaultAnnexLibrary:
		//	"annex" name=ID sourceText=ANNEXTEXT SEMI;
		public ParserRule getRule() { return rule; }

		//"annex" name=ID sourceText=ANNEXTEXT SEMI
		public Group getGroup() { return cGroup; }

		//"annex"
		public Keyword getAnnexKeyword_0() { return cAnnexKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//sourceText=ANNEXTEXT
		public Assignment getSourceTextAssignment_2() { return cSourceTextAssignment_2; }

		//ANNEXTEXT
		public RuleCall getSourceTextANNEXTEXTTerminalRuleCall_2_0() { return cSourceTextANNEXTEXTTerminalRuleCall_2_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cDefaultAnnexSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	DefaultAnnexSubclause;
		public ParserRule getRule() { return rule; }

		//DefaultAnnexSubclause
		public RuleCall getDefaultAnnexSubclauseParserRuleCall() { return cDefaultAnnexSubclauseParserRuleCall; }
	}

	public class DefaultAnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultAnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSourceTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceTextANNEXTEXTTerminalRuleCall_2_0 = (RuleCall)cSourceTextAssignment_2.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DefaultAnnexSubclause returns aadl2::DefaultAnnexSubclause:
		//	"annex" name=ID sourceText=ANNEXTEXT SEMI;
		public ParserRule getRule() { return rule; }

		//"annex" name=ID sourceText=ANNEXTEXT SEMI
		public Group getGroup() { return cGroup; }

		//"annex"
		public Keyword getAnnexKeyword_0() { return cAnnexKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//sourceText=ANNEXTEXT
		public Assignment getSourceTextAssignment_2() { return cSourceTextAssignment_2; }

		//ANNEXTEXT
		public RuleCall getSourceTextANNEXTEXTTerminalRuleCall_2_0() { return cSourceTextANNEXTEXTTerminalRuleCall_2_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL:
		//	INT DOT INT;
		public ParserRule getRule() { return rule; }

		//INT DOT INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1() { return cDOTTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class QNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINAMEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QNAME:
		//	ID DOT INAME;
		public ParserRule getRule() { return rule; }

		//ID DOT INAME
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1() { return cDOTTerminalRuleCall_1; }

		//INAME
		public RuleCall getINAMEParserRuleCall_2() { return cINAMEParserRuleCall_2; }
	}

	public class PNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PNAME:
		//	ID ("::" ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("::" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("::" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QPREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QPREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QPREF:
		//	ID ("::" ID)?;
		public ParserRule getRule() { return rule; }

		//ID ("::" ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("::" ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class INAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INAME");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INAME:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class QCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QCREF:
		//	(ID "::")* ID (DOT ID)?;
		public ParserRule getRule() { return rule; }

		//(ID "::")* ID (DOT ID)?
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//(DOT ID)?
		public Group getGroup_2() { return cGroup_2; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0() { return cDOTTerminalRuleCall_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	
	
	public class FlowKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FlowKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSourceEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSourceSourceKeyword_0_0 = (Keyword)cSourceEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPathEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPathPathKeyword_1_0 = (Keyword)cPathEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSinkEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSinkSinkKeyword_2_0 = (Keyword)cSinkEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FlowKind returns aadl2::FlowKind:
		//	source | path | sink;
		public EnumRule getRule() { return rule; }

		//source | path | sink
		public Alternatives getAlternatives() { return cAlternatives; }

		//source
		public EnumLiteralDeclaration getSourceEnumLiteralDeclaration_0() { return cSourceEnumLiteralDeclaration_0; }

		//"source"
		public Keyword getSourceSourceKeyword_0_0() { return cSourceSourceKeyword_0_0; }

		//path
		public EnumLiteralDeclaration getPathEnumLiteralDeclaration_1() { return cPathEnumLiteralDeclaration_1; }

		//"path"
		public Keyword getPathPathKeyword_1_0() { return cPathPathKeyword_1_0; }

		//sink
		public EnumLiteralDeclaration getSinkEnumLiteralDeclaration_2() { return cSinkEnumLiteralDeclaration_2; }

		//"sink"
		public Keyword getSinkSinkKeyword_2_0() { return cSinkSinkKeyword_2_0; }
	}
	
	private AadlPackageElements pAadlPackage;
	private PackageSectionElements pPackageSection;
	private PublicPackageSectionElements pPublicPackageSection;
	private PrivatePackageSectionElements pPrivatePackageSection;
	private TypeExtensionElements pTypeExtension;
	private ImplementationExtensionElements pImplementationExtension;
	private FlowKindElements unknownRuleFlowKind;
	private FlowSpecificationElements pFlowSpecification;
	private ModeElements pMode;
	private ModeTransitionElements pModeTransition;
	private TriggerPortElements pTriggerPort;
	private ComponentCategoryKWElements pComponentCategoryKW;
	private SystemTypeElements pSystemType;
	private ProcessTypeElements pProcessType;
	private ThreadTypeElements pThreadType;
	private ProcessorTypeElements pProcessorType;
	private DataTypeElements pDataType;
	private SystemImplementationElements pSystemImplementation;
	private DataImplementationElements pDataImplementation;
	private RealizationElements pRealization;
	private PrototypeElements pPrototype;
	private ComponentPrototypeElements pComponentPrototype;
	private FeatureGroupPrototypeElements pFeatureGroupPrototype;
	private FeaturePrototypeElements pFeaturePrototype;
	private DataPortElements pDataPort;
	private EventDataPortElements pEventDataPort;
	private EventPortElements pEventPort;
	private FeatureGroupElements pFeatureGroup;
	private FeatureElements pFeature;
	private PortElements pPort;
	private PortDirectionElements pPortDirection;
	private ModeRefElements pModeRef;
	private SystemSubcomponentElements pSystemSubcomponent;
	private ProcessorSubcomponentElements pProcessorSubcomponent;
	private DataSubcomponentElements pDataSubcomponent;
	private SubcomponentElements pSubcomponent;
	private PortConnectionElements pPortConnection;
	private ConnectionTypeElements pConnectionType;
	private ConnectionEndElements pConnectionEnd;
	private ContextElements pContext;
	private ConnectionElements pConnection;
	private FeatureGroupTypeElements pFeatureGroupType;
	private AnnexLibraryElements pAnnexLibrary;
	private DefaultAnnexLibraryElements pDefaultAnnexLibrary;
	private AnnexSubclauseElements pAnnexSubclause;
	private DefaultAnnexSubclauseElements pDefaultAnnexSubclause;
	private TerminalRule tEM;
	private TerminalRule tANNEXTEXT;
	private TerminalRule tNONE;
	private TerminalRule tLTRANS;
	private TerminalRule tRTRANS;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tSEMI;
	private TerminalRule tCOLON;
	private TerminalRule tCOMMA;
	private TerminalRule tDOT;
	private TerminalRule tLPARENS;
	private TerminalRule tRPARENS;
	private TerminalRule tLBRACKET;
	private TerminalRule tRBRACKET;
	private TerminalRule tLCURLY;
	private TerminalRule tRCURLY;
	private TerminalRule tASSIGN;
	private TerminalRule tAPPEND;
	private REALElements pREAL;
	private QNAMEElements pQNAME;
	private PNAMEElements pPNAME;
	private QPREFElements pQPREF;
	private INAMEElements pINAME;
	private QCREFElements pQCREF;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public Aadl2GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////AadlSpec:
	////	(AadlPackage | PropertySet);
	////NamedElement returns aadl2::NamedElement:
	////	Classifier | AadlPackage | Feature | Subcomponent | Prototype;
	////
	////Namespace returns Namespace: PackageSection | PropertySet | Classifier;	
	//AadlPackage returns aadl2::AadlPackage:
	//	"package" name=PNAME (ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection? |
	//	ownedPrivateSection=PrivatePackageSection) //	(=> 'properties'
	//	//	((ownedPropertyAssociation+=PropertyAssociation)+ | noProperties?=NONE))?
	//	"end" ID ("::" ID)* SEMI;
	public AadlPackageElements getAadlPackageAccess() {
		return (pAadlPackage != null) ? pAadlPackage : (pAadlPackage = new AadlPackageElements());
	}
	
	public ParserRule getAadlPackageRule() {
		return getAadlPackageAccess().getRule();
	}

	//PackageSection returns aadl2::PackageSection:
	//	PublicPackageSection | PrivatePackageSection;
	public PackageSectionElements getPackageSectionAccess() {
		return (pPackageSection != null) ? pPackageSection : (pPackageSection = new PackageSectionElements());
	}
	
	public ParserRule getPackageSectionRule() {
		return getPackageSectionAccess().getRule();
	}

	//PublicPackageSection returns aadl2::PublicPackageSection:
	//	{aadl2::PublicPackageSection} "public" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
	//	(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
	//	ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*;
	public PublicPackageSectionElements getPublicPackageSectionAccess() {
		return (pPublicPackageSection != null) ? pPublicPackageSection : (pPublicPackageSection = new PublicPackageSectionElements());
	}
	
	public ParserRule getPublicPackageSectionRule() {
		return getPublicPackageSectionAccess().getRule();
	}

	//// currently derived: (ownedClassifier+=Classifier | ownedAnnexLibrary+=AnnexLibrary)*;
	////Import : AadlPackage | PropertySet;
	////	(ownedClassifier+=Classifier | ownedAnnexLibrary+=AnnexLibrary)*
	//PrivatePackageSection returns aadl2::PrivatePackageSection:
	//	{aadl2::PrivatePackageSection} "private" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
	//	(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
	//	ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*;
	public PrivatePackageSectionElements getPrivatePackageSectionAccess() {
		return (pPrivatePackageSection != null) ? pPrivatePackageSection : (pPrivatePackageSection = new PrivatePackageSectionElements());
	}
	
	public ParserRule getPrivatePackageSectionRule() {
		return getPrivatePackageSectionAccess().getRule();
	}

	////Classifier returns aadl2::Classifier:
	////	ComponentClassifier | FeatureGroupType;
	////
	////ComponentClassifier returns aadl2::ComponentClassifier:
	////	SystemClassifier | DataClassifier|ProcessorClassifier|ProcessClassifier|ThreadClassifier;
	//TypeExtension returns aadl2::TypeExtension:
	//	"extends" extended=[aadl2::ComponentType|QCREF];
	public TypeExtensionElements getTypeExtensionAccess() {
		return (pTypeExtension != null) ? pTypeExtension : (pTypeExtension = new TypeExtensionElements());
	}
	
	public ParserRule getTypeExtensionRule() {
		return getTypeExtensionAccess().getRule();
	}

	//ImplementationExtension returns aadl2::ImplementationExtension:
	//	"extends" extended=[aadl2::ComponentImplementation|QCREF];
	public ImplementationExtensionElements getImplementationExtensionAccess() {
		return (pImplementationExtension != null) ? pImplementationExtension : (pImplementationExtension = new ImplementationExtensionElements());
	}
	
	public ParserRule getImplementationExtensionRule() {
		return getImplementationExtensionAccess().getRule();
	}

	//enum FlowKind returns aadl2::FlowKind:
	//	source | path | sink;
	public FlowKindElements getFlowKindAccess() {
		return (unknownRuleFlowKind != null) ? unknownRuleFlowKind : (unknownRuleFlowKind = new FlowKindElements());
	}
	
	public EnumRule getFlowKindRule() {
		return getFlowKindAccess().getRule();
	}

	//FlowSpecification returns aadl2::FlowSpecification:
	//	name=ID COLON "flow" kind=FlowKind inFeature=[aadl2::Feature] ("->" outFeature=[aadl2::Feature])? SEMI;
	public FlowSpecificationElements getFlowSpecificationAccess() {
		return (pFlowSpecification != null) ? pFlowSpecification : (pFlowSpecification = new FlowSpecificationElements());
	}
	
	public ParserRule getFlowSpecificationRule() {
		return getFlowSpecificationAccess().getRule();
	}

	//Mode returns aadl2::Mode:
	//	name=ID COLON initial?="initial"? "mode" SEMI;
	public ModeElements getModeAccess() {
		return (pMode != null) ? pMode : (pMode = new ModeElements());
	}
	
	public ParserRule getModeRule() {
		return getModeAccess().getRule();
	}

	//ModeTransition returns aadl2::ModeTransition:
	//	(name=ID COLON)? source=[aadl2::Mode] LTRANS ownedTrigger+=TriggerPort (COMMA ownedTrigger+=TriggerPort)* RTRANS
	//	destination=[aadl2::Mode] SEMI;
	public ModeTransitionElements getModeTransitionAccess() {
		return (pModeTransition != null) ? pModeTransition : (pModeTransition = new ModeTransitionElements());
	}
	
	public ParserRule getModeTransitionRule() {
		return getModeTransitionAccess().getRule();
	}

	//TriggerPort returns aadl2::TriggerPort:
	//	port=[aadl2::Port];
	public TriggerPortElements getTriggerPortAccess() {
		return (pTriggerPort != null) ? pTriggerPort : (pTriggerPort = new TriggerPortElements());
	}
	
	public ParserRule getTriggerPortRule() {
		return getTriggerPortAccess().getRule();
	}

	////enum ComponentCategory returns aadl2::ComponentCategory:
	////	abstract='abstract' | bus='bus' | data='data'
	////	| device='device' | memory='memory' | process='process' | processor='processor'
	////	| subprogramGroup='subprogram group' | system='system' | threadGroup='thread group'
	////	| thread='thread' | virtualBus='virtual bus' | virtualProcessor='virtual processor';
	//ComponentCategoryKW returns aadl2::ComponentCategory:
	//	"abstract" | "bus" | "data" | "device" | "memory" | "process" | "processor" | "subprogram" "group" | "system" |
	//	"thread" "group" | "thread" | "virtual" "bus" | "virtual" "processor";
	public ComponentCategoryKWElements getComponentCategoryKWAccess() {
		return (pComponentCategoryKW != null) ? pComponentCategoryKW : (pComponentCategoryKW = new ComponentCategoryKWElements());
	}
	
	public ParserRule getComponentCategoryKWRule() {
		return getComponentCategoryKWAccess().getRule();
	}

	//SystemType returns aadl2::SystemType:
	//	"system" name=ID //	(ownedExtension=TypeExtension)?
	//	//	(=> 'extends' extends=[aadl2::SystemType|QCREF])?
	//	("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
	//	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort | FeatureGroup))+))? //| FeatureGroup
	//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
	//	//	((ownedMode+=Mode)+))?
	//	| noModes?=NONE)? //	(=> 'properties'
	//	//	((ownedPropertyAssociation+=PropertyAssociation)+
	//	//	| noProperties?=NONE))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
	public SystemTypeElements getSystemTypeAccess() {
		return (pSystemType != null) ? pSystemType : (pSystemType = new SystemTypeElements());
	}
	
	public ParserRule getSystemTypeRule() {
		return getSystemTypeAccess().getRule();
	}

	//ProcessType returns aadl2::ProcessType:
	//	"process" name=ID //	(ownedExtension=TypeExtension)?
	//	//	(=> 'extends' extends=[aadl2::ProcessType|QCREF])?
	//	("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
	//	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
	//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
	//	//	((ownedMode+=Mode)+))?
	//	| noModes?=NONE)? //	(=> 'properties'
	//	//	((ownedPropertyAssociation+=PropertyAssociation)+
	//	//	| noProperties?=NONE))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
	public ProcessTypeElements getProcessTypeAccess() {
		return (pProcessType != null) ? pProcessType : (pProcessType = new ProcessTypeElements());
	}
	
	public ParserRule getProcessTypeRule() {
		return getProcessTypeAccess().getRule();
	}

	//ThreadType returns aadl2::ThreadType:
	//	"thread" name=ID //	(ownedExtension=TypeExtension)?
	//	//	(=> 'extends' extends=[aadl2::ThreadType|QCREF])?
	//	("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
	//	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
	//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
	//	//	((ownedMode+=Mode)+))?
	//	| noModes?=NONE)? //	(=> 'properties'
	//	//	((ownedPropertyAssociation+=PropertyAssociation)+
	//	//	| noProperties?=NONE))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
	public ThreadTypeElements getThreadTypeAccess() {
		return (pThreadType != null) ? pThreadType : (pThreadType = new ThreadTypeElements());
	}
	
	public ParserRule getThreadTypeRule() {
		return getThreadTypeAccess().getRule();
	}

	//ProcessorType returns aadl2::ProcessorType:
	//	"processor" name=ID //	(=> 'extends' extends=[aadl2::ProcessorType|QCREF])?
	//	//	(ownedExtension=TypeExtension)?
	//	("features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
	//	ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
	//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
	//	//	((ownedMode+=Mode)+))?
	//	| noModes?=NONE)? //	(=> 'properties'
	//	//	((ownedPropertyAssociation+=PropertyAssociation)+
	//	//	| noProperties?=NONE))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
	public ProcessorTypeElements getProcessorTypeAccess() {
		return (pProcessorType != null) ? pProcessorType : (pProcessorType = new ProcessorTypeElements());
	}
	
	public ParserRule getProcessorTypeRule() {
		return getProcessorTypeAccess().getRule();
	}

	//DataType returns aadl2::DataType:
	//	"data" name=ID //	(=> 'extends' extends=[aadl2::DataType|QCREF])?
	//	//	(ownedExtension=TypeExtension)?
	//	("features" noFeatures?=NONE)? //	| (ownedDataPort+=DataPort| ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+ )
	//	//	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
	//	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
	//	//	((ownedMode+=Mode)+))?
	//	| noModes?=NONE)? //	(=> 'properties'
	//	//	((ownedPropertyAssociation+=PropertyAssociation)+
	//	//	| noProperties?=NONE))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	////ComponentImplementation :
	////	SystemImplementation | DataImplementation 
	////;
	//SystemImplementation returns aadl2::SystemImplementation: //	{aadl2::SystemImplementation}
	//	"system" "implementation" //	ownedRealization=Realization DOT name=INAME
	//	//	(ownedExtension=ImplementationExtension)?
	//	//	implemented=[aadl2::ComponentType|ID] DOT name=INAME
	//	//	(=> 'extends' extends=[aadl2::SystemImplementation|QCREF])?
	//	("subcomponents" ((ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent)+ // ownedSubcomponent instaed of each subclass
	//	//	((ownedSubcomponent+=Subcomponent )+
	//	| noSubcomponents?=NONE))? ("connections" (ownedPortConnection+=PortConnection+ | noConnections?=NONE))? ("flows"
	//	noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE))? //	(=> 'properties'
	//	//	((ownedPropertyAssociation+=PropertyAssociation)+
	//	//	| noProperties?=NONE))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI;
	public SystemImplementationElements getSystemImplementationAccess() {
		return (pSystemImplementation != null) ? pSystemImplementation : (pSystemImplementation = new SystemImplementationElements());
	}
	
	public ParserRule getSystemImplementationRule() {
		return getSystemImplementationAccess().getRule();
	}

	//DataImplementation returns aadl2::DataImplementation:
	//	"data" "implementation" //	implemented=[aadl2::DataType|ID] DOT name=INAME
	//	//	(=> 'extends' extends=[aadl2::DataImplementation|QCREF])?
	//	//	ownedRealization=Realization DOT name=INAME
	//	//	(ownedExtension=ImplementationExtension)?
	//	("subcomponents" (ownedDataSubcomponent+=DataSubcomponent //	((ownedSubcomponent+=Subcomponent )+
	//	| noSubcomponents?=NONE))? ("flows" noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
	//	| noModes?=NONE))? //	(=> 'properties'
	//	//	((ownedPropertyAssociation+=PropertyAssociation)+
	//	//	| noProperties?=NONE))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI;
	public DataImplementationElements getDataImplementationAccess() {
		return (pDataImplementation != null) ? pDataImplementation : (pDataImplementation = new DataImplementationElements());
	}
	
	public ParserRule getDataImplementationRule() {
		return getDataImplementationAccess().getRule();
	}

	//Realization returns aadl2::Realization:
	//	implemented=[aadl2::SystemType];
	public RealizationElements getRealizationAccess() {
		return (pRealization != null) ? pRealization : (pRealization = new RealizationElements());
	}
	
	public ParserRule getRealizationRule() {
		return getRealizationAccess().getRule();
	}

	//Prototype returns aadl2::Prototype:
	//	ComponentPrototype | FeatureGroupPrototype | FeaturePrototype;
	public PrototypeElements getPrototypeAccess() {
		return (pPrototype != null) ? pPrototype : (pPrototype = new PrototypeElements());
	}
	
	public ParserRule getPrototypeRule() {
		return getPrototypeAccess().getRule();
	}

	//ComponentPrototype returns aadl2::ComponentPrototype:
	//	name=ID COLON category=ComponentCategoryKW constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
	//	SEMI;
	public ComponentPrototypeElements getComponentPrototypeAccess() {
		return (pComponentPrototype != null) ? pComponentPrototype : (pComponentPrototype = new ComponentPrototypeElements());
	}
	
	public ParserRule getComponentPrototypeRule() {
		return getComponentPrototypeAccess().getRule();
	}

	//FeatureGroupPrototype returns aadl2::FeatureGroupPrototype:
	//	name=ID COLON "feature" "group" constrainingFeatureGroupType=[aadl2::FeatureGroupType|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
	//	SEMI;
	public FeatureGroupPrototypeElements getFeatureGroupPrototypeAccess() {
		return (pFeatureGroupPrototype != null) ? pFeatureGroupPrototype : (pFeatureGroupPrototype = new FeatureGroupPrototypeElements());
	}
	
	public ParserRule getFeatureGroupPrototypeRule() {
		return getFeatureGroupPrototypeAccess().getRule();
	}

	//FeaturePrototype returns aadl2::FeaturePrototype:
	//	name=ID COLON "feature" direction=PortDirection? // only in or out not inout
	//	//(incoming?='in' | outgoing?='out')?
	//	constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
	//	SEMI;
	public FeaturePrototypeElements getFeaturePrototypeAccess() {
		return (pFeaturePrototype != null) ? pFeaturePrototype : (pFeaturePrototype = new FeaturePrototypeElements());
	}
	
	public ParserRule getFeaturePrototypeRule() {
		return getFeaturePrototypeAccess().getRule();
	}

	////ComponentClassifierOrPrototype returns aadl2::ComponentClassifierOrPrototype:
	////	ComponentClassifier | ComponentPrototype;
	//DataPort returns aadl2::DataPort:
	//	name=ID COLON direction=PortDirection "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI;
	public DataPortElements getDataPortAccess() {
		return (pDataPort != null) ? pDataPort : (pDataPort = new DataPortElements());
	}
	
	public ParserRule getDataPortRule() {
		return getDataPortAccess().getRule();
	}

	////	name=ID COLON ( incoming?=IN)? (outgoing?=OUT)? 'data' 'port' (dataClassifier=[DataType|QCREF])? SEMI ;
	//EventDataPort returns aadl2::EventDataPort:
	//	name=ID COLON direction=PortDirection "event" "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI;
	public EventDataPortElements getEventDataPortAccess() {
		return (pEventDataPort != null) ? pEventDataPort : (pEventDataPort = new EventDataPortElements());
	}
	
	public ParserRule getEventDataPortRule() {
		return getEventDataPortAccess().getRule();
	}

	////	name=ID COLON ( incoming?=IN)? (outgoing?=OUT)? 'event' 'data' 'port' (dataClassifier=[DataType|QCREF])? SEMI ;
	//EventPort returns aadl2::EventPort:
	//	name=ID COLON direction=PortDirection "event" "port" SEMI;
	public EventPortElements getEventPortAccess() {
		return (pEventPort != null) ? pEventPort : (pEventPort = new EventPortElements());
	}
	
	public ParserRule getEventPortRule() {
		return getEventPortAccess().getRule();
	}

	////	name=ID COLON ( incoming?=IN |outgoing?=OUT | (incoming?=IN outgoing?=OUT)) 'event' 'port' SEMI ;
	//FeatureGroup returns aadl2::FeatureGroup:
	//	name=ID "feature" "group" featureGroupType=[aadl2::FeatureGroupType|QCREF] SEMI;
	public FeatureGroupElements getFeatureGroupAccess() {
		return (pFeatureGroup != null) ? pFeatureGroup : (pFeatureGroup = new FeatureGroupElements());
	}
	
	public ParserRule getFeatureGroupRule() {
		return getFeatureGroupAccess().getRule();
	}

	//Feature returns aadl2::Feature:
	//	Port | FeatureGroup;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Port returns aadl2::Port:
	//	DataPort | EventPort | EventDataPort;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	////enum DirectionType returns aadl2::DirectionType: in = 'in'  | out = 'out' | inOut = 'in out';
	//PortDirection returns aadl2::DirectionType:
	//	"in" | "out" | "in" "out";
	public PortDirectionElements getPortDirectionAccess() {
		return (pPortDirection != null) ? pPortDirection : (pPortDirection = new PortDirectionElements());
	}
	
	public ParserRule getPortDirectionRule() {
		return getPortDirectionAccess().getRule();
	}

	//ModeRef returns aadl2::ModeBinding:
	//	parentMode=[aadl2::Mode] ("->" derivedMode=[aadl2::Mode])?;
	public ModeRefElements getModeRefAccess() {
		return (pModeRef != null) ? pModeRef : (pModeRef = new ModeRefElements());
	}
	
	public ParserRule getModeRefRule() {
		return getModeRefAccess().getRule();
	}

	////SubcomponentForSystem returns Subcomponent:
	////	name=ID COLON category=SystemSubCategories 
	//////	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
	////	 (classifier=[ProcessorClassifier|QCREF])?
	//////	('in' 'modes' LPARENS ((modeBinding+=ModeRef)+ | allModes?='all') RPARENS)?
	////	SEMI;
	//SystemSubcomponent returns aadl2::SystemSubcomponent:
	//	name=ID COLON "system" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
	//	//	(classifier=[ComponentClassifierOrPrototype|QCREF] )?
	//	// Could not disambiguate the following rule
	//	//([SystemClassifier|QCREF]|prototype=[ComponentPrototype|ID])
	//	systemClassifier=[aadl2::SystemClassifier|QCREF] ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
	//	RPARENS)? SEMI;
	public SystemSubcomponentElements getSystemSubcomponentAccess() {
		return (pSystemSubcomponent != null) ? pSystemSubcomponent : (pSystemSubcomponent = new SystemSubcomponentElements());
	}
	
	public ParserRule getSystemSubcomponentRule() {
		return getSystemSubcomponentAccess().getRule();
	}

	//ProcessorSubcomponent returns aadl2::ProcessorSubcomponent:
	//	name=ID COLON "processor" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
	//	processorClassifier=[aadl2::ProcessorClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
	//	RPARENS)? SEMI;
	public ProcessorSubcomponentElements getProcessorSubcomponentAccess() {
		return (pProcessorSubcomponent != null) ? pProcessorSubcomponent : (pProcessorSubcomponent = new ProcessorSubcomponentElements());
	}
	
	public ParserRule getProcessorSubcomponentRule() {
		return getProcessorSubcomponentAccess().getRule();
	}

	//DataSubcomponent returns aadl2::DataSubcomponent:
	//	name=ID COLON "data" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
	//	dataClassifier=[aadl2::DataClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
	//	SEMI;
	public DataSubcomponentElements getDataSubcomponentAccess() {
		return (pDataSubcomponent != null) ? pDataSubcomponent : (pDataSubcomponent = new DataSubcomponentElements());
	}
	
	public ParserRule getDataSubcomponentRule() {
		return getDataSubcomponentAccess().getRule();
	}

	//Subcomponent returns aadl2::Subcomponent:
	//	SystemSubcomponent | ProcessorSubcomponent | DataSubcomponent;
	public SubcomponentElements getSubcomponentAccess() {
		return (pSubcomponent != null) ? pSubcomponent : (pSubcomponent = new SubcomponentElements());
	}
	
	public ParserRule getSubcomponentRule() {
		return getSubcomponentAccess().getRule();
	}

	////SystemClassifier returns aadl2::SystemClassifier:
	////	SystemType | SystemImplementation;
	////
	////ProcessorClassifier returns aadl2::ProcessorClassifier:
	////	ProcessorType;
	////ProcessClassifier returns aadl2::ProcessClassifier:
	////	ProcessType;
	////ThreadClassifier returns aadl2::ThreadClassifier:
	////	ThreadType;
	////
	////DataClassifier returns aadl2::DataClassifier:
	////	DataType | DataImplementation;
	//PortConnection returns aadl2::PortConnection:
	//	name=ID COLON kind=ConnectionType (sourceContext=[aadl2::Context] DOT)? source=[aadl2::ConnectionEnd] ("->" |
	//	bidirectional?="<->") (destinationContext=[aadl2::Context] DOT)? destination=[aadl2::ConnectionEnd] SEMI;
	public PortConnectionElements getPortConnectionAccess() {
		return (pPortConnection != null) ? pPortConnection : (pPortConnection = new PortConnectionElements());
	}
	
	public ParserRule getPortConnectionRule() {
		return getPortConnectionAccess().getRule();
	}

	////enum ConnectionKind returns ConnectionKind:
	////	ACCESS='access' | FEATURE='feature' | FEATUREGROUP = 'feature group' | PARAMETER = 'parameter' | PORT = 'port';
	//ConnectionType returns aadl2::ConnectionKind:
	//	"access" | "feature" | "feature" "group" | "parameter" | "port";
	public ConnectionTypeElements getConnectionTypeAccess() {
		return (pConnectionType != null) ? pConnectionType : (pConnectionType = new ConnectionTypeElements());
	}
	
	public ParserRule getConnectionTypeRule() {
		return getConnectionTypeAccess().getRule();
	}

	//ConnectionEnd returns aadl2::ConnectionEnd:
	//	DataSubcomponent | Feature;
	public ConnectionEndElements getConnectionEndAccess() {
		return (pConnectionEnd != null) ? pConnectionEnd : (pConnectionEnd = new ConnectionEndElements());
	}
	
	public ParserRule getConnectionEndRule() {
		return getConnectionEndAccess().getRule();
	}

	////Subcomponent | ComponentType; // THE CULPRIT
	//Context returns aadl2::Context:
	//	Subcomponent;
	public ContextElements getContextAccess() {
		return (pContext != null) ? pContext : (pContext = new ContextElements());
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	//Connection returns aadl2::Connection:
	//	PortConnection;
	public ConnectionElements getConnectionAccess() {
		return (pConnection != null) ? pConnection : (pConnection = new ConnectionElements());
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}

	//FeatureGroupType returns aadl2::FeatureGroupType:
	//	"feature" "group" name=ID "end" ID SEMI;
	public FeatureGroupTypeElements getFeatureGroupTypeAccess() {
		return (pFeatureGroupType != null) ? pFeatureGroupType : (pFeatureGroupType = new FeatureGroupTypeElements());
	}
	
	public ParserRule getFeatureGroupTypeRule() {
		return getFeatureGroupTypeAccess().getRule();
	}

	//AnnexLibrary returns aadl2::AnnexLibrary:
	//	DefaultAnnexLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return (pAnnexLibrary != null) ? pAnnexLibrary : (pAnnexLibrary = new AnnexLibraryElements());
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//DefaultAnnexLibrary returns aadl2::DefaultAnnexLibrary:
	//	"annex" name=ID sourceText=ANNEXTEXT SEMI;
	public DefaultAnnexLibraryElements getDefaultAnnexLibraryAccess() {
		return (pDefaultAnnexLibrary != null) ? pDefaultAnnexLibrary : (pDefaultAnnexLibrary = new DefaultAnnexLibraryElements());
	}
	
	public ParserRule getDefaultAnnexLibraryRule() {
		return getDefaultAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	DefaultAnnexSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return (pAnnexSubclause != null) ? pAnnexSubclause : (pAnnexSubclause = new AnnexSubclauseElements());
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//DefaultAnnexSubclause returns aadl2::DefaultAnnexSubclause:
	//	"annex" name=ID sourceText=ANNEXTEXT SEMI;
	public DefaultAnnexSubclauseElements getDefaultAnnexSubclauseAccess() {
		return (pDefaultAnnexSubclause != null) ? pDefaultAnnexSubclause : (pDefaultAnnexSubclause = new DefaultAnnexSubclauseElements());
	}
	
	public ParserRule getDefaultAnnexSubclauseRule() {
		return getDefaultAnnexSubclauseAccess().getRule();
	}

	//terminal EM:
	//	"error_model";
	public TerminalRule getEMRule() {
		return (tEM != null) ? tEM : (tEM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EM"));
	} 

	//terminal ANNEXTEXT:
	//	"{**"->"**}";
	public TerminalRule getANNEXTEXTRule() {
		return (tANNEXTEXT != null) ? tANNEXTEXT : (tANNEXTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANNEXTEXT"));
	} 

	//// **************
	//// Properties
	////PropertyAssociation returns aadl2::PropertyAssociation :
	////	name=ID ASSIGN value=PropertyExpression SEMI;
	////
	////PropertyExpression:
	////	Literal | ProbabilityValue;
	////
	////Literal:
	////	name=ID;
	////
	////ProbabilityValue:
	////	number=REAL distribution=ID;
	//terminal NONE:
	//	"none" SEMI;
	public TerminalRule getNONERule() {
		return (tNONE != null) ? tNONE : (tNONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NONE"));
	} 

	//terminal LTRANS:
	//	"-[";
	public TerminalRule getLTRANSRule() {
		return (tLTRANS != null) ? tLTRANS : (tLTRANS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTRANS"));
	} 

	//terminal RTRANS:
	//	"]->";
	public TerminalRule getRTRANSRule() {
		return (tRTRANS != null) ? tRTRANS : (tRTRANS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RTRANS"));
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal SEMI:
	//	";";
	public TerminalRule getSEMIRule() {
		return (tSEMI != null) ? tSEMI : (tSEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMI"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal LPARENS:
	//	"(";
	public TerminalRule getLPARENSRule() {
		return (tLPARENS != null) ? tLPARENS : (tLPARENS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPARENS"));
	} 

	//terminal RPARENS:
	//	")";
	public TerminalRule getRPARENSRule() {
		return (tRPARENS != null) ? tRPARENS : (tRPARENS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPARENS"));
	} 

	//terminal LBRACKET:
	//	"[";
	public TerminalRule getLBRACKETRule() {
		return (tLBRACKET != null) ? tLBRACKET : (tLBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACKET"));
	} 

	//terminal RBRACKET:
	//	"]";
	public TerminalRule getRBRACKETRule() {
		return (tRBRACKET != null) ? tRBRACKET : (tRBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACKET"));
	} 

	//terminal LCURLY:
	//	"{";
	public TerminalRule getLCURLYRule() {
		return (tLCURLY != null) ? tLCURLY : (tLCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCURLY"));
	} 

	//terminal RCURLY:
	//	"}";
	public TerminalRule getRCURLYRule() {
		return (tRCURLY != null) ? tRCURLY : (tRCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RCURLY"));
	} 

	//terminal ASSIGN:
	//	"=>";
	public TerminalRule getASSIGNRule() {
		return (tASSIGN != null) ? tASSIGN : (tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN"));
	} 

	//terminal APPEND:
	//	"+=>";
	public TerminalRule getAPPENDRule() {
		return (tAPPEND != null) ? tAPPEND : (tAPPEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "APPEND"));
	} 

	//REAL:
	//	INT DOT INT;
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//QNAME:
	//	ID DOT INAME;
	public QNAMEElements getQNAMEAccess() {
		return (pQNAME != null) ? pQNAME : (pQNAME = new QNAMEElements());
	}
	
	public ParserRule getQNAMERule() {
		return getQNAMEAccess().getRule();
	}

	//PNAME:
	//	ID ("::" ID)*;
	public PNAMEElements getPNAMEAccess() {
		return (pPNAME != null) ? pPNAME : (pPNAME = new PNAMEElements());
	}
	
	public ParserRule getPNAMERule() {
		return getPNAMEAccess().getRule();
	}

	//QPREF:
	//	ID ("::" ID)?;
	public QPREFElements getQPREFAccess() {
		return (pQPREF != null) ? pQPREF : (pQPREF = new QPREFElements());
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//INAME:
	//	ID;
	public INAMEElements getINAMEAccess() {
		return (pINAME != null) ? pINAME : (pINAME = new INAMEElements());
	}
	
	public ParserRule getINAMERule() {
		return getINAMEAccess().getRule();
	}

	//QCREF:
	//	(ID "::")* ID (DOT ID)?;
	public QCREFElements getQCREFAccess() {
		return (pQCREF != null) ? pQCREF : (pQCREF = new QCREFElements());
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
