/*
* generated by Xtext
*/

package org.osate.xtext.aadl2.errormodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ErrorModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EM2AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EM2AnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEMTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketAsteriskAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTypesErrorTypeSetParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Assignment cEbsmAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cEbsmErrorBehaviorStateMachineParserRuleCall_3_1_0 = (RuleCall)cEbsmAssignment_3_1.eContents().get(0);
		private final Assignment cEpAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cEpErrorPropagationsParserRuleCall_3_2_0 = (RuleCall)cEpAssignment_3_2.eContents().get(0);
		private final Assignment cCebAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cCebComponentErrorBehaviorParserRuleCall_3_3_0 = (RuleCall)cCebAssignment_3_3.eContents().get(0);
		private final Assignment cCompebAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cCompebCompositeErrorBehaviorParserRuleCall_3_4_0 = (RuleCall)cCompebAssignment_3_4.eContents().get(0);
		private final Keyword cAsteriskAsteriskRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////import 'platform:/resource/org.osate.xtext.aadl2/src-gen/org/osate/aadl2/Aadl2.ecore' as aadl2
		////import "http://www.osate.org/aadl2/properties/Properties" as props
		//EM2AnnexSubclause:
		//	"annex" EM "{**" (types+=ErrorTypeSet | ebsm+=ErrorBehaviorStateMachine | ep+=ErrorPropagations |
		//	ceb+=ComponentErrorBehavior | compeb+=CompositeErrorBehavior)+ "**}" SEMI;
		public ParserRule getRule() { return rule; }

		//"annex" EM "{**" (types+=ErrorTypeSet | ebsm+=ErrorBehaviorStateMachine | ep+=ErrorPropagations |
		//ceb+=ComponentErrorBehavior | compeb+=CompositeErrorBehavior)+ "**}" SEMI
		public Group getGroup() { return cGroup; }

		//"annex"
		public Keyword getAnnexKeyword_0() { return cAnnexKeyword_0; }

		//EM
		public RuleCall getEMTerminalRuleCall_1() { return cEMTerminalRuleCall_1; }

		//"{**"
		public Keyword getLeftCurlyBracketAsteriskAsteriskKeyword_2() { return cLeftCurlyBracketAsteriskAsteriskKeyword_2; }

		//(types+=ErrorTypeSet | ebsm+=ErrorBehaviorStateMachine | ep+=ErrorPropagations | ceb+=ComponentErrorBehavior |
		//compeb+=CompositeErrorBehavior)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//types+=ErrorTypeSet
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }

		//ErrorTypeSet
		public RuleCall getTypesErrorTypeSetParserRuleCall_3_0_0() { return cTypesErrorTypeSetParserRuleCall_3_0_0; }

		//ebsm+=ErrorBehaviorStateMachine
		public Assignment getEbsmAssignment_3_1() { return cEbsmAssignment_3_1; }

		//ErrorBehaviorStateMachine
		public RuleCall getEbsmErrorBehaviorStateMachineParserRuleCall_3_1_0() { return cEbsmErrorBehaviorStateMachineParserRuleCall_3_1_0; }

		//ep+=ErrorPropagations
		public Assignment getEpAssignment_3_2() { return cEpAssignment_3_2; }

		//ErrorPropagations
		public RuleCall getEpErrorPropagationsParserRuleCall_3_2_0() { return cEpErrorPropagationsParserRuleCall_3_2_0; }

		//ceb+=ComponentErrorBehavior
		public Assignment getCebAssignment_3_3() { return cCebAssignment_3_3; }

		//ComponentErrorBehavior
		public RuleCall getCebComponentErrorBehaviorParserRuleCall_3_3_0() { return cCebComponentErrorBehaviorParserRuleCall_3_3_0; }

		//compeb+=CompositeErrorBehavior
		public Assignment getCompebAssignment_3_4() { return cCompebAssignment_3_4; }

		//CompositeErrorBehavior
		public RuleCall getCompebCompositeErrorBehaviorParserRuleCall_3_4_0() { return cCompebCompositeErrorBehaviorParserRuleCall_3_4_0; }

		//"**}"
		public Keyword getAsteriskAsteriskRightCurlyBracketKeyword_4() { return cAsteriskAsteriskRightCurlyBracketKeyword_4; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class ErrorTypeSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorTypeSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesErrorTypeParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cSEMITerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//ErrorTypeSet:
		//	"errors" name=ID types+=ErrorType+ features+=Feature* "end" ID SEMI;
		public ParserRule getRule() { return rule; }

		//"errors" name=ID types+=ErrorType+ features+=Feature* "end" ID SEMI
		public Group getGroup() { return cGroup; }

		//"errors"
		public Keyword getErrorsKeyword_0() { return cErrorsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//types+=ErrorType+
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//ErrorType
		public RuleCall getTypesErrorTypeParserRuleCall_2_0() { return cTypesErrorTypeParserRuleCall_2_0; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_3_0() { return cFeaturesFeatureParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//ID
		public RuleCall getIDTerminalRuleCall_5() { return cIDTerminalRuleCall_5; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_6() { return cSEMITerminalRuleCall_6; }
	}

	public class ErrorTypeSetRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorTypeSetRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExtendsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExtendsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cExtendsErrorTypeSetCrossReference_3_0 = (CrossReference)cExtendsAssignment_3.eContents().get(0);
		private final RuleCall cExtendsErrorTypeSetIDTerminalRuleCall_3_0_1 = (RuleCall)cExtendsErrorTypeSetCrossReference_3_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTypesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTypesErrorTypeParserRuleCall_4_0_0 = (RuleCall)cTypesAssignment_4_0.eContents().get(0);
		private final Assignment cRefinementsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cRefinementsErrorTypeRefinementParserRuleCall_4_1_0 = (RuleCall)cRefinementsAssignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cIDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//ErrorTypeSetRefinement returns ErrorTypeSet:
		//	"errors" name=ID "extends" extends= // [ErrorTypeSet|QCREF] across packages
		//	[ErrorTypeSet] (types+=ErrorType | refinements+=ErrorTypeRefinement)+ "end" ID;
		public ParserRule getRule() { return rule; }

		//"errors" name=ID "extends" extends= // [ErrorTypeSet|QCREF] across packages
		//[ErrorTypeSet] (types+=ErrorType | refinements+=ErrorTypeRefinement)+ "end" ID
		public Group getGroup() { return cGroup; }

		//"errors"
		public Keyword getErrorsKeyword_0() { return cErrorsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"extends"
		public Keyword getExtendsKeyword_2() { return cExtendsKeyword_2; }

		//extends= // [ErrorTypeSet|QCREF] across packages
		//[ErrorTypeSet]
		public Assignment getExtendsAssignment_3() { return cExtendsAssignment_3; }

		//// [ErrorTypeSet|QCREF] across packages
		//[ErrorTypeSet]
		public CrossReference getExtendsErrorTypeSetCrossReference_3_0() { return cExtendsErrorTypeSetCrossReference_3_0; }

		//ID
		public RuleCall getExtendsErrorTypeSetIDTerminalRuleCall_3_0_1() { return cExtendsErrorTypeSetIDTerminalRuleCall_3_0_1; }

		//(types+=ErrorType | refinements+=ErrorTypeRefinement)+
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//types+=ErrorType
		public Assignment getTypesAssignment_4_0() { return cTypesAssignment_4_0; }

		//ErrorType
		public RuleCall getTypesErrorTypeParserRuleCall_4_0_0() { return cTypesErrorTypeParserRuleCall_4_0_0; }

		//refinements+=ErrorTypeRefinement
		public Assignment getRefinementsAssignment_4_1() { return cRefinementsAssignment_4_1; }

		//ErrorTypeRefinement
		public RuleCall getRefinementsErrorTypeRefinementParserRuleCall_4_1_0() { return cRefinementsErrorTypeRefinementParserRuleCall_4_1_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//ID
		public RuleCall getIDTerminalRuleCall_6() { return cIDTerminalRuleCall_6; }
	}

	public class ErrorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cErrorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cASSIGNTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cLPARENSTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cSubtypesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cSubtypesErrorTypeCrossReference_4_2_0 = (CrossReference)cSubtypesAssignment_4_2.eContents().get(0);
		private final RuleCall cSubtypesErrorTypeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cSubtypesErrorTypeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_4_3_0 = (RuleCall)cGroup_4_3.eContents().get(0);
		private final Assignment cSubtypesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cSubtypesErrorTypeCrossReference_4_3_1_0 = (CrossReference)cSubtypesAssignment_4_3_1.eContents().get(0);
		private final RuleCall cSubtypesErrorTypeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cSubtypesErrorTypeCrossReference_4_3_1_0.eContents().get(1);
		private final RuleCall cRPARENSTerminalRuleCall_4_4 = (RuleCall)cGroup_4.eContents().get(4);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ErrorType:
		//	name=ID COLON "error" "type" (ASSIGN LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)? SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "error" "type" (ASSIGN LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)? SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"error"
		public Keyword getErrorKeyword_2() { return cErrorKeyword_2; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//(ASSIGN LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)?
		public Group getGroup_4() { return cGroup_4; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_4_0() { return cASSIGNTerminalRuleCall_4_0; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_4_1() { return cLPARENSTerminalRuleCall_4_1; }

		//subtypes+=[ErrorType]
		public Assignment getSubtypesAssignment_4_2() { return cSubtypesAssignment_4_2; }

		//[ErrorType]
		public CrossReference getSubtypesErrorTypeCrossReference_4_2_0() { return cSubtypesErrorTypeCrossReference_4_2_0; }

		//ID
		public RuleCall getSubtypesErrorTypeIDTerminalRuleCall_4_2_0_1() { return cSubtypesErrorTypeIDTerminalRuleCall_4_2_0_1; }

		//(COMMA subtypes+=[ErrorType])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_3_0() { return cCOMMATerminalRuleCall_4_3_0; }

		//subtypes+=[ErrorType]
		public Assignment getSubtypesAssignment_4_3_1() { return cSubtypesAssignment_4_3_1; }

		//[ErrorType]
		public CrossReference getSubtypesErrorTypeCrossReference_4_3_1_0() { return cSubtypesErrorTypeCrossReference_4_3_1_0; }

		//ID
		public RuleCall getSubtypesErrorTypeIDTerminalRuleCall_4_3_1_0_1() { return cSubtypesErrorTypeIDTerminalRuleCall_4_3_1_0_1; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_4_4() { return cRPARENSTerminalRuleCall_4_4; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Feature:
		//	"feature" name=ID SEMI;
		public ParserRule getRule() { return rule; }

		//"feature" name=ID SEMI
		public Group getGroup() { return cGroup; }

		//"feature"
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_2() { return cSEMITerminalRuleCall_2; }
	}

	public class ErrorTypeRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorTypeRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameErrorTypeCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameErrorTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cNameErrorTypeCrossReference_0_0.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRefinedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cAPPENDTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cLPARENSTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cSubtypesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cSubtypesErrorTypeCrossReference_4_2_0 = (CrossReference)cSubtypesAssignment_4_2.eContents().get(0);
		private final RuleCall cSubtypesErrorTypeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cSubtypesErrorTypeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_4_3_0 = (RuleCall)cGroup_4_3.eContents().get(0);
		private final Assignment cSubtypesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cSubtypesErrorTypeCrossReference_4_3_1_0 = (CrossReference)cSubtypesAssignment_4_3_1.eContents().get(0);
		private final RuleCall cSubtypesErrorTypeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cSubtypesErrorTypeCrossReference_4_3_1_0.eContents().get(1);
		private final RuleCall cRPARENSTerminalRuleCall_4_4 = (RuleCall)cGroup_4.eContents().get(4);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ErrorTypeRefinement:
		//	name=[ErrorType] COLON "refined" "to" (APPEND LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)?
		//	SEMI;
		public ParserRule getRule() { return rule; }

		//name=[ErrorType] COLON "refined" "to" (APPEND LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)?
		//SEMI
		public Group getGroup() { return cGroup; }

		//name=[ErrorType]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[ErrorType]
		public CrossReference getNameErrorTypeCrossReference_0_0() { return cNameErrorTypeCrossReference_0_0; }

		//ID
		public RuleCall getNameErrorTypeIDTerminalRuleCall_0_0_1() { return cNameErrorTypeIDTerminalRuleCall_0_0_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"refined"
		public Keyword getRefinedKeyword_2() { return cRefinedKeyword_2; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//(APPEND LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)?
		public Group getGroup_4() { return cGroup_4; }

		//APPEND
		public RuleCall getAPPENDTerminalRuleCall_4_0() { return cAPPENDTerminalRuleCall_4_0; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_4_1() { return cLPARENSTerminalRuleCall_4_1; }

		//subtypes+=[ErrorType]
		public Assignment getSubtypesAssignment_4_2() { return cSubtypesAssignment_4_2; }

		//[ErrorType]
		public CrossReference getSubtypesErrorTypeCrossReference_4_2_0() { return cSubtypesErrorTypeCrossReference_4_2_0; }

		//ID
		public RuleCall getSubtypesErrorTypeIDTerminalRuleCall_4_2_0_1() { return cSubtypesErrorTypeIDTerminalRuleCall_4_2_0_1; }

		//(COMMA subtypes+=[ErrorType])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_3_0() { return cCOMMATerminalRuleCall_4_3_0; }

		//subtypes+=[ErrorType]
		public Assignment getSubtypesAssignment_4_3_1() { return cSubtypesAssignment_4_3_1; }

		//[ErrorType]
		public CrossReference getSubtypesErrorTypeCrossReference_4_3_1_0() { return cSubtypesErrorTypeCrossReference_4_3_1_0; }

		//ID
		public RuleCall getSubtypesErrorTypeIDTerminalRuleCall_4_3_1_0_1() { return cSubtypesErrorTypeIDTerminalRuleCall_4_3_1_0_1; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_4_4() { return cRPARENSTerminalRuleCall_4_4; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class ErrorPropagationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorPropagations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPropagationsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cUseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportedNamespaceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0 = (RuleCall)cImportedNamespaceAssignment_3.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPropagationsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPropagationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPropagationsErrorPropagationParserRuleCall_5_1_0 = (RuleCall)cPropagationsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFlowsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFlowsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFlowsErrorFlowParserRuleCall_6_1_0 = (RuleCall)cFlowsAssignment_6_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cSEMITerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//ErrorPropagations:
		//	"error" "propagations" "use" importedNamespace=QualifiedNameWithWildCard //use=[ErrorTypeSet|ID] SEMI
		//	SEMI ("propagations" propagations+=ErrorPropagation+)? ("flows" flows+=ErrorFlow+)? "end" SEMI;
		public ParserRule getRule() { return rule; }

		//"error" "propagations" "use" importedNamespace=QualifiedNameWithWildCard //use=[ErrorTypeSet|ID] SEMI
		//SEMI ("propagations" propagations+=ErrorPropagation+)? ("flows" flows+=ErrorFlow+)? "end" SEMI
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//"propagations"
		public Keyword getPropagationsKeyword_1() { return cPropagationsKeyword_1; }

		//"use"
		public Keyword getUseKeyword_2() { return cUseKeyword_2; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_3() { return cImportedNamespaceAssignment_3; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0; }

		////use=[ErrorTypeSet|ID] SEMI
		//SEMI
		public RuleCall getSEMITerminalRuleCall_4() { return cSEMITerminalRuleCall_4; }

		//(=> "propagations" propagations+=ErrorPropagation+)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "propagations"
		public Keyword getPropagationsKeyword_5_0() { return cPropagationsKeyword_5_0; }

		//propagations+=ErrorPropagation+
		public Assignment getPropagationsAssignment_5_1() { return cPropagationsAssignment_5_1; }

		//ErrorPropagation
		public RuleCall getPropagationsErrorPropagationParserRuleCall_5_1_0() { return cPropagationsErrorPropagationParserRuleCall_5_1_0; }

		//(=> "flows" flows+=ErrorFlow+)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "flows"
		public Keyword getFlowsKeyword_6_0() { return cFlowsKeyword_6_0; }

		//flows+=ErrorFlow+
		public Assignment getFlowsAssignment_6_1() { return cFlowsAssignment_6_1; }

		//ErrorFlow
		public RuleCall getFlowsErrorFlowParserRuleCall_6_1_0() { return cFlowsErrorFlowParserRuleCall_6_1_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_8() { return cSEMITerminalRuleCall_8; }
	}

	public class ErrorPropagationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorPropagation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeErrorTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeErrorTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeErrorTypeCrossReference_0_0.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMaskNotKeyword_2_0 = (Keyword)cMaskAssignment_2.eContents().get(0);
		private final Assignment cDirectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectionPropagationDirectionEnumRuleCall_3_0 = (RuleCall)cDirectionAssignment_3.eContents().get(0);
		private final Keyword cPropagationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAppliesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cBindingAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cBindingBindingKindParserRuleCall_7_0_0 = (RuleCall)cBindingAssignment_7_0.eContents().get(0);
		private final Assignment cAppliestoAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cAppliestoFeatureCrossReference_7_1_0 = (CrossReference)cAppliestoAssignment_7_1.eContents().get(0);
		private final RuleCall cAppliestoFeatureIDTerminalRuleCall_7_1_0_1 = (RuleCall)cAppliestoFeatureCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Alternatives cAlternatives_8_1 = (Alternatives)cGroup_8.eContents().get(1);
		private final Assignment cBindingAssignment_8_1_0 = (Assignment)cAlternatives_8_1.eContents().get(0);
		private final RuleCall cBindingBindingKindParserRuleCall_8_1_0_0 = (RuleCall)cBindingAssignment_8_1_0.eContents().get(0);
		private final Assignment cAppliestoAssignment_8_1_1 = (Assignment)cAlternatives_8_1.eContents().get(1);
		private final CrossReference cAppliestoFeatureCrossReference_8_1_1_0 = (CrossReference)cAppliestoAssignment_8_1_1.eContents().get(0);
		private final RuleCall cAppliestoFeatureIDTerminalRuleCall_8_1_1_0_1 = (RuleCall)cAppliestoFeatureCrossReference_8_1_1_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//ErrorPropagation:
		//	type=[ErrorType] COLON mask?="not"? direction=PropagationDirection? "propagation" "applies" "to" (binding+=BindingKind
		//	| appliesto+=[Feature]) (COMMA (binding+=BindingKind | appliesto+=[Feature]))* SEMI;
		public ParserRule getRule() { return rule; }

		//type=[ErrorType] COLON mask?="not"? direction=PropagationDirection? "propagation" "applies" "to" (binding+=BindingKind |
		//appliesto+=[Feature]) (COMMA (binding+=BindingKind | appliesto+=[Feature]))* SEMI
		public Group getGroup() { return cGroup; }

		//type=[ErrorType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[ErrorType]
		public CrossReference getTypeErrorTypeCrossReference_0_0() { return cTypeErrorTypeCrossReference_0_0; }

		//ID
		public RuleCall getTypeErrorTypeIDTerminalRuleCall_0_0_1() { return cTypeErrorTypeIDTerminalRuleCall_0_0_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//mask?="not"?
		public Assignment getMaskAssignment_2() { return cMaskAssignment_2; }

		//"not"
		public Keyword getMaskNotKeyword_2_0() { return cMaskNotKeyword_2_0; }

		//direction=PropagationDirection?
		public Assignment getDirectionAssignment_3() { return cDirectionAssignment_3; }

		//PropagationDirection
		public RuleCall getDirectionPropagationDirectionEnumRuleCall_3_0() { return cDirectionPropagationDirectionEnumRuleCall_3_0; }

		//"propagation"
		public Keyword getPropagationKeyword_4() { return cPropagationKeyword_4; }

		//"applies"
		public Keyword getAppliesKeyword_5() { return cAppliesKeyword_5; }

		//"to"
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//binding+=BindingKind | appliesto+=[Feature]
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//binding+=BindingKind
		public Assignment getBindingAssignment_7_0() { return cBindingAssignment_7_0; }

		//BindingKind
		public RuleCall getBindingBindingKindParserRuleCall_7_0_0() { return cBindingBindingKindParserRuleCall_7_0_0; }

		//appliesto+=[Feature]
		public Assignment getAppliestoAssignment_7_1() { return cAppliestoAssignment_7_1; }

		//[Feature]
		public CrossReference getAppliestoFeatureCrossReference_7_1_0() { return cAppliestoFeatureCrossReference_7_1_0; }

		//ID
		public RuleCall getAppliestoFeatureIDTerminalRuleCall_7_1_0_1() { return cAppliestoFeatureIDTerminalRuleCall_7_1_0_1; }

		//(COMMA (binding+=BindingKind | appliesto+=[Feature]))*
		public Group getGroup_8() { return cGroup_8; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_8_0() { return cCOMMATerminalRuleCall_8_0; }

		//binding+=BindingKind | appliesto+=[Feature]
		public Alternatives getAlternatives_8_1() { return cAlternatives_8_1; }

		//binding+=BindingKind
		public Assignment getBindingAssignment_8_1_0() { return cBindingAssignment_8_1_0; }

		//BindingKind
		public RuleCall getBindingBindingKindParserRuleCall_8_1_0_0() { return cBindingBindingKindParserRuleCall_8_1_0_0; }

		//appliesto+=[Feature]
		public Assignment getAppliestoAssignment_8_1_1() { return cAppliestoAssignment_8_1_1; }

		//[Feature]
		public CrossReference getAppliestoFeatureCrossReference_8_1_1_0() { return cAppliestoFeatureCrossReference_8_1_1_0; }

		//ID
		public RuleCall getAppliestoFeatureIDTerminalRuleCall_8_1_1_0_1() { return cAppliestoFeatureIDTerminalRuleCall_8_1_1_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_9() { return cSEMITerminalRuleCall_9; }
	}

	public class BindingKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindingKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cProcessorKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMemoryKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDeviceKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSystemKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBindingsKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//BindingKind:
		//	"processor" | "memory" | "bus" | "device" | "system" | "bindings";
		public ParserRule getRule() { return rule; }

		//"processor" | "memory" | "bus" | "device" | "system" | "bindings"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"processor"
		public Keyword getProcessorKeyword_0() { return cProcessorKeyword_0; }

		//"memory"
		public Keyword getMemoryKeyword_1() { return cMemoryKeyword_1; }

		//"bus"
		public Keyword getBusKeyword_2() { return cBusKeyword_2; }

		//"device"
		public Keyword getDeviceKeyword_3() { return cDeviceKeyword_3; }

		//"system"
		public Keyword getSystemKeyword_4() { return cSystemKeyword_4; }

		//"bindings"
		public Keyword getBindingsKeyword_5() { return cBindingsKeyword_5; }
	}

	public class ErrorFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorFlow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cErrorSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cErrorSinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cErrorPathParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ErrorFlow:
		//	ErrorSource | ErrorSink | ErrorPath;
		public ParserRule getRule() { return rule; }

		//ErrorSource | ErrorSink | ErrorPath
		public Alternatives getAlternatives() { return cAlternatives; }

		//ErrorSource
		public RuleCall getErrorSourceParserRuleCall_0() { return cErrorSourceParserRuleCall_0; }

		//ErrorSink
		public RuleCall getErrorSinkParserRuleCall_1() { return cErrorSinkParserRuleCall_1; }

		//ErrorPath
		public RuleCall getErrorPathParserRuleCall_2() { return cErrorPathParserRuleCall_2; }
	}

	public class ErrorSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutgoingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutgoingErrorPropagationReferenceParserRuleCall_2_0 = (RuleCall)cOutgoingAssignment_2.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ErrorSource:
		//	"error" "source" outgoing=ErrorPropagationReference SEMI;
		public ParserRule getRule() { return rule; }

		//"error" "source" outgoing=ErrorPropagationReference SEMI
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//"source"
		public Keyword getSourceKeyword_1() { return cSourceKeyword_1; }

		//outgoing=ErrorPropagationReference
		public Assignment getOutgoingAssignment_2() { return cOutgoingAssignment_2; }

		//ErrorPropagationReference
		public RuleCall getOutgoingErrorPropagationReferenceParserRuleCall_2_0() { return cOutgoingErrorPropagationReferenceParserRuleCall_2_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class ErrorSinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorSink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSinkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIncomingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIncomingErrorPropagationReferenceParserRuleCall_2_0 = (RuleCall)cIncomingAssignment_2.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ErrorSink:
		//	"error" "sink" incoming=ErrorPropagationReference SEMI;
		public ParserRule getRule() { return rule; }

		//"error" "sink" incoming=ErrorPropagationReference SEMI
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//"sink"
		public Keyword getSinkKeyword_1() { return cSinkKeyword_1; }

		//incoming=ErrorPropagationReference
		public Assignment getIncomingAssignment_2() { return cIncomingAssignment_2; }

		//ErrorPropagationReference
		public RuleCall getIncomingErrorPropagationReferenceParserRuleCall_2_0() { return cIncomingErrorPropagationReferenceParserRuleCall_2_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class ErrorPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPathKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIncomingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIncomingErrorPropagationReferenceParserRuleCall_2_0 = (RuleCall)cIncomingAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutgoingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutgoingErrorPropagationReferenceParserRuleCall_4_0 = (RuleCall)cOutgoingAssignment_4.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ErrorPath:
		//	"error" "path" incoming=ErrorPropagationReference "->" outgoing=ErrorPropagationReference SEMI;
		public ParserRule getRule() { return rule; }

		//"error" "path" incoming=ErrorPropagationReference "->" outgoing=ErrorPropagationReference SEMI
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//"path"
		public Keyword getPathKeyword_1() { return cPathKeyword_1; }

		//incoming=ErrorPropagationReference
		public Assignment getIncomingAssignment_2() { return cIncomingAssignment_2; }

		//ErrorPropagationReference
		public RuleCall getIncomingErrorPropagationReferenceParserRuleCall_2_0() { return cIncomingErrorPropagationReferenceParserRuleCall_2_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//outgoing=ErrorPropagationReference
		public Assignment getOutgoingAssignment_4() { return cOutgoingAssignment_4; }

		//ErrorPropagationReference
		public RuleCall getOutgoingErrorPropagationReferenceParserRuleCall_4_0() { return cOutgoingErrorPropagationReferenceParserRuleCall_4_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class ErrorPropagationReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorPropagationReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cBindingAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cBindingBindingKindParserRuleCall_0_0_0 = (RuleCall)cBindingAssignment_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_0_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_1_0.eContents().get(1);
		private final Assignment cSelfAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cSelfSelfKeyword_0_2_0 = (Keyword)cSelfAssignment_0_2.eContents().get(0);
		private final RuleCall cLBRACKETTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cErrortypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cErrortypeErrorTypeCrossReference_2_0 = (CrossReference)cErrortypeAssignment_2.eContents().get(0);
		private final RuleCall cErrortypeErrorTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cErrortypeErrorTypeCrossReference_2_0.eContents().get(1);
		private final RuleCall cRBRACKETTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ErrorPropagationReference:
		//	(binding=BindingKind | feature=[Feature] | self?="self") LBRACKET errortype=[ErrorType] RBRACKET;
		public ParserRule getRule() { return rule; }

		//(binding=BindingKind | feature=[Feature] | self?="self") LBRACKET errortype=[ErrorType] RBRACKET
		public Group getGroup() { return cGroup; }

		//binding=BindingKind | feature=[Feature] | self?="self"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//binding=BindingKind
		public Assignment getBindingAssignment_0_0() { return cBindingAssignment_0_0; }

		//BindingKind
		public RuleCall getBindingBindingKindParserRuleCall_0_0_0() { return cBindingBindingKindParserRuleCall_0_0_0; }

		//feature=[Feature]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_0_1_0() { return cFeatureFeatureCrossReference_0_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_0_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_0_1_0_1; }

		//self?="self"
		public Assignment getSelfAssignment_0_2() { return cSelfAssignment_0_2; }

		//"self"
		public Keyword getSelfSelfKeyword_0_2_0() { return cSelfSelfKeyword_0_2_0; }

		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_1() { return cLBRACKETTerminalRuleCall_1; }

		//errortype=[ErrorType]
		public Assignment getErrortypeAssignment_2() { return cErrortypeAssignment_2; }

		//[ErrorType]
		public CrossReference getErrortypeErrorTypeCrossReference_2_0() { return cErrortypeErrorTypeCrossReference_2_0; }

		//ID
		public RuleCall getErrortypeErrorTypeIDTerminalRuleCall_2_0_1() { return cErrortypeErrorTypeIDTerminalRuleCall_2_0_1; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_3() { return cRBRACKETTerminalRuleCall_3; }
	}

	public class ErrorBehaviorStateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorBehaviorStateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cExtendsErrorBehaviorStateMachineCrossReference_3_1_0 = (CrossReference)cExtendsAssignment_3_1.eContents().get(0);
		private final RuleCall cExtendsErrorBehaviorStateMachineIDTerminalRuleCall_3_1_0_1 = (RuleCall)cExtendsErrorBehaviorStateMachineCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_1_0 = (RuleCall)cImportedNamespaceAssignment_4_1.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEventsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEventsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEventsErrorBehaviorEventParserRuleCall_5_1_0 = (RuleCall)cEventsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cStatesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cStatesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStatesErrorBehaviorStateParserRuleCall_6_1_0 = (RuleCall)cStatesAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTransitionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTransitionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cTransitionsErrorBehaviorTransitionParserRuleCall_7_1_0 = (RuleCall)cTransitionsAssignment_7_1.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cIDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cSEMITerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//ErrorBehaviorStateMachine:
		//	"error" "model" name=ID ("extends" extends=[ErrorBehaviorStateMachine])? ("use"
		//	importedNamespace=QualifiedNameWithWildCard SEMI)? //use=[ErrorTypeSet|ID] SEMI )?
		//	("events" events+=ErrorBehaviorEvent+)? ("states" states+=ErrorBehaviorState+)? ("transitions"
		//	transitions+=ErrorBehaviorTransition+)? "end" ID SEMI;
		public ParserRule getRule() { return rule; }

		//"error" "model" name=ID ("extends" extends=[ErrorBehaviorStateMachine])? ("use"
		//importedNamespace=QualifiedNameWithWildCard SEMI)? //use=[ErrorTypeSet|ID] SEMI )?
		//("events" events+=ErrorBehaviorEvent+)? ("states" states+=ErrorBehaviorState+)? ("transitions"
		//transitions+=ErrorBehaviorTransition+)? "end" ID SEMI
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//"model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(=> "extends" extends=[ErrorBehaviorStateMachine])?
		public Group getGroup_3() { return cGroup_3; }

		//=> "extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extends=[ErrorBehaviorStateMachine]
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }

		//[ErrorBehaviorStateMachine]
		public CrossReference getExtendsErrorBehaviorStateMachineCrossReference_3_1_0() { return cExtendsErrorBehaviorStateMachineCrossReference_3_1_0; }

		//ID
		public RuleCall getExtendsErrorBehaviorStateMachineIDTerminalRuleCall_3_1_0_1() { return cExtendsErrorBehaviorStateMachineIDTerminalRuleCall_3_1_0_1; }

		//(=> "use" importedNamespace=QualifiedNameWithWildCard SEMI)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "use"
		public Keyword getUseKeyword_4_0() { return cUseKeyword_4_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_4_1() { return cImportedNamespaceAssignment_4_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_1_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_4_2() { return cSEMITerminalRuleCall_4_2; }

		//(=> "events" events+=ErrorBehaviorEvent+)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "events"
		public Keyword getEventsKeyword_5_0() { return cEventsKeyword_5_0; }

		//events+=ErrorBehaviorEvent+
		public Assignment getEventsAssignment_5_1() { return cEventsAssignment_5_1; }

		//ErrorBehaviorEvent
		public RuleCall getEventsErrorBehaviorEventParserRuleCall_5_1_0() { return cEventsErrorBehaviorEventParserRuleCall_5_1_0; }

		//(=> "states" states+=ErrorBehaviorState+)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "states"
		public Keyword getStatesKeyword_6_0() { return cStatesKeyword_6_0; }

		//states+=ErrorBehaviorState+
		public Assignment getStatesAssignment_6_1() { return cStatesAssignment_6_1; }

		//ErrorBehaviorState
		public RuleCall getStatesErrorBehaviorStateParserRuleCall_6_1_0() { return cStatesErrorBehaviorStateParserRuleCall_6_1_0; }

		//(=> "transitions" transitions+=ErrorBehaviorTransition+)?
		public Group getGroup_7() { return cGroup_7; }

		//=> "transitions"
		public Keyword getTransitionsKeyword_7_0() { return cTransitionsKeyword_7_0; }

		//transitions+=ErrorBehaviorTransition+
		public Assignment getTransitionsAssignment_7_1() { return cTransitionsAssignment_7_1; }

		//ErrorBehaviorTransition
		public RuleCall getTransitionsErrorBehaviorTransitionParserRuleCall_7_1_0() { return cTransitionsErrorBehaviorTransitionParserRuleCall_7_1_0; }

		//"end"
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }

		//ID
		public RuleCall getIDTerminalRuleCall_9() { return cIDTerminalRuleCall_9; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_10() { return cSEMITerminalRuleCall_10; }
	}

	public class ErrorBehaviorEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorBehaviorEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cErrorEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepairEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ErrorBehaviorEvent:
		//	ErrorEvent | RepairEvent;
		public ParserRule getRule() { return rule; }

		//ErrorEvent | RepairEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//ErrorEvent
		public RuleCall getErrorEventParserRuleCall_0() { return cErrorEventParserRuleCall_0; }

		//RepairEvent
		public RuleCall getRepairEventParserRuleCall_1() { return cRepairEventParserRuleCall_1; }
	}

	public class ErrorEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cErrorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEventKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSEMITerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// add event condition and properties
		//ErrorEvent:
		//	name=ID COLON "error" "event" SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "error" "event" SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"error"
		public Keyword getErrorKeyword_2() { return cErrorKeyword_2; }

		//"event"
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_4() { return cSEMITerminalRuleCall_4; }
	}

	public class RepairEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepairEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRepairKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEventKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSEMITerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////add repair initiator and properties
		//RepairEvent:
		//	name=ID COLON "repair" "event" SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON "repair" "event" SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//"repair"
		public Keyword getRepairKeyword_2() { return cRepairKeyword_2; }

		//"event"
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_4() { return cSEMITerminalRuleCall_4; }
	}

	public class ErrorBehaviorStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorBehaviorState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cIntialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIntialInitialKeyword_1_0 = (Keyword)cIntialAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cLCURLYTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesPropertyAssociationParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cSEMITerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ErrorBehaviorState:
		//	name=ID intial?="initial"? "state" (LCURLY properties+=PropertyAssociation+ RCURLY)? SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID intial?="initial"? "state" (LCURLY properties+=PropertyAssociation+ RCURLY)? SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//intial?="initial"?
		public Assignment getIntialAssignment_1() { return cIntialAssignment_1; }

		//"initial"
		public Keyword getIntialInitialKeyword_1_0() { return cIntialInitialKeyword_1_0; }

		//"state"
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }

		//(LCURLY properties+=PropertyAssociation+ RCURLY)?
		public Group getGroup_3() { return cGroup_3; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_3_0() { return cLCURLYTerminalRuleCall_3_0; }

		//properties+=PropertyAssociation+
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//PropertyAssociation
		public RuleCall getPropertiesPropertyAssociationParserRuleCall_3_1_0() { return cPropertiesPropertyAssociationParserRuleCall_3_1_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_3_2() { return cRCURLYTerminalRuleCall_3_2; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_4() { return cSEMITerminalRuleCall_4; }
	}

	public class ErrorBehaviorTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorBehaviorTransition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTriggeredTransitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBranchTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ErrorBehaviorTransition:
		//	TriggeredTransition | BranchTransition;
		public ParserRule getRule() { return rule; }

		//TriggeredTransition | BranchTransition
		public Alternatives getAlternatives() { return cAlternatives; }

		//TriggeredTransition
		public RuleCall getTriggeredTransitionParserRuleCall_0() { return cTriggeredTransitionParserRuleCall_0; }

		//BranchTransition
		public RuleCall getBranchTransitionParserRuleCall_1() { return cBranchTransitionParserRuleCall_1; }
	}

	public class TriggeredTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggeredTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceErrorBehaviorStateCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceErrorBehaviorStateIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceErrorBehaviorStateCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cLTRANSTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cEventsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cEventsErrorBehaviorEventCrossReference_3_1_1_0 = (CrossReference)cEventsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cEventsErrorBehaviorEventIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cEventsErrorBehaviorEventCrossReference_3_1_1_0.eContents().get(1);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_3_1_2_0 = (RuleCall)cGroup_3_1_2.eContents().get(0);
		private final Assignment cEventsAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final CrossReference cEventsErrorBehaviorEventCrossReference_3_1_2_1_0 = (CrossReference)cEventsAssignment_3_1_2_1.eContents().get(0);
		private final RuleCall cEventsErrorBehaviorEventIDTerminalRuleCall_3_1_2_1_0_1 = (RuleCall)cEventsErrorBehaviorEventCrossReference_3_1_2_1_0.eContents().get(1);
		private final RuleCall cRTRANSTerminalRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		private final Assignment cDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDestinationErrorBehaviorStateCrossReference_4_0 = (CrossReference)cDestinationAssignment_4.eContents().get(0);
		private final RuleCall cDestinationErrorBehaviorStateIDTerminalRuleCall_4_0_1 = (RuleCall)cDestinationErrorBehaviorStateCrossReference_4_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//TriggeredTransition:
		//	name=ID COLON source=[ErrorBehaviorState] ("->" | LTRANS events+=[ErrorBehaviorEvent] (COMMA
		//	events+=[ErrorBehaviorEvent])* RTRANS) destination=[ErrorBehaviorState] SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID COLON source=[ErrorBehaviorState] ("->" | LTRANS events+=[ErrorBehaviorEvent] (COMMA
		//events+=[ErrorBehaviorEvent])* RTRANS) destination=[ErrorBehaviorState] SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//source=[ErrorBehaviorState]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[ErrorBehaviorState]
		public CrossReference getSourceErrorBehaviorStateCrossReference_2_0() { return cSourceErrorBehaviorStateCrossReference_2_0; }

		//ID
		public RuleCall getSourceErrorBehaviorStateIDTerminalRuleCall_2_0_1() { return cSourceErrorBehaviorStateIDTerminalRuleCall_2_0_1; }

		//"->" | LTRANS events+=[ErrorBehaviorEvent] (COMMA events+=[ErrorBehaviorEvent])* RTRANS
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//LTRANS events+=[ErrorBehaviorEvent] (COMMA events+=[ErrorBehaviorEvent])* RTRANS
		public Group getGroup_3_1() { return cGroup_3_1; }

		//LTRANS
		public RuleCall getLTRANSTerminalRuleCall_3_1_0() { return cLTRANSTerminalRuleCall_3_1_0; }

		//events+=[ErrorBehaviorEvent]
		public Assignment getEventsAssignment_3_1_1() { return cEventsAssignment_3_1_1; }

		//[ErrorBehaviorEvent]
		public CrossReference getEventsErrorBehaviorEventCrossReference_3_1_1_0() { return cEventsErrorBehaviorEventCrossReference_3_1_1_0; }

		//ID
		public RuleCall getEventsErrorBehaviorEventIDTerminalRuleCall_3_1_1_0_1() { return cEventsErrorBehaviorEventIDTerminalRuleCall_3_1_1_0_1; }

		//(COMMA events+=[ErrorBehaviorEvent])*
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_1_2_0() { return cCOMMATerminalRuleCall_3_1_2_0; }

		//events+=[ErrorBehaviorEvent]
		public Assignment getEventsAssignment_3_1_2_1() { return cEventsAssignment_3_1_2_1; }

		//[ErrorBehaviorEvent]
		public CrossReference getEventsErrorBehaviorEventCrossReference_3_1_2_1_0() { return cEventsErrorBehaviorEventCrossReference_3_1_2_1_0; }

		//ID
		public RuleCall getEventsErrorBehaviorEventIDTerminalRuleCall_3_1_2_1_0_1() { return cEventsErrorBehaviorEventIDTerminalRuleCall_3_1_2_1_0_1; }

		//RTRANS
		public RuleCall getRTRANSTerminalRuleCall_3_1_3() { return cRTRANSTerminalRuleCall_3_1_3; }

		//destination=[ErrorBehaviorState]
		public Assignment getDestinationAssignment_4() { return cDestinationAssignment_4; }

		//[ErrorBehaviorState]
		public CrossReference getDestinationErrorBehaviorStateCrossReference_4_0() { return cDestinationErrorBehaviorStateCrossReference_4_0; }

		//ID
		public RuleCall getDestinationErrorBehaviorStateIDTerminalRuleCall_4_0_1() { return cDestinationErrorBehaviorStateIDTerminalRuleCall_4_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class BranchTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BranchTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceErrorBehaviorStateCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceErrorBehaviorStateIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceErrorBehaviorStateCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBranchValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDestinationErrorBehaviorStateCrossReference_4_0 = (CrossReference)cDestinationAssignment_4.eContents().get(0);
		private final RuleCall cDestinationErrorBehaviorStateIDTerminalRuleCall_4_0_1 = (RuleCall)cDestinationErrorBehaviorStateCrossReference_4_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//BranchTransition:
		//	source=[ErrorBehaviorState] "-(" value=BranchValue ")->" destination=[ErrorBehaviorState] SEMI;
		public ParserRule getRule() { return rule; }

		//source=[ErrorBehaviorState] "-(" value=BranchValue ")->" destination=[ErrorBehaviorState] SEMI
		public Group getGroup() { return cGroup; }

		//source=[ErrorBehaviorState]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[ErrorBehaviorState]
		public CrossReference getSourceErrorBehaviorStateCrossReference_0_0() { return cSourceErrorBehaviorStateCrossReference_0_0; }

		//ID
		public RuleCall getSourceErrorBehaviorStateIDTerminalRuleCall_0_0_1() { return cSourceErrorBehaviorStateIDTerminalRuleCall_0_0_1; }

		//"-("
		public Keyword getHyphenMinusLeftParenthesisKeyword_1() { return cHyphenMinusLeftParenthesisKeyword_1; }

		//value=BranchValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//BranchValue
		public RuleCall getValueBranchValueParserRuleCall_2_0() { return cValueBranchValueParserRuleCall_2_0; }

		//")->"
		public Keyword getRightParenthesisHyphenMinusGreaterThanSignKeyword_3() { return cRightParenthesisHyphenMinusGreaterThanSignKeyword_3; }

		//destination=[ErrorBehaviorState]
		public Assignment getDestinationAssignment_4() { return cDestinationAssignment_4; }

		//[ErrorBehaviorState]
		public CrossReference getDestinationErrorBehaviorStateCrossReference_4_0() { return cDestinationErrorBehaviorStateCrossReference_4_0; }

		//ID
		public RuleCall getDestinationErrorBehaviorStateIDTerminalRuleCall_4_0_1() { return cDestinationErrorBehaviorStateIDTerminalRuleCall_4_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class BranchValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BranchValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cREALParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cOthersKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BranchValue:
		//	REAL | "others";
		public ParserRule getRule() { return rule; }

		//REAL | "others"
		public Alternatives getAlternatives() { return cAlternatives; }

		//REAL
		public RuleCall getREALParserRuleCall_0() { return cREALParserRuleCall_0; }

		//"others"
		public Keyword getOthersKeyword_1() { return cOthersKeyword_1; }
	}

	public class ComponentErrorBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentErrorBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBehaviorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cUseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportedNamespaceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0 = (RuleCall)cImportedNamespaceAssignment_3.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTransitionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cConditionsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTransitionConditionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTransitionConditionTransitionConditionParserRuleCall_5_2_0 = (RuleCall)cTransitionConditionAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPropagationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cConditionsKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cPropagationConditionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPropagationConditionPropagationConditionParserRuleCall_6_2_0 = (RuleCall)cPropagationConditionAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDetectionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEventsKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDetectionEventAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDetectionEventDetectionEventParserRuleCall_7_2_0 = (RuleCall)cDetectionEventAssignment_7_2.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cSEMITerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//ComponentErrorBehavior:
		//	"error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
		//	SEMI ("transition" "conditions" transitionCondition+=TransitionCondition+)? ("propagation" "conditions"
		//	propagationCondition+=PropagationCondition+)? ("detection" "events" detectionEvent+=DetectionEvent+)? "end" SEMI;
		public ParserRule getRule() { return rule; }

		//"error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
		//SEMI ("transition" "conditions" transitionCondition+=TransitionCondition+)? ("propagation" "conditions"
		//propagationCondition+=PropagationCondition+)? ("detection" "events" detectionEvent+=DetectionEvent+)? "end" SEMI
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//"behavior"
		public Keyword getBehaviorKeyword_1() { return cBehaviorKeyword_1; }

		//"use"
		public Keyword getUseKeyword_2() { return cUseKeyword_2; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_3() { return cImportedNamespaceAssignment_3; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0; }

		////[ErrorBehaviorStateMachine|ID] SEMI
		//SEMI
		public RuleCall getSEMITerminalRuleCall_4() { return cSEMITerminalRuleCall_4; }

		//("transition" "conditions" transitionCondition+=TransitionCondition+)?
		public Group getGroup_5() { return cGroup_5; }

		//"transition"
		public Keyword getTransitionKeyword_5_0() { return cTransitionKeyword_5_0; }

		//"conditions"
		public Keyword getConditionsKeyword_5_1() { return cConditionsKeyword_5_1; }

		//transitionCondition+=TransitionCondition+
		public Assignment getTransitionConditionAssignment_5_2() { return cTransitionConditionAssignment_5_2; }

		//TransitionCondition
		public RuleCall getTransitionConditionTransitionConditionParserRuleCall_5_2_0() { return cTransitionConditionTransitionConditionParserRuleCall_5_2_0; }

		//("propagation" "conditions" propagationCondition+=PropagationCondition+)?
		public Group getGroup_6() { return cGroup_6; }

		//"propagation"
		public Keyword getPropagationKeyword_6_0() { return cPropagationKeyword_6_0; }

		//"conditions"
		public Keyword getConditionsKeyword_6_1() { return cConditionsKeyword_6_1; }

		//propagationCondition+=PropagationCondition+
		public Assignment getPropagationConditionAssignment_6_2() { return cPropagationConditionAssignment_6_2; }

		//PropagationCondition
		public RuleCall getPropagationConditionPropagationConditionParserRuleCall_6_2_0() { return cPropagationConditionPropagationConditionParserRuleCall_6_2_0; }

		//("detection" "events" detectionEvent+=DetectionEvent+)?
		public Group getGroup_7() { return cGroup_7; }

		//"detection"
		public Keyword getDetectionKeyword_7_0() { return cDetectionKeyword_7_0; }

		//"events"
		public Keyword getEventsKeyword_7_1() { return cEventsKeyword_7_1; }

		//detectionEvent+=DetectionEvent+
		public Assignment getDetectionEventAssignment_7_2() { return cDetectionEventAssignment_7_2; }

		//DetectionEvent
		public RuleCall getDetectionEventDetectionEventParserRuleCall_7_2_0() { return cDetectionEventDetectionEventParserRuleCall_7_2_0; }

		//"end"
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_9() { return cSEMITerminalRuleCall_9; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID (DOT ID)*;
		public ParserRule getRule() { return rule; }

		//ID (DOT ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(DOT ID)*
		public Group getGroup_1() { return cGroup_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0() { return cDOTTerminalRuleCall_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class TransitionConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cErrorTransitionAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cErrorTransitionTriggeredTransitionCrossReference_0_0_0 = (CrossReference)cErrorTransitionAssignment_0_0.eContents().get(0);
		private final RuleCall cErrorTransitionTriggeredTransitionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cErrorTransitionTriggeredTransitionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cMaskAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cMaskMaskKeyword_0_1_0 = (Keyword)cMaskAssignment_0_1.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionTriggerConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//TransitionCondition:
		//	(errorTransition=[TriggeredTransition] | mask?="mask") "when" condition=TriggerConditionExpression SEMI;
		public ParserRule getRule() { return rule; }

		//(errorTransition=[TriggeredTransition] | mask?="mask") "when" condition=TriggerConditionExpression SEMI
		public Group getGroup() { return cGroup; }

		//errorTransition=[TriggeredTransition] | mask?="mask"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//errorTransition=[TriggeredTransition]
		public Assignment getErrorTransitionAssignment_0_0() { return cErrorTransitionAssignment_0_0; }

		//[TriggeredTransition]
		public CrossReference getErrorTransitionTriggeredTransitionCrossReference_0_0_0() { return cErrorTransitionTriggeredTransitionCrossReference_0_0_0; }

		//ID
		public RuleCall getErrorTransitionTriggeredTransitionIDTerminalRuleCall_0_0_0_1() { return cErrorTransitionTriggeredTransitionIDTerminalRuleCall_0_0_0_1; }

		//mask?="mask"
		public Assignment getMaskAssignment_0_1() { return cMaskAssignment_0_1; }

		//"mask"
		public Keyword getMaskMaskKeyword_0_1_0() { return cMaskMaskKeyword_0_1_0; }

		//"when"
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//condition=TriggerConditionExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//TriggerConditionExpression
		public RuleCall getConditionTriggerConditionExpressionParserRuleCall_2_0() { return cConditionTriggerConditionExpressionParserRuleCall_2_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class TriggerConditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerConditionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrmoreExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrlessExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOthersExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TriggerConditionExpression:
		//	OrExpression | OrmoreExpression | OrlessExpression | OthersExpression;
		public ParserRule getRule() { return rule; }

		//OrExpression | OrmoreExpression | OrlessExpression | OthersExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }

		//OrmoreExpression
		public RuleCall getOrmoreExpressionParserRuleCall_1() { return cOrmoreExpressionParserRuleCall_1; }

		//OrlessExpression
		public RuleCall getOrlessExpressionParserRuleCall_2() { return cOrlessExpressionParserRuleCall_2; }

		//OthersExpression
		public RuleCall getOthersExpressionParserRuleCall_3() { return cOthersExpressionParserRuleCall_3; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandsPrimaryParserRuleCall_1_2_0 = (RuleCall)cOperandsAssignment_1_2.eContents().get(0);
		
		//AndExpression returns TriggerConditionExpression:
		//	Primary ({AndExpression.operands+=current} "and" operands+=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({AndExpression.operands+=current} "and" operands+=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({AndExpression.operands+=current} "and" operands+=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.operands+=current}
		public Action getAndExpressionOperandsAction_1_0() { return cAndExpressionOperandsAction_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//operands+=Primary
		public Assignment getOperandsAssignment_1_2() { return cOperandsAssignment_1_2; }

		//Primary
		public RuleCall getOperandsPrimaryParserRuleCall_1_2_0() { return cOperandsPrimaryParserRuleCall_1_2_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandsAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandsAssignment_1_2.eContents().get(0);
		
		//OrExpression returns TriggerConditionExpression:
		//	AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({OrExpression.operands+=current} "or" operands+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.operands+=current}
		public Action getOrExpressionOperandsAction_1_0() { return cOrExpressionOperandsAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//operands+=AndExpression
		public Assignment getOperandsAssignment_1_2() { return cOperandsAssignment_1_2; }

		//AndExpression
		public RuleCall getOperandsAndExpressionParserRuleCall_1_2_0() { return cOperandsAndExpressionParserRuleCall_1_2_0; }
	}

	public class OrmoreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrmoreExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCountINTTerminalRuleCall_0_0 = (RuleCall)cCountAssignment_0.eContents().get(0);
		private final Keyword cOrmoreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARENSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOperandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandsTriggerConditionExpressionParserRuleCall_3_0 = (RuleCall)cOperandsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cOperandsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperandsTriggerConditionExpressionParserRuleCall_4_1_0 = (RuleCall)cOperandsAssignment_4_1.eContents().get(0);
		private final RuleCall cRPARENSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//OrmoreExpression:
		//	count=INT "ormore" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS;
		public ParserRule getRule() { return rule; }

		//count=INT "ormore" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS
		public Group getGroup() { return cGroup; }

		//count=INT
		public Assignment getCountAssignment_0() { return cCountAssignment_0; }

		//INT
		public RuleCall getCountINTTerminalRuleCall_0_0() { return cCountINTTerminalRuleCall_0_0; }

		//"ormore"
		public Keyword getOrmoreKeyword_1() { return cOrmoreKeyword_1; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_2() { return cLPARENSTerminalRuleCall_2; }

		//operands+=TriggerConditionExpression
		public Assignment getOperandsAssignment_3() { return cOperandsAssignment_3; }

		//TriggerConditionExpression
		public RuleCall getOperandsTriggerConditionExpressionParserRuleCall_3_0() { return cOperandsTriggerConditionExpressionParserRuleCall_3_0; }

		//(COMMA operands+=TriggerConditionExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }

		//operands+=TriggerConditionExpression
		public Assignment getOperandsAssignment_4_1() { return cOperandsAssignment_4_1; }

		//TriggerConditionExpression
		public RuleCall getOperandsTriggerConditionExpressionParserRuleCall_4_1_0() { return cOperandsTriggerConditionExpressionParserRuleCall_4_1_0; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_5() { return cRPARENSTerminalRuleCall_5; }
	}

	public class OrlessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrlessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCountINTTerminalRuleCall_0_0 = (RuleCall)cCountAssignment_0.eContents().get(0);
		private final Keyword cOrlessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARENSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOperandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandsTriggerConditionExpressionParserRuleCall_3_0 = (RuleCall)cOperandsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cOperandsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperandsTriggerConditionExpressionParserRuleCall_4_1_0 = (RuleCall)cOperandsAssignment_4_1.eContents().get(0);
		private final RuleCall cRPARENSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//OrlessExpression:
		//	count=INT "orless" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS;
		public ParserRule getRule() { return rule; }

		//count=INT "orless" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS
		public Group getGroup() { return cGroup; }

		//count=INT
		public Assignment getCountAssignment_0() { return cCountAssignment_0; }

		//INT
		public RuleCall getCountINTTerminalRuleCall_0_0() { return cCountINTTerminalRuleCall_0_0; }

		//"orless"
		public Keyword getOrlessKeyword_1() { return cOrlessKeyword_1; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_2() { return cLPARENSTerminalRuleCall_2; }

		//operands+=TriggerConditionExpression
		public Assignment getOperandsAssignment_3() { return cOperandsAssignment_3; }

		//TriggerConditionExpression
		public RuleCall getOperandsTriggerConditionExpressionParserRuleCall_3_0() { return cOperandsTriggerConditionExpressionParserRuleCall_3_0; }

		//(COMMA operands+=TriggerConditionExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }

		//operands+=TriggerConditionExpression
		public Assignment getOperandsAssignment_4_1() { return cOperandsAssignment_4_1; }

		//TriggerConditionExpression
		public RuleCall getOperandsTriggerConditionExpressionParserRuleCall_4_1_0() { return cOperandsTriggerConditionExpressionParserRuleCall_4_1_0; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_5() { return cRPARENSTerminalRuleCall_5; }
	}

	public class OthersExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OthersExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOthersExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOthersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OthersExpression:
		//	{OthersExpression} "others";
		public ParserRule getRule() { return rule; }

		//{OthersExpression} "others"
		public Group getGroup() { return cGroup; }

		//{OthersExpression}
		public Action getOthersExpressionAction_0() { return cOthersExpressionAction_0; }

		//"others"
		public Keyword getOthersKeyword_1() { return cOthersKeyword_1; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cErrorEventReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cErrorPropagationReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWorkingReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cLPARENSTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cTriggerConditionExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cRPARENSTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//Primary returns TriggerConditionExpression:
		//	ErrorEventReference | ErrorPropagationReference | WorkingReference | LPARENS TriggerConditionExpression RPARENS;
		public ParserRule getRule() { return rule; }

		//ErrorEventReference | ErrorPropagationReference | WorkingReference | LPARENS TriggerConditionExpression RPARENS
		public Alternatives getAlternatives() { return cAlternatives; }

		//ErrorEventReference
		public RuleCall getErrorEventReferenceParserRuleCall_0() { return cErrorEventReferenceParserRuleCall_0; }

		//ErrorPropagationReference
		public RuleCall getErrorPropagationReferenceParserRuleCall_1() { return cErrorPropagationReferenceParserRuleCall_1; }

		//WorkingReference
		public RuleCall getWorkingReferenceParserRuleCall_2() { return cWorkingReferenceParserRuleCall_2; }

		//LPARENS TriggerConditionExpression RPARENS
		public Group getGroup_3() { return cGroup_3; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_3_0() { return cLPARENSTerminalRuleCall_3_0; }

		//TriggerConditionExpression
		public RuleCall getTriggerConditionExpressionParserRuleCall_3_1() { return cTriggerConditionExpressionParserRuleCall_3_1; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_3_2() { return cRPARENSTerminalRuleCall_3_2; }
	}

	public class ErrorEventReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorEventReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceErrorBehaviorEventCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceErrorBehaviorEventIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceErrorBehaviorEventCrossReference_1_0.eContents().get(1);
		
		//ErrorEventReference:
		//	"event" reference=[ErrorBehaviorEvent];
		public ParserRule getRule() { return rule; }

		//"event" reference=[ErrorBehaviorEvent]
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//reference=[ErrorBehaviorEvent]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[ErrorBehaviorEvent]
		public CrossReference getReferenceErrorBehaviorEventCrossReference_1_0() { return cReferenceErrorBehaviorEventCrossReference_1_0; }

		//ID
		public RuleCall getReferenceErrorBehaviorEventIDTerminalRuleCall_1_0_1() { return cReferenceErrorBehaviorEventIDTerminalRuleCall_1_0_1; }
	}

	public class WorkingReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkingReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cBindingAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cBindingBindingKindParserRuleCall_0_0_0 = (RuleCall)cBindingAssignment_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_0_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_1_0.eContents().get(1);
		private final Assignment cSelfAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cSelfSelfKeyword_0_2_0 = (Keyword)cSelfAssignment_0_2.eContents().get(0);
		private final RuleCall cLBRACKETTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cWorkingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cWorkingWorkingKeyword_2_0 = (Keyword)cWorkingAssignment_2.eContents().get(0);
		private final RuleCall cRBRACKETTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//WorkingReference:
		//	(binding=BindingKind | feature=[Feature] | self?="self") LBRACKET working?="working" RBRACKET;
		public ParserRule getRule() { return rule; }

		//(binding=BindingKind | feature=[Feature] | self?="self") LBRACKET working?="working" RBRACKET
		public Group getGroup() { return cGroup; }

		//binding=BindingKind | feature=[Feature] | self?="self"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//binding=BindingKind
		public Assignment getBindingAssignment_0_0() { return cBindingAssignment_0_0; }

		//BindingKind
		public RuleCall getBindingBindingKindParserRuleCall_0_0_0() { return cBindingBindingKindParserRuleCall_0_0_0; }

		//feature=[Feature]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_0_1_0() { return cFeatureFeatureCrossReference_0_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_0_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_0_1_0_1; }

		//self?="self"
		public Assignment getSelfAssignment_0_2() { return cSelfAssignment_0_2; }

		//"self"
		public Keyword getSelfSelfKeyword_0_2_0() { return cSelfSelfKeyword_0_2_0; }

		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_1() { return cLBRACKETTerminalRuleCall_1; }

		//working?="working"
		public Assignment getWorkingAssignment_2() { return cWorkingAssignment_2; }

		//"working"
		public Keyword getWorkingWorkingKeyword_2_0() { return cWorkingWorkingKeyword_2_0; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_3() { return cRBRACKETTerminalRuleCall_3; }
	}

	public class PropagationConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropagationCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cOutPropagationAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cOutPropagationErrorPropagationCrossReference_0_0_0 = (CrossReference)cOutPropagationAssignment_0_0.eContents().get(0);
		private final RuleCall cOutPropagationErrorPropagationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cOutPropagationErrorPropagationCrossReference_0_0_0.eContents().get(1);
		private final Assignment cMaskAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cMaskMaskKeyword_0_1_0 = (Keyword)cMaskAssignment_0_1.eContents().get(0);
		private final Assignment cWorkingAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cWorkingWorkingKeyword_0_2_0 = (Keyword)cWorkingAssignment_0_2.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cStateErrorBehaviorStateCrossReference_2_0_0 = (CrossReference)cStateAssignment_2_0.eContents().get(0);
		private final RuleCall cStateErrorBehaviorStateIDTerminalRuleCall_2_0_0_1 = (RuleCall)cStateErrorBehaviorStateCrossReference_2_0_0.eContents().get(1);
		private final Keyword cAndKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionTriggerConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAppliesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cToKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFeatureAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cFeatureFeatureCrossReference_4_2_0 = (CrossReference)cFeatureAssignment_4_2.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_4_2_0_1 = (RuleCall)cFeatureFeatureCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_4_3_0 = (RuleCall)cGroup_4_3.eContents().get(0);
		private final Assignment cFeatureAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_4_3_1_0 = (CrossReference)cFeatureAssignment_4_3_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_4_3_1_0.eContents().get(1);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//PropagationCondition:
		//	(outPropagation=[ErrorPropagation] | mask?="mask" | working?="working") "when" (state=[ErrorBehaviorState] "and")?
		//	condition=TriggerConditionExpression ("applies" "to" feature+=[Feature] (COMMA feature+=[Feature])*)? SEMI;
		public ParserRule getRule() { return rule; }

		//(outPropagation=[ErrorPropagation] | mask?="mask" | working?="working") "when" (state=[ErrorBehaviorState] "and")?
		//condition=TriggerConditionExpression ("applies" "to" feature+=[Feature] (COMMA feature+=[Feature])*)? SEMI
		public Group getGroup() { return cGroup; }

		//outPropagation=[ErrorPropagation] | mask?="mask" | working?="working"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//outPropagation=[ErrorPropagation]
		public Assignment getOutPropagationAssignment_0_0() { return cOutPropagationAssignment_0_0; }

		//[ErrorPropagation]
		public CrossReference getOutPropagationErrorPropagationCrossReference_0_0_0() { return cOutPropagationErrorPropagationCrossReference_0_0_0; }

		//ID
		public RuleCall getOutPropagationErrorPropagationIDTerminalRuleCall_0_0_0_1() { return cOutPropagationErrorPropagationIDTerminalRuleCall_0_0_0_1; }

		//mask?="mask"
		public Assignment getMaskAssignment_0_1() { return cMaskAssignment_0_1; }

		//"mask"
		public Keyword getMaskMaskKeyword_0_1_0() { return cMaskMaskKeyword_0_1_0; }

		//working?="working"
		public Assignment getWorkingAssignment_0_2() { return cWorkingAssignment_0_2; }

		//"working"
		public Keyword getWorkingWorkingKeyword_0_2_0() { return cWorkingWorkingKeyword_0_2_0; }

		//"when"
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//(state=[ErrorBehaviorState] "and")?
		public Group getGroup_2() { return cGroup_2; }

		//state=[ErrorBehaviorState]
		public Assignment getStateAssignment_2_0() { return cStateAssignment_2_0; }

		//[ErrorBehaviorState]
		public CrossReference getStateErrorBehaviorStateCrossReference_2_0_0() { return cStateErrorBehaviorStateCrossReference_2_0_0; }

		//ID
		public RuleCall getStateErrorBehaviorStateIDTerminalRuleCall_2_0_0_1() { return cStateErrorBehaviorStateIDTerminalRuleCall_2_0_0_1; }

		//"and"
		public Keyword getAndKeyword_2_1() { return cAndKeyword_2_1; }

		//condition=TriggerConditionExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//TriggerConditionExpression
		public RuleCall getConditionTriggerConditionExpressionParserRuleCall_3_0() { return cConditionTriggerConditionExpressionParserRuleCall_3_0; }

		//(=> "applies" "to" feature+=[Feature] (COMMA feature+=[Feature])*)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "applies"
		public Keyword getAppliesKeyword_4_0() { return cAppliesKeyword_4_0; }

		//"to"
		public Keyword getToKeyword_4_1() { return cToKeyword_4_1; }

		//feature+=[Feature]
		public Assignment getFeatureAssignment_4_2() { return cFeatureAssignment_4_2; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_4_2_0() { return cFeatureFeatureCrossReference_4_2_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_4_2_0_1() { return cFeatureFeatureIDTerminalRuleCall_4_2_0_1; }

		//(COMMA feature+=[Feature])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_3_0() { return cCOMMATerminalRuleCall_4_3_0; }

		//feature+=[Feature]
		public Assignment getFeatureAssignment_4_3_1() { return cFeatureAssignment_4_3_1; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_4_3_1_0() { return cFeatureFeatureCrossReference_4_3_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_4_3_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_4_3_1_0_1; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class DetectionEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DetectionEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSelfAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cSelfSelfKeyword_0_0_0 = (Keyword)cSelfAssignment_0_0.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cEventPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventPortFeatureCrossReference_1_0 = (CrossReference)cEventPortAssignment_1.eContents().get(0);
		private final RuleCall cEventPortFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cEventPortFeatureCrossReference_1_0.eContents().get(1);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionTriggerConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//DetectionEvent:
		//	(self?="self" DOT)? eventPort=[Feature] "when" condition=TriggerConditionExpression SEMI;
		public ParserRule getRule() { return rule; }

		//(self?="self" DOT)? eventPort=[Feature] "when" condition=TriggerConditionExpression SEMI
		public Group getGroup() { return cGroup; }

		//(self?="self" DOT)?
		public Group getGroup_0() { return cGroup_0; }

		//self?="self"
		public Assignment getSelfAssignment_0_0() { return cSelfAssignment_0_0; }

		//"self"
		public Keyword getSelfSelfKeyword_0_0_0() { return cSelfSelfKeyword_0_0_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_0_1() { return cDOTTerminalRuleCall_0_1; }

		//eventPort=[Feature]
		public Assignment getEventPortAssignment_1() { return cEventPortAssignment_1; }

		//[Feature]
		public CrossReference getEventPortFeatureCrossReference_1_0() { return cEventPortFeatureCrossReference_1_0; }

		//ID
		public RuleCall getEventPortFeatureIDTerminalRuleCall_1_0_1() { return cEventPortFeatureIDTerminalRuleCall_1_0_1; }

		//"when"
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }

		//condition=TriggerConditionExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//TriggerConditionExpression
		public RuleCall getConditionTriggerConditionExpressionParserRuleCall_3_0() { return cConditionTriggerConditionExpressionParserRuleCall_3_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_4() { return cSEMITerminalRuleCall_4; }
	}

	public class CompositeErrorBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeErrorBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cErrorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBehaviorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cUseKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cImportedNamespaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_0 = (RuleCall)cImportedNamespaceAssignment_4.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cStatesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cStateAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStateCompositeStateParserRuleCall_6_1_0 = (RuleCall)cStateAssignment_6_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cSEMITerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//CompositeErrorBehavior:
		//	"composite" "error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
		//	SEMI ("states" state+=CompositeState+)? "end" SEMI;
		public ParserRule getRule() { return rule; }

		//"composite" "error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
		//SEMI ("states" state+=CompositeState+)? "end" SEMI
		public Group getGroup() { return cGroup; }

		//"composite"
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }

		//"error"
		public Keyword getErrorKeyword_1() { return cErrorKeyword_1; }

		//"behavior"
		public Keyword getBehaviorKeyword_2() { return cBehaviorKeyword_2; }

		//"use"
		public Keyword getUseKeyword_3() { return cUseKeyword_3; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_4() { return cImportedNamespaceAssignment_4; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_0; }

		////[ErrorBehaviorStateMachine|ID] SEMI
		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }

		//("states" state+=CompositeState+)?
		public Group getGroup_6() { return cGroup_6; }

		//"states"
		public Keyword getStatesKeyword_6_0() { return cStatesKeyword_6_0; }

		//state+=CompositeState+
		public Assignment getStateAssignment_6_1() { return cStateAssignment_6_1; }

		//CompositeState
		public RuleCall getStateCompositeStateParserRuleCall_6_1_0() { return cStateCompositeStateParserRuleCall_6_1_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_8() { return cSEMITerminalRuleCall_8; }
	}

	public class CompositeStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStateErrorBehaviorStateCrossReference_0_0 = (CrossReference)cStateAssignment_0.eContents().get(0);
		private final RuleCall cStateErrorBehaviorStateIDTerminalRuleCall_0_0_1 = (RuleCall)cStateErrorBehaviorStateCrossReference_0_0.eContents().get(1);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionStateConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//CompositeState:
		//	state=[ErrorBehaviorState] "when" condition=StateConditionExpression SEMI;
		public ParserRule getRule() { return rule; }

		//state=[ErrorBehaviorState] "when" condition=StateConditionExpression SEMI
		public Group getGroup() { return cGroup; }

		//state=[ErrorBehaviorState]
		public Assignment getStateAssignment_0() { return cStateAssignment_0; }

		//[ErrorBehaviorState]
		public CrossReference getStateErrorBehaviorStateCrossReference_0_0() { return cStateErrorBehaviorStateCrossReference_0_0; }

		//ID
		public RuleCall getStateErrorBehaviorStateIDTerminalRuleCall_0_0_1() { return cStateErrorBehaviorStateIDTerminalRuleCall_0_0_1; }

		//"when"
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//condition=StateConditionExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//StateConditionExpression
		public RuleCall getConditionStateConditionExpressionParserRuleCall_2_0() { return cConditionStateConditionExpressionParserRuleCall_2_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class StateConditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateConditionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrSExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrmoreSExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrlessSExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOthersExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//StateConditionExpression:
		//	OrSExpression | OrmoreSExpression | OrlessSExpression | OthersExpression;
		public ParserRule getRule() { return rule; }

		//OrSExpression | OrmoreSExpression | OrlessSExpression | OthersExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//OrSExpression
		public RuleCall getOrSExpressionParserRuleCall_0() { return cOrSExpressionParserRuleCall_0; }

		//OrmoreSExpression
		public RuleCall getOrmoreSExpressionParserRuleCall_1() { return cOrmoreSExpressionParserRuleCall_1; }

		//OrlessSExpression
		public RuleCall getOrlessSExpressionParserRuleCall_2() { return cOrlessSExpressionParserRuleCall_2; }

		//OthersExpression
		public RuleCall getOthersExpressionParserRuleCall_3() { return cOthersExpressionParserRuleCall_3; }
	}

	public class AndSExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndSExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandsPrimaryParserRuleCall_1_2_0 = (RuleCall)cOperandsAssignment_1_2.eContents().get(0);
		
		//AndSExpression returns StateConditionExpression:
		//	Primary ({AndExpression.operands+=current} "and" operands+=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({AndExpression.operands+=current} "and" operands+=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({AndExpression.operands+=current} "and" operands+=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.operands+=current}
		public Action getAndExpressionOperandsAction_1_0() { return cAndExpressionOperandsAction_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//operands+=Primary
		public Assignment getOperandsAssignment_1_2() { return cOperandsAssignment_1_2; }

		//Primary
		public RuleCall getOperandsPrimaryParserRuleCall_1_2_0() { return cOperandsPrimaryParserRuleCall_1_2_0; }
	}

	public class OrSExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrSExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandsAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandsAssignment_1_2.eContents().get(0);
		
		//OrSExpression returns StateConditionExpression:
		//	AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({OrExpression.operands+=current} "or" operands+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.operands+=current}
		public Action getOrExpressionOperandsAction_1_0() { return cOrExpressionOperandsAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//operands+=AndExpression
		public Assignment getOperandsAssignment_1_2() { return cOperandsAssignment_1_2; }

		//AndExpression
		public RuleCall getOperandsAndExpressionParserRuleCall_1_2_0() { return cOperandsAndExpressionParserRuleCall_1_2_0; }
	}

	public class OrmoreSExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrmoreSExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCountINTTerminalRuleCall_0_0 = (RuleCall)cCountAssignment_0.eContents().get(0);
		private final Keyword cOrmoreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARENSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOperandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandsStateConditionExpressionParserRuleCall_3_0 = (RuleCall)cOperandsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cOperandsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperandsStateConditionExpressionParserRuleCall_4_1_0 = (RuleCall)cOperandsAssignment_4_1.eContents().get(0);
		private final RuleCall cRPARENSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//OrmoreSExpression returns OrmoreExpression:
		//	count=INT "ormore" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS;
		public ParserRule getRule() { return rule; }

		//count=INT "ormore" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS
		public Group getGroup() { return cGroup; }

		//count=INT
		public Assignment getCountAssignment_0() { return cCountAssignment_0; }

		//INT
		public RuleCall getCountINTTerminalRuleCall_0_0() { return cCountINTTerminalRuleCall_0_0; }

		//"ormore"
		public Keyword getOrmoreKeyword_1() { return cOrmoreKeyword_1; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_2() { return cLPARENSTerminalRuleCall_2; }

		//operands+=StateConditionExpression
		public Assignment getOperandsAssignment_3() { return cOperandsAssignment_3; }

		//StateConditionExpression
		public RuleCall getOperandsStateConditionExpressionParserRuleCall_3_0() { return cOperandsStateConditionExpressionParserRuleCall_3_0; }

		//(COMMA operands+=StateConditionExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }

		//operands+=StateConditionExpression
		public Assignment getOperandsAssignment_4_1() { return cOperandsAssignment_4_1; }

		//StateConditionExpression
		public RuleCall getOperandsStateConditionExpressionParserRuleCall_4_1_0() { return cOperandsStateConditionExpressionParserRuleCall_4_1_0; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_5() { return cRPARENSTerminalRuleCall_5; }
	}

	public class OrlessSExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrlessSExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCountINTTerminalRuleCall_0_0 = (RuleCall)cCountAssignment_0.eContents().get(0);
		private final Keyword cOrlessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARENSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cOperandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandsStateConditionExpressionParserRuleCall_3_0 = (RuleCall)cOperandsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cOperandsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperandsStateConditionExpressionParserRuleCall_4_1_0 = (RuleCall)cOperandsAssignment_4_1.eContents().get(0);
		private final RuleCall cRPARENSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//OrlessSExpression returns OrlessExpression:
		//	count=INT "orless" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS;
		public ParserRule getRule() { return rule; }

		//count=INT "orless" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS
		public Group getGroup() { return cGroup; }

		//count=INT
		public Assignment getCountAssignment_0() { return cCountAssignment_0; }

		//INT
		public RuleCall getCountINTTerminalRuleCall_0_0() { return cCountINTTerminalRuleCall_0_0; }

		//"orless"
		public Keyword getOrlessKeyword_1() { return cOrlessKeyword_1; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_2() { return cLPARENSTerminalRuleCall_2; }

		//operands+=StateConditionExpression
		public Assignment getOperandsAssignment_3() { return cOperandsAssignment_3; }

		//StateConditionExpression
		public RuleCall getOperandsStateConditionExpressionParserRuleCall_3_0() { return cOperandsStateConditionExpressionParserRuleCall_3_0; }

		//(COMMA operands+=StateConditionExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }

		//operands+=StateConditionExpression
		public Assignment getOperandsAssignment_4_1() { return cOperandsAssignment_4_1; }

		//StateConditionExpression
		public RuleCall getOperandsStateConditionExpressionParserRuleCall_4_1_0() { return cOperandsStateConditionExpressionParserRuleCall_4_1_0; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_5() { return cRPARENSTerminalRuleCall_5; }
	}

	public class SPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubcomponentStateReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLPARENSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cStateConditionExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cRPARENSTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//SPrimary returns StateConditionExpression:
		//	SubcomponentStateReference | LPARENS StateConditionExpression RPARENS;
		public ParserRule getRule() { return rule; }

		//SubcomponentStateReference | LPARENS StateConditionExpression RPARENS
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubcomponentStateReference
		public RuleCall getSubcomponentStateReferenceParserRuleCall_0() { return cSubcomponentStateReferenceParserRuleCall_0; }

		//LPARENS StateConditionExpression RPARENS
		public Group getGroup_1() { return cGroup_1; }

		//LPARENS
		public RuleCall getLPARENSTerminalRuleCall_1_0() { return cLPARENSTerminalRuleCall_1_0; }

		//StateConditionExpression
		public RuleCall getStateConditionExpressionParserRuleCall_1_1() { return cStateConditionExpressionParserRuleCall_1_1; }

		//RPARENS
		public RuleCall getRPARENSTerminalRuleCall_1_2() { return cRPARENSTerminalRuleCall_1_2; }
	}

	public class SubcomponentStateReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubcomponentStateReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubcomponentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSubcomponentFeatureCrossReference_0_0 = (CrossReference)cSubcomponentAssignment_0.eContents().get(0);
		private final RuleCall cSubcomponentFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cSubcomponentFeatureCrossReference_0_0.eContents().get(1);
		private final RuleCall cLBRACKETTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cErrortypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cErrortypeErrorBehaviorStateCrossReference_2_0 = (CrossReference)cErrortypeAssignment_2.eContents().get(0);
		private final RuleCall cErrortypeErrorBehaviorStateIDTerminalRuleCall_2_0_1 = (RuleCall)cErrortypeErrorBehaviorStateCrossReference_2_0.eContents().get(1);
		private final RuleCall cRBRACKETTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SubcomponentStateReference:
		//	subcomponent=[Feature] LBRACKET errortype=[ErrorBehaviorState] RBRACKET;
		public ParserRule getRule() { return rule; }

		//subcomponent=[Feature] LBRACKET errortype=[ErrorBehaviorState] RBRACKET
		public Group getGroup() { return cGroup; }

		//subcomponent=[Feature]
		public Assignment getSubcomponentAssignment_0() { return cSubcomponentAssignment_0; }

		//[Feature]
		public CrossReference getSubcomponentFeatureCrossReference_0_0() { return cSubcomponentFeatureCrossReference_0_0; }

		//ID
		public RuleCall getSubcomponentFeatureIDTerminalRuleCall_0_0_1() { return cSubcomponentFeatureIDTerminalRuleCall_0_0_1; }

		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_1() { return cLBRACKETTerminalRuleCall_1; }

		//errortype=[ErrorBehaviorState]
		public Assignment getErrortypeAssignment_2() { return cErrortypeAssignment_2; }

		//[ErrorBehaviorState]
		public CrossReference getErrortypeErrorBehaviorStateCrossReference_2_0() { return cErrortypeErrorBehaviorStateCrossReference_2_0; }

		//ID
		public RuleCall getErrortypeErrorBehaviorStateIDTerminalRuleCall_2_0_1() { return cErrortypeErrorBehaviorStateIDTerminalRuleCall_2_0_1; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_3() { return cRBRACKETTerminalRuleCall_3; }
	}

	public class PropertyAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePropertyExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PropertyAssociation:
		//	name=ID ASSIGN value=PropertyExpression SEMI;
		public ParserRule getRule() { return rule; }

		//name=ID ASSIGN value=PropertyExpression SEMI
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_1() { return cASSIGNTerminalRuleCall_1; }

		//value=PropertyExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//PropertyExpression
		public RuleCall getValuePropertyExpressionParserRuleCall_2_0() { return cValuePropertyExpressionParserRuleCall_2_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_3() { return cSEMITerminalRuleCall_3; }
	}

	public class PropertyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProbabilityValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PropertyExpression:
		//	Literal | ProbabilityValue;
		public ParserRule getRule() { return rule; }

		//Literal | ProbabilityValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//ProbabilityValue
		public RuleCall getProbabilityValueParserRuleCall_1() { return cProbabilityValueParserRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Literal:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ProbabilityValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProbabilityValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberREALParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cDistributionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistributionIDTerminalRuleCall_1_0 = (RuleCall)cDistributionAssignment_1.eContents().get(0);
		
		//ProbabilityValue:
		//	number=REAL distribution=ID;
		public ParserRule getRule() { return rule; }

		//number=REAL distribution=ID
		public Group getGroup() { return cGroup; }

		//number=REAL
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }

		//REAL
		public RuleCall getNumberREALParserRuleCall_0_0() { return cNumberREALParserRuleCall_0_0; }

		//distribution=ID
		public Assignment getDistributionAssignment_1() { return cDistributionAssignment_1; }

		//ID
		public RuleCall getDistributionIDTerminalRuleCall_1_0() { return cDistributionIDTerminalRuleCall_1_0; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL:
		//	INT DOT INT;
		public ParserRule getRule() { return rule; }

		//INT DOT INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1() { return cDOTTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class QNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINAMEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QNAME:
		//	ID DOT INAME;
		public ParserRule getRule() { return rule; }

		//ID DOT INAME
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1() { return cDOTTerminalRuleCall_1; }

		//INAME
		public RuleCall getINAMEParserRuleCall_2() { return cINAMEParserRuleCall_2; }
	}

	public class PNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PNAME:
		//	ID ("::" ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("::" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("::" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class INAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INAME");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INAME:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class QCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QCREF:
		//	(ID "::")* ID (DOT ID)?;
		public ParserRule getRule() { return rule; }

		//(ID "::")* ID (DOT ID)?
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//(DOT ID)?
		public Group getGroup_2() { return cGroup_2; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0() { return cDOTTerminalRuleCall_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	
	
	public class PropagationDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PropagationDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PropagationDirection:
		//	IN="in" | OUT="out";
		public EnumRule getRule() { return rule; }

		//IN="in" | OUT="out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }

		//OUT="out"
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOUTOutKeyword_1_0() { return cOUTOutKeyword_1_0; }
	}
	
	private EM2AnnexSubclauseElements pEM2AnnexSubclause;
	private ErrorTypeSetElements pErrorTypeSet;
	private ErrorTypeSetRefinementElements pErrorTypeSetRefinement;
	private ErrorTypeElements pErrorType;
	private FeatureElements pFeature;
	private ErrorTypeRefinementElements pErrorTypeRefinement;
	private ErrorPropagationsElements pErrorPropagations;
	private ErrorPropagationElements pErrorPropagation;
	private PropagationDirectionElements unknownRulePropagationDirection;
	private BindingKindElements pBindingKind;
	private ErrorFlowElements pErrorFlow;
	private ErrorSourceElements pErrorSource;
	private ErrorSinkElements pErrorSink;
	private ErrorPathElements pErrorPath;
	private ErrorPropagationReferenceElements pErrorPropagationReference;
	private ErrorBehaviorStateMachineElements pErrorBehaviorStateMachine;
	private ErrorBehaviorEventElements pErrorBehaviorEvent;
	private ErrorEventElements pErrorEvent;
	private RepairEventElements pRepairEvent;
	private ErrorBehaviorStateElements pErrorBehaviorState;
	private ErrorBehaviorTransitionElements pErrorBehaviorTransition;
	private TriggeredTransitionElements pTriggeredTransition;
	private BranchTransitionElements pBranchTransition;
	private BranchValueElements pBranchValue;
	private ComponentErrorBehaviorElements pComponentErrorBehavior;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private TransitionConditionElements pTransitionCondition;
	private TriggerConditionExpressionElements pTriggerConditionExpression;
	private AndExpressionElements pAndExpression;
	private OrExpressionElements pOrExpression;
	private OrmoreExpressionElements pOrmoreExpression;
	private OrlessExpressionElements pOrlessExpression;
	private OthersExpressionElements pOthersExpression;
	private PrimaryElements pPrimary;
	private ErrorEventReferenceElements pErrorEventReference;
	private WorkingReferenceElements pWorkingReference;
	private PropagationConditionElements pPropagationCondition;
	private DetectionEventElements pDetectionEvent;
	private CompositeErrorBehaviorElements pCompositeErrorBehavior;
	private CompositeStateElements pCompositeState;
	private StateConditionExpressionElements pStateConditionExpression;
	private AndSExpressionElements pAndSExpression;
	private OrSExpressionElements pOrSExpression;
	private OrmoreSExpressionElements pOrmoreSExpression;
	private OrlessSExpressionElements pOrlessSExpression;
	private SPrimaryElements pSPrimary;
	private SubcomponentStateReferenceElements pSubcomponentStateReference;
	private PropertyAssociationElements pPropertyAssociation;
	private PropertyExpressionElements pPropertyExpression;
	private LiteralElements pLiteral;
	private ProbabilityValueElements pProbabilityValue;
	private TerminalRule tEM;
	private TerminalRule tNONE;
	private TerminalRule tLTRANS;
	private TerminalRule tRTRANS;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tSEMI;
	private TerminalRule tCOLON;
	private TerminalRule tCOMMA;
	private TerminalRule tDOT;
	private TerminalRule tLPARENS;
	private TerminalRule tRPARENS;
	private TerminalRule tLBRACKET;
	private TerminalRule tRBRACKET;
	private TerminalRule tLCURLY;
	private TerminalRule tRCURLY;
	private TerminalRule tASSIGN;
	private TerminalRule tAPPEND;
	private REALElements pREAL;
	private QNAMEElements pQNAME;
	private PNAMEElements pPNAME;
	private INAMEElements pINAME;
	private QCREFElements pQCREF;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ErrorModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import 'platform:/resource/org.osate.xtext.aadl2/src-gen/org/osate/aadl2/Aadl2.ecore' as aadl2
	////import "http://www.osate.org/aadl2/properties/Properties" as props
	//EM2AnnexSubclause:
	//	"annex" EM "{**" (types+=ErrorTypeSet | ebsm+=ErrorBehaviorStateMachine | ep+=ErrorPropagations |
	//	ceb+=ComponentErrorBehavior | compeb+=CompositeErrorBehavior)+ "**}" SEMI;
	public EM2AnnexSubclauseElements getEM2AnnexSubclauseAccess() {
		return (pEM2AnnexSubclause != null) ? pEM2AnnexSubclause : (pEM2AnnexSubclause = new EM2AnnexSubclauseElements());
	}
	
	public ParserRule getEM2AnnexSubclauseRule() {
		return getEM2AnnexSubclauseAccess().getRule();
	}

	//ErrorTypeSet:
	//	"errors" name=ID types+=ErrorType+ features+=Feature* "end" ID SEMI;
	public ErrorTypeSetElements getErrorTypeSetAccess() {
		return (pErrorTypeSet != null) ? pErrorTypeSet : (pErrorTypeSet = new ErrorTypeSetElements());
	}
	
	public ParserRule getErrorTypeSetRule() {
		return getErrorTypeSetAccess().getRule();
	}

	//ErrorTypeSetRefinement returns ErrorTypeSet:
	//	"errors" name=ID "extends" extends= // [ErrorTypeSet|QCREF] across packages
	//	[ErrorTypeSet] (types+=ErrorType | refinements+=ErrorTypeRefinement)+ "end" ID;
	public ErrorTypeSetRefinementElements getErrorTypeSetRefinementAccess() {
		return (pErrorTypeSetRefinement != null) ? pErrorTypeSetRefinement : (pErrorTypeSetRefinement = new ErrorTypeSetRefinementElements());
	}
	
	public ParserRule getErrorTypeSetRefinementRule() {
		return getErrorTypeSetRefinementAccess().getRule();
	}

	//ErrorType:
	//	name=ID COLON "error" "type" (ASSIGN LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)? SEMI;
	public ErrorTypeElements getErrorTypeAccess() {
		return (pErrorType != null) ? pErrorType : (pErrorType = new ErrorTypeElements());
	}
	
	public ParserRule getErrorTypeRule() {
		return getErrorTypeAccess().getRule();
	}

	//Feature:
	//	"feature" name=ID SEMI;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//ErrorTypeRefinement:
	//	name=[ErrorType] COLON "refined" "to" (APPEND LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)?
	//	SEMI;
	public ErrorTypeRefinementElements getErrorTypeRefinementAccess() {
		return (pErrorTypeRefinement != null) ? pErrorTypeRefinement : (pErrorTypeRefinement = new ErrorTypeRefinementElements());
	}
	
	public ParserRule getErrorTypeRefinementRule() {
		return getErrorTypeRefinementAccess().getRule();
	}

	//ErrorPropagations:
	//	"error" "propagations" "use" importedNamespace=QualifiedNameWithWildCard //use=[ErrorTypeSet|ID] SEMI
	//	SEMI ("propagations" propagations+=ErrorPropagation+)? ("flows" flows+=ErrorFlow+)? "end" SEMI;
	public ErrorPropagationsElements getErrorPropagationsAccess() {
		return (pErrorPropagations != null) ? pErrorPropagations : (pErrorPropagations = new ErrorPropagationsElements());
	}
	
	public ParserRule getErrorPropagationsRule() {
		return getErrorPropagationsAccess().getRule();
	}

	//ErrorPropagation:
	//	type=[ErrorType] COLON mask?="not"? direction=PropagationDirection? "propagation" "applies" "to" (binding+=BindingKind
	//	| appliesto+=[Feature]) (COMMA (binding+=BindingKind | appliesto+=[Feature]))* SEMI;
	public ErrorPropagationElements getErrorPropagationAccess() {
		return (pErrorPropagation != null) ? pErrorPropagation : (pErrorPropagation = new ErrorPropagationElements());
	}
	
	public ParserRule getErrorPropagationRule() {
		return getErrorPropagationAccess().getRule();
	}

	//enum PropagationDirection:
	//	IN="in" | OUT="out";
	public PropagationDirectionElements getPropagationDirectionAccess() {
		return (unknownRulePropagationDirection != null) ? unknownRulePropagationDirection : (unknownRulePropagationDirection = new PropagationDirectionElements());
	}
	
	public EnumRule getPropagationDirectionRule() {
		return getPropagationDirectionAccess().getRule();
	}

	//BindingKind:
	//	"processor" | "memory" | "bus" | "device" | "system" | "bindings";
	public BindingKindElements getBindingKindAccess() {
		return (pBindingKind != null) ? pBindingKind : (pBindingKind = new BindingKindElements());
	}
	
	public ParserRule getBindingKindRule() {
		return getBindingKindAccess().getRule();
	}

	//ErrorFlow:
	//	ErrorSource | ErrorSink | ErrorPath;
	public ErrorFlowElements getErrorFlowAccess() {
		return (pErrorFlow != null) ? pErrorFlow : (pErrorFlow = new ErrorFlowElements());
	}
	
	public ParserRule getErrorFlowRule() {
		return getErrorFlowAccess().getRule();
	}

	//ErrorSource:
	//	"error" "source" outgoing=ErrorPropagationReference SEMI;
	public ErrorSourceElements getErrorSourceAccess() {
		return (pErrorSource != null) ? pErrorSource : (pErrorSource = new ErrorSourceElements());
	}
	
	public ParserRule getErrorSourceRule() {
		return getErrorSourceAccess().getRule();
	}

	//ErrorSink:
	//	"error" "sink" incoming=ErrorPropagationReference SEMI;
	public ErrorSinkElements getErrorSinkAccess() {
		return (pErrorSink != null) ? pErrorSink : (pErrorSink = new ErrorSinkElements());
	}
	
	public ParserRule getErrorSinkRule() {
		return getErrorSinkAccess().getRule();
	}

	//ErrorPath:
	//	"error" "path" incoming=ErrorPropagationReference "->" outgoing=ErrorPropagationReference SEMI;
	public ErrorPathElements getErrorPathAccess() {
		return (pErrorPath != null) ? pErrorPath : (pErrorPath = new ErrorPathElements());
	}
	
	public ParserRule getErrorPathRule() {
		return getErrorPathAccess().getRule();
	}

	//ErrorPropagationReference:
	//	(binding=BindingKind | feature=[Feature] | self?="self") LBRACKET errortype=[ErrorType] RBRACKET;
	public ErrorPropagationReferenceElements getErrorPropagationReferenceAccess() {
		return (pErrorPropagationReference != null) ? pErrorPropagationReference : (pErrorPropagationReference = new ErrorPropagationReferenceElements());
	}
	
	public ParserRule getErrorPropagationReferenceRule() {
		return getErrorPropagationReferenceAccess().getRule();
	}

	//ErrorBehaviorStateMachine:
	//	"error" "model" name=ID ("extends" extends=[ErrorBehaviorStateMachine])? ("use"
	//	importedNamespace=QualifiedNameWithWildCard SEMI)? //use=[ErrorTypeSet|ID] SEMI )?
	//	("events" events+=ErrorBehaviorEvent+)? ("states" states+=ErrorBehaviorState+)? ("transitions"
	//	transitions+=ErrorBehaviorTransition+)? "end" ID SEMI;
	public ErrorBehaviorStateMachineElements getErrorBehaviorStateMachineAccess() {
		return (pErrorBehaviorStateMachine != null) ? pErrorBehaviorStateMachine : (pErrorBehaviorStateMachine = new ErrorBehaviorStateMachineElements());
	}
	
	public ParserRule getErrorBehaviorStateMachineRule() {
		return getErrorBehaviorStateMachineAccess().getRule();
	}

	//ErrorBehaviorEvent:
	//	ErrorEvent | RepairEvent;
	public ErrorBehaviorEventElements getErrorBehaviorEventAccess() {
		return (pErrorBehaviorEvent != null) ? pErrorBehaviorEvent : (pErrorBehaviorEvent = new ErrorBehaviorEventElements());
	}
	
	public ParserRule getErrorBehaviorEventRule() {
		return getErrorBehaviorEventAccess().getRule();
	}

	//// add event condition and properties
	//ErrorEvent:
	//	name=ID COLON "error" "event" SEMI;
	public ErrorEventElements getErrorEventAccess() {
		return (pErrorEvent != null) ? pErrorEvent : (pErrorEvent = new ErrorEventElements());
	}
	
	public ParserRule getErrorEventRule() {
		return getErrorEventAccess().getRule();
	}

	////add repair initiator and properties
	//RepairEvent:
	//	name=ID COLON "repair" "event" SEMI;
	public RepairEventElements getRepairEventAccess() {
		return (pRepairEvent != null) ? pRepairEvent : (pRepairEvent = new RepairEventElements());
	}
	
	public ParserRule getRepairEventRule() {
		return getRepairEventAccess().getRule();
	}

	//ErrorBehaviorState:
	//	name=ID intial?="initial"? "state" (LCURLY properties+=PropertyAssociation+ RCURLY)? SEMI;
	public ErrorBehaviorStateElements getErrorBehaviorStateAccess() {
		return (pErrorBehaviorState != null) ? pErrorBehaviorState : (pErrorBehaviorState = new ErrorBehaviorStateElements());
	}
	
	public ParserRule getErrorBehaviorStateRule() {
		return getErrorBehaviorStateAccess().getRule();
	}

	//ErrorBehaviorTransition:
	//	TriggeredTransition | BranchTransition;
	public ErrorBehaviorTransitionElements getErrorBehaviorTransitionAccess() {
		return (pErrorBehaviorTransition != null) ? pErrorBehaviorTransition : (pErrorBehaviorTransition = new ErrorBehaviorTransitionElements());
	}
	
	public ParserRule getErrorBehaviorTransitionRule() {
		return getErrorBehaviorTransitionAccess().getRule();
	}

	//TriggeredTransition:
	//	name=ID COLON source=[ErrorBehaviorState] ("->" | LTRANS events+=[ErrorBehaviorEvent] (COMMA
	//	events+=[ErrorBehaviorEvent])* RTRANS) destination=[ErrorBehaviorState] SEMI;
	public TriggeredTransitionElements getTriggeredTransitionAccess() {
		return (pTriggeredTransition != null) ? pTriggeredTransition : (pTriggeredTransition = new TriggeredTransitionElements());
	}
	
	public ParserRule getTriggeredTransitionRule() {
		return getTriggeredTransitionAccess().getRule();
	}

	//BranchTransition:
	//	source=[ErrorBehaviorState] "-(" value=BranchValue ")->" destination=[ErrorBehaviorState] SEMI;
	public BranchTransitionElements getBranchTransitionAccess() {
		return (pBranchTransition != null) ? pBranchTransition : (pBranchTransition = new BranchTransitionElements());
	}
	
	public ParserRule getBranchTransitionRule() {
		return getBranchTransitionAccess().getRule();
	}

	//BranchValue:
	//	REAL | "others";
	public BranchValueElements getBranchValueAccess() {
		return (pBranchValue != null) ? pBranchValue : (pBranchValue = new BranchValueElements());
	}
	
	public ParserRule getBranchValueRule() {
		return getBranchValueAccess().getRule();
	}

	//ComponentErrorBehavior:
	//	"error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
	//	SEMI ("transition" "conditions" transitionCondition+=TransitionCondition+)? ("propagation" "conditions"
	//	propagationCondition+=PropagationCondition+)? ("detection" "events" detectionEvent+=DetectionEvent+)? "end" SEMI;
	public ComponentErrorBehaviorElements getComponentErrorBehaviorAccess() {
		return (pComponentErrorBehavior != null) ? pComponentErrorBehavior : (pComponentErrorBehavior = new ComponentErrorBehaviorElements());
	}
	
	public ParserRule getComponentErrorBehaviorRule() {
		return getComponentErrorBehaviorAccess().getRule();
	}

	//QualifiedName:
	//	ID (DOT ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//TransitionCondition:
	//	(errorTransition=[TriggeredTransition] | mask?="mask") "when" condition=TriggerConditionExpression SEMI;
	public TransitionConditionElements getTransitionConditionAccess() {
		return (pTransitionCondition != null) ? pTransitionCondition : (pTransitionCondition = new TransitionConditionElements());
	}
	
	public ParserRule getTransitionConditionRule() {
		return getTransitionConditionAccess().getRule();
	}

	//TriggerConditionExpression:
	//	OrExpression | OrmoreExpression | OrlessExpression | OthersExpression;
	public TriggerConditionExpressionElements getTriggerConditionExpressionAccess() {
		return (pTriggerConditionExpression != null) ? pTriggerConditionExpression : (pTriggerConditionExpression = new TriggerConditionExpressionElements());
	}
	
	public ParserRule getTriggerConditionExpressionRule() {
		return getTriggerConditionExpressionAccess().getRule();
	}

	//AndExpression returns TriggerConditionExpression:
	//	Primary ({AndExpression.operands+=current} "and" operands+=Primary)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OrExpression returns TriggerConditionExpression:
	//	AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//OrmoreExpression:
	//	count=INT "ormore" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS;
	public OrmoreExpressionElements getOrmoreExpressionAccess() {
		return (pOrmoreExpression != null) ? pOrmoreExpression : (pOrmoreExpression = new OrmoreExpressionElements());
	}
	
	public ParserRule getOrmoreExpressionRule() {
		return getOrmoreExpressionAccess().getRule();
	}

	//OrlessExpression:
	//	count=INT "orless" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS;
	public OrlessExpressionElements getOrlessExpressionAccess() {
		return (pOrlessExpression != null) ? pOrlessExpression : (pOrlessExpression = new OrlessExpressionElements());
	}
	
	public ParserRule getOrlessExpressionRule() {
		return getOrlessExpressionAccess().getRule();
	}

	//OthersExpression:
	//	{OthersExpression} "others";
	public OthersExpressionElements getOthersExpressionAccess() {
		return (pOthersExpression != null) ? pOthersExpression : (pOthersExpression = new OthersExpressionElements());
	}
	
	public ParserRule getOthersExpressionRule() {
		return getOthersExpressionAccess().getRule();
	}

	//Primary returns TriggerConditionExpression:
	//	ErrorEventReference | ErrorPropagationReference | WorkingReference | LPARENS TriggerConditionExpression RPARENS;
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//ErrorEventReference:
	//	"event" reference=[ErrorBehaviorEvent];
	public ErrorEventReferenceElements getErrorEventReferenceAccess() {
		return (pErrorEventReference != null) ? pErrorEventReference : (pErrorEventReference = new ErrorEventReferenceElements());
	}
	
	public ParserRule getErrorEventReferenceRule() {
		return getErrorEventReferenceAccess().getRule();
	}

	//WorkingReference:
	//	(binding=BindingKind | feature=[Feature] | self?="self") LBRACKET working?="working" RBRACKET;
	public WorkingReferenceElements getWorkingReferenceAccess() {
		return (pWorkingReference != null) ? pWorkingReference : (pWorkingReference = new WorkingReferenceElements());
	}
	
	public ParserRule getWorkingReferenceRule() {
		return getWorkingReferenceAccess().getRule();
	}

	//PropagationCondition:
	//	(outPropagation=[ErrorPropagation] | mask?="mask" | working?="working") "when" (state=[ErrorBehaviorState] "and")?
	//	condition=TriggerConditionExpression ("applies" "to" feature+=[Feature] (COMMA feature+=[Feature])*)? SEMI;
	public PropagationConditionElements getPropagationConditionAccess() {
		return (pPropagationCondition != null) ? pPropagationCondition : (pPropagationCondition = new PropagationConditionElements());
	}
	
	public ParserRule getPropagationConditionRule() {
		return getPropagationConditionAccess().getRule();
	}

	//DetectionEvent:
	//	(self?="self" DOT)? eventPort=[Feature] "when" condition=TriggerConditionExpression SEMI;
	public DetectionEventElements getDetectionEventAccess() {
		return (pDetectionEvent != null) ? pDetectionEvent : (pDetectionEvent = new DetectionEventElements());
	}
	
	public ParserRule getDetectionEventRule() {
		return getDetectionEventAccess().getRule();
	}

	//CompositeErrorBehavior:
	//	"composite" "error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
	//	SEMI ("states" state+=CompositeState+)? "end" SEMI;
	public CompositeErrorBehaviorElements getCompositeErrorBehaviorAccess() {
		return (pCompositeErrorBehavior != null) ? pCompositeErrorBehavior : (pCompositeErrorBehavior = new CompositeErrorBehaviorElements());
	}
	
	public ParserRule getCompositeErrorBehaviorRule() {
		return getCompositeErrorBehaviorAccess().getRule();
	}

	//CompositeState:
	//	state=[ErrorBehaviorState] "when" condition=StateConditionExpression SEMI;
	public CompositeStateElements getCompositeStateAccess() {
		return (pCompositeState != null) ? pCompositeState : (pCompositeState = new CompositeStateElements());
	}
	
	public ParserRule getCompositeStateRule() {
		return getCompositeStateAccess().getRule();
	}

	//StateConditionExpression:
	//	OrSExpression | OrmoreSExpression | OrlessSExpression | OthersExpression;
	public StateConditionExpressionElements getStateConditionExpressionAccess() {
		return (pStateConditionExpression != null) ? pStateConditionExpression : (pStateConditionExpression = new StateConditionExpressionElements());
	}
	
	public ParserRule getStateConditionExpressionRule() {
		return getStateConditionExpressionAccess().getRule();
	}

	//AndSExpression returns StateConditionExpression:
	//	Primary ({AndExpression.operands+=current} "and" operands+=Primary)*;
	public AndSExpressionElements getAndSExpressionAccess() {
		return (pAndSExpression != null) ? pAndSExpression : (pAndSExpression = new AndSExpressionElements());
	}
	
	public ParserRule getAndSExpressionRule() {
		return getAndSExpressionAccess().getRule();
	}

	//OrSExpression returns StateConditionExpression:
	//	AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*;
	public OrSExpressionElements getOrSExpressionAccess() {
		return (pOrSExpression != null) ? pOrSExpression : (pOrSExpression = new OrSExpressionElements());
	}
	
	public ParserRule getOrSExpressionRule() {
		return getOrSExpressionAccess().getRule();
	}

	//OrmoreSExpression returns OrmoreExpression:
	//	count=INT "ormore" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS;
	public OrmoreSExpressionElements getOrmoreSExpressionAccess() {
		return (pOrmoreSExpression != null) ? pOrmoreSExpression : (pOrmoreSExpression = new OrmoreSExpressionElements());
	}
	
	public ParserRule getOrmoreSExpressionRule() {
		return getOrmoreSExpressionAccess().getRule();
	}

	//OrlessSExpression returns OrlessExpression:
	//	count=INT "orless" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS;
	public OrlessSExpressionElements getOrlessSExpressionAccess() {
		return (pOrlessSExpression != null) ? pOrlessSExpression : (pOrlessSExpression = new OrlessSExpressionElements());
	}
	
	public ParserRule getOrlessSExpressionRule() {
		return getOrlessSExpressionAccess().getRule();
	}

	//SPrimary returns StateConditionExpression:
	//	SubcomponentStateReference | LPARENS StateConditionExpression RPARENS;
	public SPrimaryElements getSPrimaryAccess() {
		return (pSPrimary != null) ? pSPrimary : (pSPrimary = new SPrimaryElements());
	}
	
	public ParserRule getSPrimaryRule() {
		return getSPrimaryAccess().getRule();
	}

	//SubcomponentStateReference:
	//	subcomponent=[Feature] LBRACKET errortype=[ErrorBehaviorState] RBRACKET;
	public SubcomponentStateReferenceElements getSubcomponentStateReferenceAccess() {
		return (pSubcomponentStateReference != null) ? pSubcomponentStateReference : (pSubcomponentStateReference = new SubcomponentStateReferenceElements());
	}
	
	public ParserRule getSubcomponentStateReferenceRule() {
		return getSubcomponentStateReferenceAccess().getRule();
	}

	//PropertyAssociation:
	//	name=ID ASSIGN value=PropertyExpression SEMI;
	public PropertyAssociationElements getPropertyAssociationAccess() {
		return (pPropertyAssociation != null) ? pPropertyAssociation : (pPropertyAssociation = new PropertyAssociationElements());
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//PropertyExpression:
	//	Literal | ProbabilityValue;
	public PropertyExpressionElements getPropertyExpressionAccess() {
		return (pPropertyExpression != null) ? pPropertyExpression : (pPropertyExpression = new PropertyExpressionElements());
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//Literal:
	//	name=ID;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//ProbabilityValue:
	//	number=REAL distribution=ID;
	public ProbabilityValueElements getProbabilityValueAccess() {
		return (pProbabilityValue != null) ? pProbabilityValue : (pProbabilityValue = new ProbabilityValueElements());
	}
	
	public ParserRule getProbabilityValueRule() {
		return getProbabilityValueAccess().getRule();
	}

	//terminal EM:
	//	"error_model";
	public TerminalRule getEMRule() {
		return (tEM != null) ? tEM : (tEM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EM"));
	} 

	//terminal NONE:
	//	"none" SEMI;
	public TerminalRule getNONERule() {
		return (tNONE != null) ? tNONE : (tNONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NONE"));
	} 

	//terminal LTRANS:
	//	"-[";
	public TerminalRule getLTRANSRule() {
		return (tLTRANS != null) ? tLTRANS : (tLTRANS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTRANS"));
	} 

	//terminal RTRANS:
	//	"]->";
	public TerminalRule getRTRANSRule() {
		return (tRTRANS != null) ? tRTRANS : (tRTRANS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RTRANS"));
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal SEMI:
	//	";";
	public TerminalRule getSEMIRule() {
		return (tSEMI != null) ? tSEMI : (tSEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMI"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal LPARENS:
	//	"(";
	public TerminalRule getLPARENSRule() {
		return (tLPARENS != null) ? tLPARENS : (tLPARENS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPARENS"));
	} 

	//terminal RPARENS:
	//	")";
	public TerminalRule getRPARENSRule() {
		return (tRPARENS != null) ? tRPARENS : (tRPARENS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPARENS"));
	} 

	//terminal LBRACKET:
	//	"[";
	public TerminalRule getLBRACKETRule() {
		return (tLBRACKET != null) ? tLBRACKET : (tLBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACKET"));
	} 

	//terminal RBRACKET:
	//	"]";
	public TerminalRule getRBRACKETRule() {
		return (tRBRACKET != null) ? tRBRACKET : (tRBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACKET"));
	} 

	//terminal LCURLY:
	//	"{";
	public TerminalRule getLCURLYRule() {
		return (tLCURLY != null) ? tLCURLY : (tLCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCURLY"));
	} 

	//terminal RCURLY:
	//	"}";
	public TerminalRule getRCURLYRule() {
		return (tRCURLY != null) ? tRCURLY : (tRCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RCURLY"));
	} 

	//terminal ASSIGN:
	//	"=>";
	public TerminalRule getASSIGNRule() {
		return (tASSIGN != null) ? tASSIGN : (tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN"));
	} 

	//terminal APPEND:
	//	"+=>";
	public TerminalRule getAPPENDRule() {
		return (tAPPEND != null) ? tAPPEND : (tAPPEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "APPEND"));
	} 

	//REAL:
	//	INT DOT INT;
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//QNAME:
	//	ID DOT INAME;
	public QNAMEElements getQNAMEAccess() {
		return (pQNAME != null) ? pQNAME : (pQNAME = new QNAMEElements());
	}
	
	public ParserRule getQNAMERule() {
		return getQNAMEAccess().getRule();
	}

	//PNAME:
	//	ID ("::" ID)*;
	public PNAMEElements getPNAMEAccess() {
		return (pPNAME != null) ? pPNAME : (pPNAME = new PNAMEElements());
	}
	
	public ParserRule getPNAMERule() {
		return getPNAMEAccess().getRule();
	}

	//INAME:
	//	ID;
	public INAMEElements getINAMEAccess() {
		return (pINAME != null) ? pINAME : (pINAME = new INAMEElements());
	}
	
	public ParserRule getINAMERule() {
		return getINAMEAccess().getRule();
	}

	//QCREF:
	//	(ID "::")* ID (DOT ID)?;
	public QCREFElements getQCREFAccess() {
		return (pQCREF != null) ? pQCREF : (pQCREF = new QCREFElements());
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
