/*
* generated by Xtext
*/
package org.osate.xtext.aadl2.errormodel.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.osate.xtext.aadl2.errormodel.errorModel.AndExpression;
import org.osate.xtext.aadl2.errormodel.errorModel.BranchTransition;
import org.osate.xtext.aadl2.errormodel.errorModel.ComponentErrorBehavior;
import org.osate.xtext.aadl2.errormodel.errorModel.DetectionEvent;
import org.osate.xtext.aadl2.errormodel.errorModel.EM2AnnexSubclause;
import org.osate.xtext.aadl2.errormodel.errorModel.ErrorEventReference;
import org.osate.xtext.aadl2.errormodel.errorModel.ErrorPropagation;
import org.osate.xtext.aadl2.errormodel.errorModel.ErrorPropagationReference;
import org.osate.xtext.aadl2.errormodel.errorModel.ErrorPropagations;
import org.osate.xtext.aadl2.errormodel.errorModel.ErrorType;
import org.osate.xtext.aadl2.errormodel.errorModel.ErrorTypeSet;
import org.osate.xtext.aadl2.errormodel.errorModel.OrExpression;
import org.osate.xtext.aadl2.errormodel.errorModel.OrlessExpression;
import org.osate.xtext.aadl2.errormodel.errorModel.OrmoreExpression;
import org.osate.xtext.aadl2.errormodel.errorModel.OthersExpression;
import org.osate.xtext.aadl2.errormodel.errorModel.PropagationCondition;
import org.osate.xtext.aadl2.errormodel.errorModel.TransitionCondition;
import org.osate.xtext.aadl2.errormodel.errorModel.TriggerConditionExpression;
import org.osate.xtext.aadl2.errormodel.errorModel.WorkingReference;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class ErrorModelLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public ErrorModelLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}


	//Labels and icons can be computed like this:
	
	String text(AndExpression ele) {
		  return "and";
		}
	String text(OrExpression ele) {
		  return "or";
		}
	String text(OrmoreExpression ele) {
		  return "ormore "+ele.getCount();
		}
	String text(OrlessExpression ele) {
		  return "orless "+ele.getCount();
		}
	String text(OthersExpression ele) {
		  return "others";
		}
	String text(TriggerConditionExpression ele) {
		  return "TCE";
		}
	String text(WorkingReference ele) {
		String s = ele.getBinding()!=null?ele.getBinding():
			ele.isSelf()?"self":ele.getFeature().getName();
		  return s+"[working]";
		}
	String text(ErrorEventReference ele) {
		String s = ele.getReference()!=null?ele.getReference().getName():
			"";
		  return "event "+s;
		}
	String text(DetectionEvent ele) {
		String s = ele.isSelf()?"self.":ele.getEventPort().getName();
		  return "event "+s+" when";
		}
	String text(TransitionCondition ele) {
		String s = ele.isMask()?"mask":ele.getErrorTransition().getName();
		  return "transition "+s+" when";
		}
	String text(PropagationCondition ele) {
		String s = ele.isMask()?"mask":ele.getOutPropagation().getType().getName();
		  return "transition "+s+" when";
		}
	String text(ErrorPropagationReference ele) {
		String s = ele.getBinding()!=null?ele.getBinding():
			ele.isSelf()?"self":ele.getFeature().getName();
		  return s+"["+ele.getErrortype().getName()+"]";
		}
	String text(BranchTransition ele) {
		  return "Branch: probability "+ele.getValue();
		}
	String text(EM2AnnexSubclause ele) {
		  return "Error Model Annex";
		}
	String text(ErrorTypeSet ele) {
		  return "Error type set "+ele.getName();
		}
	String text(ErrorType ele) {
		  return "Error type "+ele.getName();
		}
	String text(ErrorPropagations ele) {
		  return "Error Propagations";
		}
	String text(ErrorPropagation ele) {
		  return "propagation "+(ele.getType()!=null?ele.getType().getName():
			  ele.isMask()?"mask":"");
		}
	String text(ComponentErrorBehavior ele) {
		  return "Component error behavior";
		}
//	 
//    String image(MyModel ele) {
//      return "MyModel.gif";
//    }
    

}
