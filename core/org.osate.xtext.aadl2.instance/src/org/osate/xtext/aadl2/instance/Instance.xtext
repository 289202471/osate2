grammar org.osate.xtext.aadl2.instance.Instance hidden(WS, SL_COMMENT)

import "http://aadl.info/AADL/2.0/instance" as instance
import "http://aadl.info/AADL/2.0" as aadl2

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SystemInstance returns instance::SystemInstance:
	category=ComponentCategory name=ID ':' componentImplementation=[aadl2::ComponentImplementation|IMPLREF] '{'
		(featureInstance+=FeatureInstance |
			componentInstance+=ComponentInstance |
			connectionInstance+=ConnectionInstance |
			flowSpecification+=FlowSpecificationInstance |
			endToEndFlow+=EndToEndFlowInstance |
			modeInstance+=ModeInstance |
			modeTransitionInstance+=ModeTransitionInstance |
			systemOperationMode+=SystemOperationMode
		)*
	'}'
;

FeatureInstance returns instance::FeatureInstance:
	direction=DirectionType category=FeatureCategory name=ID ('[' index=LONG ']')? ':' feature=[aadl2::Feature|FEATREF]
	('source' 'of' '(' (srcConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] | srcFlowSpec+=[instance::FlowSpecificationInstance]) (',' (srcConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] | srcFlowSpec+=[instance::FlowSpecificationInstance]))* ')')?
	('destination' 'of' '(' (dstConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] | dstFlowSpec+=[instance::FlowSpecificationInstance]) (',' (dstConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] | dstFlowSpec+=[instance::FlowSpecificationInstance]))* ')')? ('{'
		featureInstance+=FeatureInstance*
	'}')?
;
	
ComponentInstance returns instance::ComponentInstance:
	category=ComponentCategory name=ID ('[' index+=LONG ']')* ('in' 'modes' '(' inMode+=[instance::ModeInstance] (',' inMode+=[instance::ModeInstance])*')')? ':' subcomponent=[aadl2::Subcomponent|SUBREF]
	('source' 'of' '(' srcConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] (',' srcConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF])* ')')?
	('destination' 'of' '(' dstConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] (',' dstConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF])* ')')? ('{'
		(featureInstance+=FeatureInstance |
			componentInstance+=ComponentInstance |
			connectionInstance+=ConnectionInstance |
			flowSpecification+=FlowSpecificationInstance |
			endToEndFlow+=EndToEndFlowInstance |
			modeInstance+=ModeInstance |
			modeTransitionInstance+=ModeTransitionInstance
		)*
	'}')?
;

ConnectionInstance returns instance::ConnectionInstance:
	complete?='complete'? kind=ConnectionKind name=STRING ':' source=[instance::ConnectionInstanceEnd|INSTANCEREF] (bidirectional?='<->' | '->') destination=[instance::ConnectionInstanceEnd|INSTANCEREF] ('in' 'modes' '(' inSystemOperationMode+=[instance::SystemOperationMode|SOMREF] (',' inSystemOperationMode+=[instance::SystemOperationMode|SOMREF])* ')')? '{'
		connectionReference+=ConnectionReference+
	'}'
;

ConnectionReference returns instance::ConnectionReference:
	source=[instance::ConnectionInstanceEnd|INSTANCEREF] '->' destination=[instance::ConnectionInstanceEnd|INSTANCEREF] ':' connection=[aadl2::Connection|SUBREF] 'in' context=[instance::ComponentInstance|INSTANCEREFWITHPARENT]
;

FlowSpecificationInstance returns instance::FlowSpecificationInstance:
	'flow' name=ID '(' source=[instance::FeatureInstance|SIMPLEINSTANCEREF]? '->' destination=[instance::FeatureInstance|SIMPLEINSTANCEREF]? ')' ('in' 'modes' '(' inMode+=[instance::ModeInstance] (',' inMode+=[instance::ModeInstance])*')')? ':' flowSpecification=[aadl2::FlowSpecification|FEATREF]
;

EndToEndFlowInstance returns instance::EndToEndFlowInstance:
	'end' 'to' 'end' 'flow' name=ID (flowElement+=[instance::FlowElementInstance|FLOWELEMENTREF] ('->' flowElement+=[instance::FlowElementInstance|FLOWELEMENTREF])*)? ('in' 'modes' '(' inSystemOperationMode+=[instance::SystemOperationMode|SOMREF] (',' inSystemOperationMode+=[instance::SystemOperationMode|SOMREF])* ')')? ':' endToEndFlow=[aadl2::EndToEndFlow|SUBREF]
;

ModeInstance returns instance::ModeInstance:
	initial?='initial'? derived?='derived'? 'mode' name=ID ('=' (parent+=[instance::ModeInstance] | ('(' parent+=[instance::ModeInstance] (',' parent+=[instance::ModeInstance])+ ')')))?
	('source' 'of' '(' srcModeTransition+=[instance::ModeTransitionInstance|SOMREF] (',' srcModeTransition+=[instance::ModeTransitionInstance|SOMREF])* ')')?
	('destination' 'of' '(' dstModeTransition+=[instance::ModeTransitionInstance|SOMREF] (',' dstModeTransition+=[instance::ModeTransitionInstance|SOMREF])* ')')?
	':' mode=[aadl2::Mode|MODEREF]
;

ModeTransitionInstance returns instance::ModeTransitionInstance:
	'mode' 'transition' name=MTNAME source=[instance::ModeInstance] '->' destination=[instance::ModeInstance] ':' modeTransition=[aadl2::ModeTransition|MODEREF]
;
	
SystemOperationMode returns instance::SystemOperationMode:
	'som' name=STRING (currentMode+=[instance::ModeInstance|MODEINSTREF] (',' currentMode+=[instance::ModeInstance|MODEINSTREF])*)?
;

DirectionType returns aadl2::DirectionType:
	'in' | 'out' | 'in' 'out'
;

FeatureCategory returns instance::FeatureCategory:
	'dataPort' | 'eventPort' | 'eventDataPort' | 'parameter' |
	'busAccess' | 'subprogramAccess' | 'subprogramGroupAccess' |
	'featureGroup' | 'abstractFeature'
;

ComponentCategory returns aadl2::ComponentCategory: 'abstract' | 'bus'|'data'
	| 'device' | 'memory' | 'process' | 'processor' | 'subprogram'
	| 'subprogram' 'group' | 'system' | 'thread' 'group'
	| 'thread' | 'virtual' 'bus' | 'virtual' 'processor';

ConnectionKind returns instance::ConnectionKind:
	'featureConnection' | 'accessConnection' | 'parameterConnection' |
	'portConnection' | 'modeTransitionConnection' | 'featureGroupConnection'
;

IMPLREF:
	(ID '::')+ ID '.' ID
;

FEATREF:
	(ID '::')+ ID '::' ID
;
	
SUBREF:
	(ID '::')+ ID '.' ID '::' ID
;

MODEREF:
	(ID '::')+ ID ('.' ID)? '::' ID
;

INSTANCEREF:
	ID ('[' LONG ']')* ('.' ID ('[' LONG ']')*)*
;

SIMPLEINSTANCEREF:
	ID ('[' LONG ']')? ('.' ID ('[' LONG ']')?)*
;

INSTANCEREFWITHPARENT:
	'parent' | (ID ('[' LONG ']')+ ('.' ID ('[' LONG ']')+)*)
;

CONNINSTREF:
	(LONG '.')? LONG
;

FLOWELEMENTREF:
	(ID ('[' LONG ']')* '.')* (LONG | ID ('[' LONG ']')*)
;

MODEINSTREF:
	(ID ('[' LONG ']')* '.')* ID
;

SOMREF:
	LONG
;

MTNAME:
	ID '.' ID '.' ID
;
	
terminal ID:	('a'..'z'
        |'A'..'Z'
        ) ( ('_')? ('a'..'z'
        |'A'..'Z'
        |'0'..'9'))*;

terminal LONG returns ecore::ELong:
	('0' .. '9')+
;

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 

terminal SL_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;
	

terminal WS			: (' '|'\t'|'\r'|'\n')+;


