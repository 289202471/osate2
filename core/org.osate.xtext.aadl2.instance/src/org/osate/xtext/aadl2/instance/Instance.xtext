grammar org.osate.xtext.aadl2.instance.Instance hidden(WS, SL_COMMENT)

import "http://aadl.info/AADL/2.0/instance" as instance
import "http://aadl.info/AADL/2.0" as aadl2

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SystemInstance returns instance::SystemInstance:
	category=ComponentCategory name=ID ':' componentImplementation=[aadl2::ComponentImplementation|IMPLREF] '{'
		(featureInstance+=FeatureInstance |
			componentInstance+=ComponentInstance |
			connectionInstance+=ConnectionInstance |
			systemOperationMode+=SystemOperationMode
		)*
	'}'
;

FeatureInstance returns instance::FeatureInstance:
	direction=DirectionType category=FeatureCategory name=ID ('[' index=LONG ']')? ':' feature=[aadl2::Feature|FEATREF]
	('source' 'of' '(' srcConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] (',' srcConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF])* ')')?
	('destination' 'of' '(' dstConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] (',' dstConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF])* ')')? ('{'
		featureInstance+=FeatureInstance*
	'}')?
;
	
ComponentInstance returns instance::ComponentInstance:
	category=ComponentCategory name=ID ('[' index+=LONG ']')* ':' subcomponent=[aadl2::Subcomponent|SUBREF]
	('source' 'of' '(' srcConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] (',' srcConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF])* ')')?
	('destination' 'of' '(' dstConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF] (',' dstConnectionInstance+=[instance::ConnectionInstance|CONNINSTREF])* ')')? ('{'
		(featureInstance+=FeatureInstance |
			componentInstance+=ComponentInstance |
			connectionInstance+=ConnectionInstance
		)*
	'}')?
;

ConnectionInstance returns instance::ConnectionInstance:
	complete?='complete'? kind=ConnectionKind name=STRING ':' source=[instance::ConnectionInstanceEnd|INSTANCEREF] (bidirectional?='<->' | '->') destination=[instance::ConnectionInstanceEnd|INSTANCEREF] '{'
		connectionReference+=ConnectionReference+
	'}'
;

ConnectionReference returns instance::ConnectionReference:
	source=[instance::ConnectionInstanceEnd|INSTANCEREF] '->' destination=[instance::ConnectionInstanceEnd|INSTANCEREF] ':' connection=[aadl2::Connection|SUBREF] 'in' context=[instance::ComponentInstance|INSTANCEREFWITHPARENT]
;
	
SystemOperationMode returns instance::SystemOperationMode:
	'som' name=STRING
;

DirectionType returns aadl2::DirectionType:
	'in' | 'out' | 'in' 'out'
;

FeatureCategory returns instance::FeatureCategory:
	'dataPort' | 'eventPort' | 'eventDataPort' | 'parameter' |
	'busAccess' | 'subprogramAccess' | 'subprogramGroupAccess' |
	'featureGroup' | 'abstractFeature'
;

ComponentCategory returns aadl2::ComponentCategory: 'abstract' | 'bus'|'data'
	| 'device' | 'memory' | 'process' | 'processor' | 'subprogram'
	| 'subprogram' 'group' | 'system' | 'thread' 'group'
	| 'thread' | 'virtual' 'bus' | 'virtual' 'processor';

ConnectionKind returns instance::ConnectionKind:
	'featureConnection' | 'accessConnection' | 'parameterConnection' |
	'portConnection' | 'modeTransitionConnection' | 'featureGroupConnection'
;

IMPLREF:
	(ID '::')+ ID '.' ID
;

FEATREF:
	(ID '::')+ ID '::' ID
;
	
SUBREF:
	(ID '::')+ ID '.' ID '::' ID
;

INSTANCEREF:
	ID ('[' LONG ']')* ('.' ID ('[' LONG ']')*)*
;

INSTANCEREFWITHPARENT:
	'parent' | (ID ('[' LONG ']')+ ('.' ID ('[' LONG ']')+)*)
;

CONNINSTREF:
	(LONG '.')? LONG
;
	
terminal ID:	('a'..'z'
        |'A'..'Z'
        ) ( ('_')? ('a'..'z'
        |'A'..'Z'
        |'0'..'9'))*;

terminal LONG returns ecore::ELong:
	('0' .. '9')+
;

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 

terminal SL_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;
	

terminal WS			: (' '|'\t'|'\r'|'\n')+;


