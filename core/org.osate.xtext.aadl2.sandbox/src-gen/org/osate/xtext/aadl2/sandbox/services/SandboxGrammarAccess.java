/*
* generated by Xtext
*/

package org.osate.xtext.aadl2.sandbox.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SandboxGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SandboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sandbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSandboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSystemInstanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSystemInstanceSystemConfigurationParserRuleCall_2_0 = (RuleCall)cSystemInstanceAssignment_2.eContents().get(0);
		
		//Sandbox:
		//	"sandbox" name=ID systemInstance+=SystemConfiguration;
		public ParserRule getRule() { return rule; }

		//"sandbox" name=ID systemInstance+=SystemConfiguration
		public Group getGroup() { return cGroup; }

		//"sandbox"
		public Keyword getSandboxKeyword_0() { return cSandboxKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//systemInstance+=SystemConfiguration
		public Assignment getSystemInstanceAssignment_2() { return cSystemInstanceAssignment_2; }

		//SystemConfiguration
		public RuleCall getSystemInstanceSystemConfigurationParserRuleCall_2_0() { return cSystemInstanceSystemConfigurationParserRuleCall_2_0; }
	}

	public class SystemConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInstanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSystemImplementationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSystemImplementationEObjectCrossReference_4_0 = (CrossReference)cSystemImplementationAssignment_4.eContents().get(0);
		private final RuleCall cSystemImplementationEObjectQIREFParserRuleCall_4_0_1 = (RuleCall)cSystemImplementationEObjectCrossReference_4_0.eContents().get(1);
		private final Assignment cSystemInstanceProxyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSystemInstanceProxySystemInstanceProxyParserRuleCall_5_0 = (RuleCall)cSystemInstanceProxyAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SystemConfiguration:
		//	"system" "instance" name=ID "from" systemImplementation=[ecore::EObject|QIREF]
		//	systemInstanceProxy=SystemInstanceProxy? ";";
		public ParserRule getRule() { return rule; }

		//"system" "instance" name=ID "from" systemImplementation=[ecore::EObject|QIREF] systemInstanceProxy=SystemInstanceProxy?
		//";"
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//"instance"
		public Keyword getInstanceKeyword_1() { return cInstanceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }

		//systemImplementation=[ecore::EObject|QIREF]
		public Assignment getSystemImplementationAssignment_4() { return cSystemImplementationAssignment_4; }

		//[ecore::EObject|QIREF]
		public CrossReference getSystemImplementationEObjectCrossReference_4_0() { return cSystemImplementationEObjectCrossReference_4_0; }

		//QIREF
		public RuleCall getSystemImplementationEObjectQIREFParserRuleCall_4_0_1() { return cSystemImplementationEObjectQIREFParserRuleCall_4_0_1; }

		//systemInstanceProxy=SystemInstanceProxy?
		public Assignment getSystemInstanceProxyAssignment_5() { return cSystemInstanceProxyAssignment_5; }

		//SystemInstanceProxy
		public RuleCall getSystemInstanceProxySystemInstanceProxyParserRuleCall_5_0() { return cSystemInstanceProxySystemInstanceProxyParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class SystemInstanceProxyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemInstanceProxy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInstanceRefEObjectCrossReference_1_0 = (CrossReference)cInstanceRefAssignment_1.eContents().get(0);
		private final RuleCall cInstanceRefEObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cInstanceRefEObjectCrossReference_1_0.eContents().get(1);
		
		//SystemInstanceProxy:
		//	"to" instanceRef=[ecore::EObject];
		public ParserRule getRule() { return rule; }

		//"to" instanceRef=[ecore::EObject]
		public Group getGroup() { return cGroup; }

		//"to"
		public Keyword getToKeyword_0() { return cToKeyword_0; }

		//instanceRef=[ecore::EObject]
		public Assignment getInstanceRefAssignment_1() { return cInstanceRefAssignment_1; }

		//[ecore::EObject]
		public CrossReference getInstanceRefEObjectCrossReference_1_0() { return cInstanceRefEObjectCrossReference_1_0; }

		//ID
		public RuleCall getInstanceRefEObjectIDTerminalRuleCall_1_0_1() { return cInstanceRefEObjectIDTerminalRuleCall_1_0_1; }
	}

	public class QIREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QIREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// component implementation anme
		//QIREF:
		//	(ID "::")* ID "." ID;
		public ParserRule getRule() { return rule; }

		//(ID "::")* ID "." ID
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
	}

	public class QPREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QPREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QPREF:
		//	(ID "::")* ID;
		public ParserRule getRule() { return rule; }

		//(ID "::")* ID
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private SandboxElements pSandbox;
	private SystemConfigurationElements pSystemConfiguration;
	private SystemInstanceProxyElements pSystemInstanceProxy;
	private QIREFElements pQIREF;
	private QPREFElements pQPREF;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SandboxGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Sandbox:
	//	"sandbox" name=ID systemInstance+=SystemConfiguration;
	public SandboxElements getSandboxAccess() {
		return (pSandbox != null) ? pSandbox : (pSandbox = new SandboxElements());
	}
	
	public ParserRule getSandboxRule() {
		return getSandboxAccess().getRule();
	}

	//SystemConfiguration:
	//	"system" "instance" name=ID "from" systemImplementation=[ecore::EObject|QIREF]
	//	systemInstanceProxy=SystemInstanceProxy? ";";
	public SystemConfigurationElements getSystemConfigurationAccess() {
		return (pSystemConfiguration != null) ? pSystemConfiguration : (pSystemConfiguration = new SystemConfigurationElements());
	}
	
	public ParserRule getSystemConfigurationRule() {
		return getSystemConfigurationAccess().getRule();
	}

	//SystemInstanceProxy:
	//	"to" instanceRef=[ecore::EObject];
	public SystemInstanceProxyElements getSystemInstanceProxyAccess() {
		return (pSystemInstanceProxy != null) ? pSystemInstanceProxy : (pSystemInstanceProxy = new SystemInstanceProxyElements());
	}
	
	public ParserRule getSystemInstanceProxyRule() {
		return getSystemInstanceProxyAccess().getRule();
	}

	//// component implementation anme
	//QIREF:
	//	(ID "::")* ID "." ID;
	public QIREFElements getQIREFAccess() {
		return (pQIREF != null) ? pQIREF : (pQIREF = new QIREFElements());
	}
	
	public ParserRule getQIREFRule() {
		return getQIREFAccess().getRule();
	}

	//QPREF:
	//	(ID "::")* ID;
	public QPREFElements getQPREFAccess() {
		return (pQPREF != null) ? pQPREF : (pQPREF = new QPREFElements());
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
