/*
* generated by Xtext
*/
package org.osate.xtext.aadl2.sandbox.ui.outline;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EStructuralFeatureNode;
import org.osate.aadl2.instance.ComponentInstance;
import org.osate.aadl2.instance.SystemInstance;
import org.osate.xtext.aadl2.sandbox.sandbox.Sandbox;
import org.osate.xtext.aadl2.sandbox.sandbox.SandboxPackage;
import org.osate.xtext.aadl2.sandbox.sandbox.SystemConfiguration;
import org.osate.xtext.aadl2.sandbox.sandbox.SystemInstanceProxy;

/**
 * customization of the default outline structure
 * 
 */
public class SandboxOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	protected void _createNode(IOutlineNode parentNode, SystemInstanceProxy aadlModel) {
		if (aadlModel.getInstanceRef() != null){
		     	    createEStructuralFeatureNode(parentNode, 
		     	           aadlModel, 
		     	           SandboxPackage.Literals.SYSTEM_INSTANCE_PROXY__INSTANCE_REF,
		     	           _image((SystemInstance)aadlModel.getInstanceRef()), 
		     	          _text((SystemInstance)aadlModel.getInstanceRef()), 
		     	           false);
		}
		createEObjectNode(parentNode, aadlModel.getInstanceRef());
		return;
	}
	
	protected void _createNode(IOutlineNode parentNode, SystemInstance aadlModel) {
		for (ComponentInstance ci : aadlModel.getComponentInstances())     		
		createEObjectNode(parentNode, ci);
	}

	protected void _createChildren(EStructuralFeatureNode parentNode, SystemInstanceProxy modelElement) {
		for (ComponentInstance ci : ((SystemInstance)modelElement.getInstanceRef()).getComponentInstances())     		
		createEObjectNode(parentNode, ci);
	}	


	protected void _createChildren(IOutlineNode parentNode, SystemInstance modelElement) {
		for (ComponentInstance ci : modelElement.getComponentInstances())     		
		createEObjectNode(parentNode, ci);
	}	
	protected boolean _isLeaf(SystemInstance feature) {
	    return false;
	}
	protected boolean _isLeaf(ComponentInstance feature) {
	    return false;
	}

	protected void _createChildren(IOutlineNode parentNode, ComponentInstance modelElement) {
		for (ComponentInstance ci : modelElement.getComponentInstances())     		
		createEObjectNode(parentNode, ci);
	}	
		
}
