/*
* generated by Xtext
*/
package org.osate.xtext.aadl2.sandbox.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.osate.xtext.aadl2.sandbox.services.SandboxGrammarAccess;

public class SandboxParser extends AbstractContentAssistParser {
	
	@Inject
	private SandboxGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.osate.xtext.aadl2.sandbox.ui.contentassist.antlr.internal.InternalSandboxParser createParser() {
		org.osate.xtext.aadl2.sandbox.ui.contentassist.antlr.internal.InternalSandboxParser result = new org.osate.xtext.aadl2.sandbox.ui.contentassist.antlr.internal.InternalSandboxParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSandboxAccess().getGroup(), "rule__Sandbox__Group__0");
					put(grammarAccess.getSystemConfigurationAccess().getGroup(), "rule__SystemConfiguration__Group__0");
					put(grammarAccess.getSystemInstanceProxyAccess().getGroup(), "rule__SystemInstanceProxy__Group__0");
					put(grammarAccess.getQIREFAccess().getGroup(), "rule__QIREF__Group__0");
					put(grammarAccess.getQIREFAccess().getGroup_0(), "rule__QIREF__Group_0__0");
					put(grammarAccess.getQPREFAccess().getGroup(), "rule__QPREF__Group__0");
					put(grammarAccess.getQPREFAccess().getGroup_0(), "rule__QPREF__Group_0__0");
					put(grammarAccess.getSandboxAccess().getNameAssignment_1(), "rule__Sandbox__NameAssignment_1");
					put(grammarAccess.getSandboxAccess().getSystemInstanceAssignment_2(), "rule__Sandbox__SystemInstanceAssignment_2");
					put(grammarAccess.getSystemConfigurationAccess().getNameAssignment_2(), "rule__SystemConfiguration__NameAssignment_2");
					put(grammarAccess.getSystemConfigurationAccess().getSystemImplementationAssignment_4(), "rule__SystemConfiguration__SystemImplementationAssignment_4");
					put(grammarAccess.getSystemConfigurationAccess().getSystemInstanceProxyAssignment_5(), "rule__SystemConfiguration__SystemInstanceProxyAssignment_5");
					put(grammarAccess.getSystemInstanceProxyAccess().getInstanceRefAssignment_1(), "rule__SystemInstanceProxy__InstanceRefAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.osate.xtext.aadl2.sandbox.ui.contentassist.antlr.internal.InternalSandboxParser typedParser = (org.osate.xtext.aadl2.sandbox.ui.contentassist.antlr.internal.InternalSandboxParser) parser;
			typedParser.entryRuleSandbox();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SandboxGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SandboxGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
