/*
* generated by Xtext
*/
grammar InternalProperties;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.osate.xtext.aadl2.properties.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.osate.xtext.aadl2.properties.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

}

@parser::members {
 
 	private PropertiesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PropertiesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulePropertySet
entryRulePropertySet 
:
{ before(grammarAccess.getPropertySetRule()); }
	 rulePropertySet
{ after(grammarAccess.getPropertySetRule()); } 
	 EOF 
;

// Rule PropertySet
rulePropertySet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertySetAccess().getGroup()); }
(rule__PropertySet__Group__0)
{ after(grammarAccess.getPropertySetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyType
entryRulePropertyType 
:
{ before(grammarAccess.getPropertyTypeRule()); }
	 rulePropertyType
{ after(grammarAccess.getPropertyTypeRule()); } 
	 EOF 
;

// Rule PropertyType
rulePropertyType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyTypeAccess().getGroup()); }
(rule__PropertyType__Group__0)
{ after(grammarAccess.getPropertyTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyDefinition
entryRulePropertyDefinition 
:
{ before(grammarAccess.getPropertyDefinitionRule()); }
	 rulePropertyDefinition
{ after(grammarAccess.getPropertyDefinitionRule()); } 
	 EOF 
;

// Rule PropertyDefinition
rulePropertyDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyDefinitionAccess().getGroup()); }
(rule__PropertyDefinition__Group__0)
{ after(grammarAccess.getPropertyDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulePropertyExpression
entryRulePropertyExpression 
:
{ before(grammarAccess.getPropertyExpressionRule()); }
	 rulePropertyExpression
{ after(grammarAccess.getPropertyExpressionRule()); } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyExpressionAccess().getAlternatives()); }
(rule__PropertyExpression__Alternatives)
{ after(grammarAccess.getPropertyExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getNameAssignment()); }
(rule__Literal__NameAssignment)
{ after(grammarAccess.getLiteralAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProbabilityValue
entryRuleProbabilityValue 
:
{ before(grammarAccess.getProbabilityValueRule()); }
	 ruleProbabilityValue
{ after(grammarAccess.getProbabilityValueRule()); } 
	 EOF 
;

// Rule ProbabilityValue
ruleProbabilityValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProbabilityValueAccess().getGroup()); }
(rule__ProbabilityValue__Group__0)
{ after(grammarAccess.getProbabilityValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleREAL
entryRuleREAL 
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;

// Rule REAL
ruleREAL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getREALAccess().getGroup()); }
(rule__REAL__Group__0)
{ after(grammarAccess.getREALAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleINAME
entryRuleINAME 
:
{ before(grammarAccess.getINAMERule()); }
	 ruleINAME
{ after(grammarAccess.getINAMERule()); } 
	 EOF 
;

// Rule INAME
ruleINAME
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getINAMEAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getINAMEAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertySet__OwnedAlternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getOwnedPropertyTypeParserRuleCall_4_0_0()); }
	rulePropertyType
{ after(grammarAccess.getPropertySetAccess().getOwnedPropertyTypeParserRuleCall_4_0_0()); }
)

    |(
{ before(grammarAccess.getPropertySetAccess().getOwnedPropertyDefinitionParserRuleCall_4_0_1()); }
	rulePropertyDefinition
{ after(grammarAccess.getPropertySetAccess().getOwnedPropertyDefinitionParserRuleCall_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyExpressionAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getPropertyExpressionAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPropertyExpressionAccess().getProbabilityValueParserRuleCall_1()); }
	ruleProbabilityValue
{ after(grammarAccess.getPropertyExpressionAccess().getProbabilityValueParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PropertySet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertySet__Group__0__Impl
	rule__PropertySet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getPropertyKeyword_0()); }

	'property' 

{ after(grammarAccess.getPropertySetAccess().getPropertyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertySet__Group__1__Impl
	rule__PropertySet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getSetKeyword_1()); }

	'set' 

{ after(grammarAccess.getPropertySetAccess().getSetKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySet__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertySet__Group__2__Impl
	rule__PropertySet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySet__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getNameAssignment_2()); }
(rule__PropertySet__NameAssignment_2)
{ after(grammarAccess.getPropertySetAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySet__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertySet__Group__3__Impl
	rule__PropertySet__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySet__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getIsKeyword_3()); }

	'is' 

{ after(grammarAccess.getPropertySetAccess().getIsKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySet__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertySet__Group__4__Impl
	rule__PropertySet__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySet__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPropertySetAccess().getOwnedAssignment_4()); }
(rule__PropertySet__OwnedAssignment_4)
{ after(grammarAccess.getPropertySetAccess().getOwnedAssignment_4()); }
)
(
{ before(grammarAccess.getPropertySetAccess().getOwnedAssignment_4()); }
(rule__PropertySet__OwnedAssignment_4)*
{ after(grammarAccess.getPropertySetAccess().getOwnedAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySet__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertySet__Group__5__Impl
	rule__PropertySet__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySet__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getEndKeyword_5()); }

	'end' 

{ after(grammarAccess.getPropertySetAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySet__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertySet__Group__6__Impl
	rule__PropertySet__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySet__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getIDTerminalRuleCall_6()); }
	RULE_ID
{ after(grammarAccess.getPropertySetAccess().getIDTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySet__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertySet__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySet__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getSEMITerminalRuleCall_7()); }
	RULE_SEMI
{ after(grammarAccess.getPropertySetAccess().getSEMITerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__PropertyType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyType__Group__0__Impl
	rule__PropertyType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyTypeAccess().getNameAssignment_0()); }
(rule__PropertyType__NameAssignment_0)
{ after(grammarAccess.getPropertyTypeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyType__Group__1__Impl
	rule__PropertyType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyTypeAccess().getCOLONTerminalRuleCall_1()); }
	RULE_COLON
{ after(grammarAccess.getPropertyTypeAccess().getCOLONTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyType__Group__2__Impl
	rule__PropertyType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyTypeAccess().getTypeKeyword_2()); }

	'type' 

{ after(grammarAccess.getPropertyTypeAccess().getTypeKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyTypeAccess().getSEMITerminalRuleCall_3()); }
	RULE_SEMI
{ after(grammarAccess.getPropertyTypeAccess().getSEMITerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PropertyDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDefinition__Group__0__Impl
	rule__PropertyDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDefinitionAccess().getNameAssignment_0()); }
(rule__PropertyDefinition__NameAssignment_0)
{ after(grammarAccess.getPropertyDefinitionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDefinition__Group__1__Impl
	rule__PropertyDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDefinitionAccess().getCOLONTerminalRuleCall_1()); }
	RULE_COLON
{ after(grammarAccess.getPropertyDefinitionAccess().getCOLONTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDefinition__Group__2__Impl
	rule__PropertyDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDefinitionAccess().getTypeAssignment_2()); }
(rule__PropertyDefinition__TypeAssignment_2)
{ after(grammarAccess.getPropertyDefinitionAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDefinitionAccess().getSEMITerminalRuleCall_3()); }
	RULE_SEMI
{ after(grammarAccess.getPropertyDefinitionAccess().getSEMITerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__ProbabilityValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityValue__Group__0__Impl
	rule__ProbabilityValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityValueAccess().getNumberAssignment_0()); }
(rule__ProbabilityValue__NumberAssignment_0)
{ after(grammarAccess.getProbabilityValueAccess().getNumberAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProbabilityValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityValueAccess().getDistributionAssignment_1()); }
(rule__ProbabilityValue__DistributionAssignment_1)
{ after(grammarAccess.getProbabilityValueAccess().getDistributionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__REAL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREALAccess().getDOTTerminalRuleCall_1()); }
	RULE_DOT
{ after(grammarAccess.getREALAccess().getDOTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__PropertySet__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getPropertySetAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySet__OwnedAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertySetAccess().getOwnedAlternatives_4_0()); }
(rule__PropertySet__OwnedAlternatives_4_0)
{ after(grammarAccess.getPropertySetAccess().getOwnedAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyType__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyTypeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getPropertyTypeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDefinition__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getPropertyDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDefinition__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDefinitionAccess().getTypePropertyTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getPropertyDefinitionAccess().getTypePropertyTypeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getPropertyDefinitionAccess().getTypePropertyTypeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getPropertyDefinitionAccess().getTypePropertyTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Literal__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getLiteralAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityValue__NumberAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityValueAccess().getNumberREALParserRuleCall_0_0()); }
	ruleREAL{ after(grammarAccess.getProbabilityValueAccess().getNumberREALParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityValue__DistributionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProbabilityValueAccess().getDistributionIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProbabilityValueAccess().getDistributionIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NONE : 'none' RULE_SEMI;

RULE_LTRANS : '-[';

RULE_RTRANS : ']->';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_SEMI : ';';

RULE_COLON : ':';

RULE_COMMA : ',';

RULE_DOT : '.';

RULE_LPARENS : '(';

RULE_RPARENS : ')';

RULE_LBRACKET : '[';

RULE_RBRACKET : ']';

RULE_LCURLY : '{';

RULE_RCURLY : '}';

RULE_ASSIGN : '=>';

RULE_APPEND : '+=>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


