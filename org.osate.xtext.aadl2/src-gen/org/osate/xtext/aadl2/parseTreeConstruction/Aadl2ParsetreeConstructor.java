/*
* generated by Xtext
*/
package org.osate.xtext.aadl2.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.osate.xtext.aadl2.services.Aadl2GrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class Aadl2ParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private Aadl2GrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AadlPackage_Group(this, this, 0, inst);
			case 1: return new PackageSection_Alternatives(this, this, 1, inst);
			case 2: return new PublicPackageSection_Group(this, this, 2, inst);
			case 3: return new PrivatePackageSection_Group(this, this, 3, inst);
			case 4: return new TypeExtension_Group(this, this, 4, inst);
			case 5: return new ImplementationExtension_Group(this, this, 5, inst);
			case 6: return new FlowSpecification_Alternatives(this, this, 6, inst);
			case 7: return new FlowSourceSpec_Group(this, this, 7, inst);
			case 8: return new FlowSinkSpec_Group(this, this, 8, inst);
			case 9: return new FlowPathSpec_Group(this, this, 9, inst);
			case 10: return new Mode_Group(this, this, 10, inst);
			case 11: return new ModeTransition_Group(this, this, 11, inst);
			case 12: return new TriggerPort_PortAssignment(this, this, 12, inst);
			case 13: return new SystemType_Group(this, this, 13, inst);
			case 14: return new ProcessType_Group(this, this, 14, inst);
			case 15: return new ThreadType_Group(this, this, 15, inst);
			case 16: return new ProcessorType_Group(this, this, 16, inst);
			case 17: return new DataType_Group(this, this, 17, inst);
			case 18: return new SystemImplementation_Group(this, this, 18, inst);
			case 19: return new DataImplementation_Group(this, this, 19, inst);
			case 20: return new Realization_ImplementedAssignment(this, this, 20, inst);
			case 21: return new Prototype_Alternatives(this, this, 21, inst);
			case 22: return new ComponentPrototype_Group(this, this, 22, inst);
			case 23: return new FeatureGroupPrototype_Group(this, this, 23, inst);
			case 24: return new FeaturePrototype_Group(this, this, 24, inst);
			case 25: return new DataPort_Group(this, this, 25, inst);
			case 26: return new EventDataPort_Group(this, this, 26, inst);
			case 27: return new EventPort_Group(this, this, 27, inst);
			case 28: return new FeatureGroup_Group(this, this, 28, inst);
			case 29: return new Feature_Alternatives(this, this, 29, inst);
			case 30: return new Port_Alternatives(this, this, 30, inst);
			case 31: return new ModeRef_Group(this, this, 31, inst);
			case 32: return new SystemSubcomponent_Group(this, this, 32, inst);
			case 33: return new ProcessorSubcomponent_Group(this, this, 33, inst);
			case 34: return new DataSubcomponent_Group(this, this, 34, inst);
			case 35: return new Subcomponent_Alternatives(this, this, 35, inst);
			case 36: return new PortConnection_Group(this, this, 36, inst);
			case 37: return new ConnectionEnd_Alternatives(this, this, 37, inst);
			case 38: return new Context_SubcomponentParserRuleCall(this, this, 38, inst);
			case 39: return new Connection_PortConnectionParserRuleCall(this, this, 39, inst);
			case 40: return new FeatureGroupType_Group(this, this, 40, inst);
			case 41: return new AnnexLibrary_DefaultAnnexLibraryParserRuleCall(this, this, 41, inst);
			case 42: return new DefaultAnnexLibrary_Group(this, this, 42, inst);
			case 43: return new AnnexSubclause_DefaultAnnexSubclauseParserRuleCall(this, this, 43, inst);
			case 44: return new DefaultAnnexSubclause_Group(this, this, 44, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule AadlPackage ****************
 *
 * //AadlSpec:
 * //	(AadlPackage | PropertySet);
 * //NamedElement returns aadl2::NamedElement:
 * //	Classifier | AadlPackage | Feature | Subcomponent | Prototype;
 * //
 * //Namespace returns Namespace: PackageSection | PropertySet | Classifier;	
 * AadlPackage returns aadl2::AadlPackage:
 * 	"package" name=PNAME (ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection? |
 * 	ownedPrivateSection=PrivatePackageSection) //	(=> 'properties'
 * 	//	((ownedPropertyAssociation+=PropertyAssociation)+ | noProperties?=NONE))?
 * 	"end" ID ("::" ID)* SEMI;
 *
 **/

// "package" name=PNAME (ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection? |
// ownedPrivateSection=PrivatePackageSection) //	(=> 'properties'
// //	((ownedPropertyAssociation+=PropertyAssociation)+ | noProperties?=NONE))?
// "end" ID ("::" ID)* SEMI
protected class AadlPackage_Group extends GroupToken {
	
	public AadlPackage_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AadlPackage_SEMITerminalRuleCall_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAadlPackageRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "package"
protected class AadlPackage_PackageKeyword_0 extends KeywordToken  {
	
	public AadlPackage_PackageKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getPackageKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=PNAME
protected class AadlPackage_NameAssignment_1 extends AssignmentToken  {
	
	public AadlPackage_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AadlPackage_PackageKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAadlPackageAccess().getNamePNAMEParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAadlPackageAccess().getNamePNAMEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection? |
// ownedPrivateSection=PrivatePackageSection
protected class AadlPackage_Alternatives_2 extends AlternativesToken {

	public AadlPackage_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AadlPackage_Group_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AadlPackage_OwnedPrivateSectionAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection?
protected class AadlPackage_Group_2_0 extends GroupToken {
	
	public AadlPackage_Group_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AadlPackage_OwnedPrivateSectionAssignment_2_0_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AadlPackage_OwnedPublicSectionAssignment_2_0_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedPublicSection=PublicPackageSection
protected class AadlPackage_OwnedPublicSectionAssignment_2_0_0 extends AssignmentToken  {
	
	public AadlPackage_OwnedPublicSectionAssignment_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getOwnedPublicSectionAssignment_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedPublicSection",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedPublicSection");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPublicPackageSectionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAadlPackageAccess().getOwnedPublicSectionPublicPackageSectionParserRuleCall_2_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AadlPackage_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedPrivateSection=PrivatePackageSection?
protected class AadlPackage_OwnedPrivateSectionAssignment_2_0_1 extends AssignmentToken  {
	
	public AadlPackage_OwnedPrivateSectionAssignment_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getOwnedPrivateSectionAssignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedPrivateSection",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedPrivateSection");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrivatePackageSectionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAadlPackageAccess().getOwnedPrivateSectionPrivatePackageSectionParserRuleCall_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AadlPackage_OwnedPublicSectionAssignment_2_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ownedPrivateSection=PrivatePackageSection
protected class AadlPackage_OwnedPrivateSectionAssignment_2_1 extends AssignmentToken  {
	
	public AadlPackage_OwnedPrivateSectionAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getOwnedPrivateSectionAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedPrivateSection",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedPrivateSection");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrivatePackageSectionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAadlPackageAccess().getOwnedPrivateSectionPrivatePackageSectionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AadlPackage_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// //	(=> 'properties'
// //	((ownedPropertyAssociation+=PropertyAssociation)+ | noProperties?=NONE))?
// "end"
protected class AadlPackage_EndKeyword_3 extends KeywordToken  {
	
	public AadlPackage_EndKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getEndKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AadlPackage_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ID
protected class AadlPackage_IDTerminalRuleCall_4 extends UnassignedTextToken {

	public AadlPackage_IDTerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getIDTerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AadlPackage_EndKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class AadlPackage_SEMITerminalRuleCall_6 extends UnassignedTextToken {

	public AadlPackage_SEMITerminalRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAadlPackageAccess().getSEMITerminalRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AadlPackage_IDTerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AadlPackage ****************/


/************ begin Rule PackageSection ****************
 *
 * PackageSection returns aadl2::PackageSection:
 * 	PublicPackageSection | PrivatePackageSection;
 *
 **/

// PublicPackageSection | PrivatePackageSection
protected class PackageSection_Alternatives extends AlternativesToken {

	public PackageSection_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPackageSectionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageSection_PublicPackageSectionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PackageSection_PrivatePackageSectionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrivatePackageSectionAccess().getPrivatePackageSectionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPublicPackageSectionAccess().getPublicPackageSectionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PublicPackageSection
protected class PackageSection_PublicPackageSectionParserRuleCall_0 extends RuleCallToken {
	
	public PackageSection_PublicPackageSectionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPackageSectionAccess().getPublicPackageSectionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPublicPackageSectionAccess().getPublicPackageSectionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(PublicPackageSection_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// PrivatePackageSection
protected class PackageSection_PrivatePackageSectionParserRuleCall_1 extends RuleCallToken {
	
	public PackageSection_PrivatePackageSectionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPackageSectionAccess().getPrivatePackageSectionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrivatePackageSectionAccess().getPrivatePackageSectionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(PrivatePackageSection_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PackageSection ****************/


/************ begin Rule PublicPackageSection ****************
 *
 * PublicPackageSection returns aadl2::PublicPackageSection:
 * 	{aadl2::PublicPackageSection} "public" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
 * 	(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
 * 	ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*;
 *
 **/

// {aadl2::PublicPackageSection} "public" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
// (COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
// ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*
protected class PublicPackageSection_Group extends GroupToken {
	
	public PublicPackageSection_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PublicPackageSection_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PublicPackageSection_PublicKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPublicPackageSectionAccess().getPublicPackageSectionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {aadl2::PublicPackageSection}
protected class PublicPackageSection_PublicPackageSectionAction_0 extends ActionToken  {

	public PublicPackageSection_PublicPackageSectionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getPublicPackageSectionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "public"
protected class PublicPackageSection_PublicKeyword_1 extends KeywordToken  {
	
	public PublicPackageSection_PublicKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getPublicKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_PublicPackageSectionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (=> "with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
// (COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)*
protected class PublicPackageSection_Group_2 extends GroupToken {
	
	public PublicPackageSection_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_SEMITerminalRuleCall_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "with"
protected class PublicPackageSection_WithKeyword_2_0 extends KeywordToken  {
	
	public PublicPackageSection_WithKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getWithKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PublicPackageSection_PublicKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// importedPackage+=[aadl2::AadlPackage|PNAME]
protected class PublicPackageSection_ImportedPackageAssignment_2_1 extends AssignmentToken  {
	
	public PublicPackageSection_ImportedPackageAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getImportedPackageAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_WithKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedPackage",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedPackage");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPublicPackageSectionAccess().getImportedPackageAadlPackageCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPublicPackageSectionAccess().getImportedPackageAadlPackageCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (COMMA importedPackage+=[aadl2::AadlPackage|PNAME])*
protected class PublicPackageSection_Group_2_2 extends GroupToken {
	
	public PublicPackageSection_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_ImportedPackageAssignment_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class PublicPackageSection_COMMATerminalRuleCall_2_2_0 extends UnassignedTextToken {

	public PublicPackageSection_COMMATerminalRuleCall_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getCOMMATerminalRuleCall_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PublicPackageSection_ImportedPackageAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// importedPackage+=[aadl2::AadlPackage|PNAME]
protected class PublicPackageSection_ImportedPackageAssignment_2_2_1 extends AssignmentToken  {
	
	public PublicPackageSection_ImportedPackageAssignment_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getImportedPackageAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_COMMATerminalRuleCall_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedPackage",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedPackage");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPublicPackageSectionAccess().getImportedPackageAadlPackageCrossReference_2_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPublicPackageSectionAccess().getImportedPackageAadlPackageCrossReference_2_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// SEMI
protected class PublicPackageSection_SEMITerminalRuleCall_2_3 extends UnassignedTextToken {

	public PublicPackageSection_SEMITerminalRuleCall_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getSEMITerminalRuleCall_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PublicPackageSection_ImportedPackageAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// (ownedSystemType+=SystemType | ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType |
// ownedDataType+=DataType)*
protected class PublicPackageSection_Alternatives_3 extends AlternativesToken {

	public PublicPackageSection_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PublicPackageSection_OwnedSystemTypeAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PublicPackageSection_OwnedSystemImplementationAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PublicPackageSection_OwnedProcessorTypeAssignment_3_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new PublicPackageSection_OwnedDataTypeAssignment_3_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// ownedSystemType+=SystemType
protected class PublicPackageSection_OwnedSystemTypeAssignment_3_0 extends AssignmentToken  {
	
	public PublicPackageSection_OwnedSystemTypeAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getOwnedSystemTypeAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedSystemType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedSystemType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSystemTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPublicPackageSectionAccess().getOwnedSystemTypeSystemTypeParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PublicPackageSection_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PublicPackageSection_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new PublicPackageSection_PublicKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedSystemImplementation+=SystemImplementation
protected class PublicPackageSection_OwnedSystemImplementationAssignment_3_1 extends AssignmentToken  {
	
	public PublicPackageSection_OwnedSystemImplementationAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getOwnedSystemImplementationAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedSystemImplementation",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedSystemImplementation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSystemImplementationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPublicPackageSectionAccess().getOwnedSystemImplementationSystemImplementationParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PublicPackageSection_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PublicPackageSection_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new PublicPackageSection_PublicKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedProcessorType+=ProcessorType
protected class PublicPackageSection_OwnedProcessorTypeAssignment_3_2 extends AssignmentToken  {
	
	public PublicPackageSection_OwnedProcessorTypeAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getOwnedProcessorTypeAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedProcessorType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedProcessorType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessorTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPublicPackageSectionAccess().getOwnedProcessorTypeProcessorTypeParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PublicPackageSection_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PublicPackageSection_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new PublicPackageSection_PublicKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedDataType+=DataType
protected class PublicPackageSection_OwnedDataTypeAssignment_3_3 extends AssignmentToken  {
	
	public PublicPackageSection_OwnedDataTypeAssignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPublicPackageSectionAccess().getOwnedDataTypeAssignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedDataType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedDataType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPublicPackageSectionAccess().getOwnedDataTypeDataTypeParserRuleCall_3_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PublicPackageSection_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PublicPackageSection_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new PublicPackageSection_PublicKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PublicPackageSection ****************/


/************ begin Rule PrivatePackageSection ****************
 *
 * // currently derived: (ownedClassifier+=Classifier | ownedAnnexLibrary+=AnnexLibrary)*;
 * //Import : AadlPackage | PropertySet;
 * //	(ownedClassifier+=Classifier | ownedAnnexLibrary+=AnnexLibrary)*
 * PrivatePackageSection returns aadl2::PrivatePackageSection:
 * 	{aadl2::PrivatePackageSection} "private" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
 * 	(COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
 * 	ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*;
 *
 **/

// {aadl2::PrivatePackageSection} "private" ("with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
// (COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)* (ownedSystemType+=SystemType |
// ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType | ownedDataType+=DataType)*
protected class PrivatePackageSection_Group extends GroupToken {
	
	public PrivatePackageSection_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PrivatePackageSection_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PrivatePackageSection_PrivateKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrivatePackageSectionAccess().getPrivatePackageSectionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {aadl2::PrivatePackageSection}
protected class PrivatePackageSection_PrivatePackageSectionAction_0 extends ActionToken  {

	public PrivatePackageSection_PrivatePackageSectionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getPrivatePackageSectionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "private"
protected class PrivatePackageSection_PrivateKeyword_1 extends KeywordToken  {
	
	public PrivatePackageSection_PrivateKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getPrivateKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_PrivatePackageSectionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (=> "with" importedPackage+=[aadl2::AadlPackage|PNAME] //| importedPropertySet+=[props::PropertySet|ID]) 
// (COMMA importedPackage+=[aadl2::AadlPackage|PNAME])* SEMI)*
protected class PrivatePackageSection_Group_2 extends GroupToken {
	
	public PrivatePackageSection_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_SEMITerminalRuleCall_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "with"
protected class PrivatePackageSection_WithKeyword_2_0 extends KeywordToken  {
	
	public PrivatePackageSection_WithKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getWithKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PrivatePackageSection_PrivateKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// importedPackage+=[aadl2::AadlPackage|PNAME]
protected class PrivatePackageSection_ImportedPackageAssignment_2_1 extends AssignmentToken  {
	
	public PrivatePackageSection_ImportedPackageAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getImportedPackageAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_WithKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedPackage",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedPackage");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrivatePackageSectionAccess().getImportedPackageAadlPackageCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPrivatePackageSectionAccess().getImportedPackageAadlPackageCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (COMMA importedPackage+=[aadl2::AadlPackage|PNAME])*
protected class PrivatePackageSection_Group_2_2 extends GroupToken {
	
	public PrivatePackageSection_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_ImportedPackageAssignment_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class PrivatePackageSection_COMMATerminalRuleCall_2_2_0 extends UnassignedTextToken {

	public PrivatePackageSection_COMMATerminalRuleCall_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getCOMMATerminalRuleCall_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PrivatePackageSection_ImportedPackageAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// importedPackage+=[aadl2::AadlPackage|PNAME]
protected class PrivatePackageSection_ImportedPackageAssignment_2_2_1 extends AssignmentToken  {
	
	public PrivatePackageSection_ImportedPackageAssignment_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getImportedPackageAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_COMMATerminalRuleCall_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedPackage",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedPackage");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrivatePackageSectionAccess().getImportedPackageAadlPackageCrossReference_2_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPrivatePackageSectionAccess().getImportedPackageAadlPackageCrossReference_2_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// SEMI
protected class PrivatePackageSection_SEMITerminalRuleCall_2_3 extends UnassignedTextToken {

	public PrivatePackageSection_SEMITerminalRuleCall_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getSEMITerminalRuleCall_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PrivatePackageSection_ImportedPackageAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// (ownedSystemType+=SystemType | ownedSystemImplementation+=SystemImplementation | ownedProcessorType+=ProcessorType |
// ownedDataType+=DataType)*
protected class PrivatePackageSection_Alternatives_3 extends AlternativesToken {

	public PrivatePackageSection_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrivatePackageSection_OwnedSystemTypeAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PrivatePackageSection_OwnedSystemImplementationAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PrivatePackageSection_OwnedProcessorTypeAssignment_3_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new PrivatePackageSection_OwnedDataTypeAssignment_3_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// ownedSystemType+=SystemType
protected class PrivatePackageSection_OwnedSystemTypeAssignment_3_0 extends AssignmentToken  {
	
	public PrivatePackageSection_OwnedSystemTypeAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getOwnedSystemTypeAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedSystemType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedSystemType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSystemTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrivatePackageSectionAccess().getOwnedSystemTypeSystemTypeParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrivatePackageSection_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PrivatePackageSection_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new PrivatePackageSection_PrivateKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedSystemImplementation+=SystemImplementation
protected class PrivatePackageSection_OwnedSystemImplementationAssignment_3_1 extends AssignmentToken  {
	
	public PrivatePackageSection_OwnedSystemImplementationAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getOwnedSystemImplementationAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedSystemImplementation",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedSystemImplementation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSystemImplementationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrivatePackageSectionAccess().getOwnedSystemImplementationSystemImplementationParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrivatePackageSection_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PrivatePackageSection_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new PrivatePackageSection_PrivateKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedProcessorType+=ProcessorType
protected class PrivatePackageSection_OwnedProcessorTypeAssignment_3_2 extends AssignmentToken  {
	
	public PrivatePackageSection_OwnedProcessorTypeAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getOwnedProcessorTypeAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedProcessorType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedProcessorType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessorTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrivatePackageSectionAccess().getOwnedProcessorTypeProcessorTypeParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrivatePackageSection_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PrivatePackageSection_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new PrivatePackageSection_PrivateKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedDataType+=DataType
protected class PrivatePackageSection_OwnedDataTypeAssignment_3_3 extends AssignmentToken  {
	
	public PrivatePackageSection_OwnedDataTypeAssignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrivatePackageSectionAccess().getOwnedDataTypeAssignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedDataType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedDataType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrivatePackageSectionAccess().getOwnedDataTypeDataTypeParserRuleCall_3_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrivatePackageSection_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PrivatePackageSection_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new PrivatePackageSection_PrivateKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PrivatePackageSection ****************/


/************ begin Rule TypeExtension ****************
 *
 * //Classifier returns aadl2::Classifier:
 * //	ComponentClassifier | FeatureGroupType;
 * //
 * //ComponentClassifier returns aadl2::ComponentClassifier:
 * //	SystemClassifier | DataClassifier|ProcessorClassifier|ProcessClassifier|ThreadClassifier;
 * TypeExtension returns aadl2::TypeExtension:
 * 	"extends" extended=[aadl2::ComponentType|QCREF];
 *
 **/

// "extends" extended=[aadl2::ComponentType|QCREF]
protected class TypeExtension_Group extends GroupToken {
	
	public TypeExtension_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeExtensionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeExtension_ExtendedAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTypeExtensionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "extends"
protected class TypeExtension_ExtendsKeyword_0 extends KeywordToken  {
	
	public TypeExtension_ExtendsKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeExtensionAccess().getExtendsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// extended=[aadl2::ComponentType|QCREF]
protected class TypeExtension_ExtendedAssignment_1 extends AssignmentToken  {
	
	public TypeExtension_ExtendedAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeExtensionAccess().getExtendedAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeExtension_ExtendsKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extended",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extended");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeExtensionAccess().getExtendedComponentTypeCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTypeExtensionAccess().getExtendedComponentTypeCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule TypeExtension ****************/


/************ begin Rule ImplementationExtension ****************
 *
 * ImplementationExtension returns aadl2::ImplementationExtension:
 * 	"extends" extended=[aadl2::ComponentImplementation|QCREF];
 *
 **/

// "extends" extended=[aadl2::ComponentImplementation|QCREF]
protected class ImplementationExtension_Group extends GroupToken {
	
	public ImplementationExtension_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImplementationExtensionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImplementationExtension_ExtendedAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImplementationExtensionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "extends"
protected class ImplementationExtension_ExtendsKeyword_0 extends KeywordToken  {
	
	public ImplementationExtension_ExtendsKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImplementationExtensionAccess().getExtendsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// extended=[aadl2::ComponentImplementation|QCREF]
protected class ImplementationExtension_ExtendedAssignment_1 extends AssignmentToken  {
	
	public ImplementationExtension_ExtendedAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImplementationExtensionAccess().getExtendedAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImplementationExtension_ExtendsKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extended",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extended");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImplementationExtensionAccess().getExtendedComponentImplementationCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getImplementationExtensionAccess().getExtendedComponentImplementationCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ImplementationExtension ****************/





/************ begin Rule FlowSpecification ****************
 *
 * FlowSpecification returns aadl2::FlowSpecification:
 * 	FlowSourceSpec | FlowSinkSpec | FlowPathSpec //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
 * 	("in" "modes" LPARENS inMode+=[aadl2::Mode]+ RPARENS)? //| allModes?='all'
 * 	SEMI;
 *
 **/

// FlowSourceSpec | FlowSinkSpec | FlowPathSpec //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
// ("in" "modes" LPARENS inMode+=[aadl2::Mode]+ RPARENS)? //| allModes?='all'
// SEMI
protected class FlowSpecification_Alternatives extends AlternativesToken {

	public FlowSpecification_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_FlowSourceSpecParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FlowSpecification_FlowSinkSpecParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FlowSpecification_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFlowPathSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FlowSourceSpec
protected class FlowSpecification_FlowSourceSpecParserRuleCall_0 extends RuleCallToken {
	
	public FlowSpecification_FlowSourceSpecParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getFlowSourceSpecParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSourceSpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(FlowSourceSpec_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FlowSinkSpec
protected class FlowSpecification_FlowSinkSpecParserRuleCall_1 extends RuleCallToken {
	
	public FlowSpecification_FlowSinkSpecParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getFlowSinkSpecParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSinkSpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(FlowSinkSpec_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FlowPathSpec //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
// ("in" "modes" LPARENS inMode+=[aadl2::Mode]+ RPARENS)? //| allModes?='all'
// SEMI
protected class FlowSpecification_Group_2 extends GroupToken {
	
	public FlowSpecification_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_SEMITerminalRuleCall_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// FlowPathSpec
protected class FlowSpecification_FlowPathSpecParserRuleCall_2_0 extends RuleCallToken {
	
	public FlowSpecification_FlowPathSpecParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getFlowPathSpecParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowPathSpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(FlowPathSpec_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// (=> "in" "modes" LPARENS inMode+=[aadl2::Mode]+ RPARENS)?
protected class FlowSpecification_Group_2_1 extends GroupToken {
	
	public FlowSpecification_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_RPARENSTerminalRuleCall_2_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "in"
protected class FlowSpecification_InKeyword_2_1_0 extends KeywordToken  {
	
	public FlowSpecification_InKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getInKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_FlowPathSpecParserRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "modes"
protected class FlowSpecification_ModesKeyword_2_1_1 extends KeywordToken  {
	
	public FlowSpecification_ModesKeyword_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getModesKeyword_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_InKeyword_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class FlowSpecification_LPARENSTerminalRuleCall_2_1_2 extends UnassignedTextToken {

	public FlowSpecification_LPARENSTerminalRuleCall_2_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getLPARENSTerminalRuleCall_2_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_ModesKeyword_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// inMode+=[aadl2::Mode]+
protected class FlowSpecification_InModeAssignment_2_1_3 extends AssignmentToken  {
	
	public FlowSpecification_InModeAssignment_2_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getInModeAssignment_2_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_InModeAssignment_2_1_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FlowSpecification_LPARENSTerminalRuleCall_2_1_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("inMode",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("inMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowSpecificationAccess().getInModeModeCrossReference_2_1_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFlowSpecificationAccess().getInModeModeCrossReference_2_1_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// RPARENS
protected class FlowSpecification_RPARENSTerminalRuleCall_2_1_4 extends UnassignedTextToken {

	public FlowSpecification_RPARENSTerminalRuleCall_2_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getRPARENSTerminalRuleCall_2_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_InModeAssignment_2_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// SEMI
protected class FlowSpecification_SEMITerminalRuleCall_2_2 extends UnassignedTextToken {

	public FlowSpecification_SEMITerminalRuleCall_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFlowSpecificationAccess().getSEMITerminalRuleCall_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FlowSpecification_FlowPathSpecParserRuleCall_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule FlowSpecification ****************/


/************ begin Rule FlowSourceSpec ****************
 *
 * FlowSourceSpec returns aadl2::FlowSpecification:
 * 	name=ID COLON "flow" kind=FlowSource outFeature=[aadl2::Feature];
 *
 **/

// name=ID COLON "flow" kind=FlowSource outFeature=[aadl2::Feature]
protected class FlowSourceSpec_Group extends GroupToken {
	
	public FlowSourceSpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFlowSourceSpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSourceSpec_OutFeatureAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFlowSourceSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class FlowSourceSpec_NameAssignment_0 extends AssignmentToken  {
	
	public FlowSourceSpec_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowSourceSpecAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFlowSourceSpecAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFlowSourceSpecAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class FlowSourceSpec_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public FlowSourceSpec_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFlowSourceSpecAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSourceSpec_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "flow"
protected class FlowSourceSpec_FlowKeyword_2 extends KeywordToken  {
	
	public FlowSourceSpec_FlowKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFlowSourceSpecAccess().getFlowKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSourceSpec_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// kind=FlowSource
protected class FlowSourceSpec_KindAssignment_3 extends AssignmentToken  {
	
	public FlowSourceSpec_KindAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowSourceSpecAccess().getKindAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSourceSpec_FlowKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kind",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kind");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFlowSourceSpecAccess().getKindFlowSourceParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFlowSourceSpecAccess().getKindFlowSourceParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// outFeature=[aadl2::Feature]
protected class FlowSourceSpec_OutFeatureAssignment_4 extends AssignmentToken  {
	
	public FlowSourceSpec_OutFeatureAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowSourceSpecAccess().getOutFeatureAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSourceSpec_KindAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("outFeature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("outFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowSourceSpecAccess().getOutFeatureFeatureCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFlowSourceSpecAccess().getOutFeatureFeatureCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule FlowSourceSpec ****************/


/************ begin Rule FlowSinkSpec ****************
 *
 * FlowSinkSpec returns aadl2::FlowSpecification:
 * 	name=ID COLON "flow" kind=FlowSink inFeature=[aadl2::Feature];
 *
 **/

// name=ID COLON "flow" kind=FlowSink inFeature=[aadl2::Feature]
protected class FlowSinkSpec_Group extends GroupToken {
	
	public FlowSinkSpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFlowSinkSpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSinkSpec_InFeatureAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFlowSinkSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class FlowSinkSpec_NameAssignment_0 extends AssignmentToken  {
	
	public FlowSinkSpec_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowSinkSpecAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFlowSinkSpecAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFlowSinkSpecAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class FlowSinkSpec_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public FlowSinkSpec_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFlowSinkSpecAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSinkSpec_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "flow"
protected class FlowSinkSpec_FlowKeyword_2 extends KeywordToken  {
	
	public FlowSinkSpec_FlowKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFlowSinkSpecAccess().getFlowKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSinkSpec_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// kind=FlowSink
protected class FlowSinkSpec_KindAssignment_3 extends AssignmentToken  {
	
	public FlowSinkSpec_KindAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowSinkSpecAccess().getKindAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSinkSpec_FlowKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kind",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kind");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFlowSinkSpecAccess().getKindFlowSinkParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFlowSinkSpecAccess().getKindFlowSinkParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// inFeature=[aadl2::Feature]
protected class FlowSinkSpec_InFeatureAssignment_4 extends AssignmentToken  {
	
	public FlowSinkSpec_InFeatureAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowSinkSpecAccess().getInFeatureAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSinkSpec_KindAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("inFeature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("inFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowSinkSpecAccess().getInFeatureFeatureCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFlowSinkSpecAccess().getInFeatureFeatureCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule FlowSinkSpec ****************/


/************ begin Rule FlowPathSpec ****************
 *
 * FlowPathSpec returns aadl2::FlowSpecification:
 * 	name=ID COLON "flow" kind=FlowPath inFeature=[aadl2::Feature] "->" outFeature=[aadl2::Feature];
 *
 **/

// name=ID COLON "flow" kind=FlowPath inFeature=[aadl2::Feature] "->" outFeature=[aadl2::Feature]
protected class FlowPathSpec_Group extends GroupToken {
	
	public FlowPathSpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFlowPathSpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowPathSpec_OutFeatureAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFlowPathSpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class FlowPathSpec_NameAssignment_0 extends AssignmentToken  {
	
	public FlowPathSpec_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowPathSpecAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFlowPathSpecAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFlowPathSpecAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class FlowPathSpec_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public FlowPathSpec_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFlowPathSpecAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowPathSpec_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "flow"
protected class FlowPathSpec_FlowKeyword_2 extends KeywordToken  {
	
	public FlowPathSpec_FlowKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFlowPathSpecAccess().getFlowKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowPathSpec_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// kind=FlowPath
protected class FlowPathSpec_KindAssignment_3 extends AssignmentToken  {
	
	public FlowPathSpec_KindAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowPathSpecAccess().getKindAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowPathSpec_FlowKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kind",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kind");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFlowPathSpecAccess().getKindFlowPathParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFlowPathSpecAccess().getKindFlowPathParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// inFeature=[aadl2::Feature]
protected class FlowPathSpec_InFeatureAssignment_4 extends AssignmentToken  {
	
	public FlowPathSpec_InFeatureAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowPathSpecAccess().getInFeatureAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowPathSpec_KindAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("inFeature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("inFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowPathSpecAccess().getInFeatureFeatureCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFlowPathSpecAccess().getInFeatureFeatureCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "->"
protected class FlowPathSpec_HyphenMinusGreaterThanSignKeyword_5 extends KeywordToken  {
	
	public FlowPathSpec_HyphenMinusGreaterThanSignKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFlowPathSpecAccess().getHyphenMinusGreaterThanSignKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowPathSpec_InFeatureAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// outFeature=[aadl2::Feature]
protected class FlowPathSpec_OutFeatureAssignment_6 extends AssignmentToken  {
	
	public FlowPathSpec_OutFeatureAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFlowPathSpecAccess().getOutFeatureAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowPathSpec_HyphenMinusGreaterThanSignKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("outFeature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("outFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowPathSpecAccess().getOutFeatureFeatureCrossReference_6_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFlowPathSpecAccess().getOutFeatureFeatureCrossReference_6_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule FlowPathSpec ****************/


/************ begin Rule Mode ****************
 *
 * Mode returns aadl2::Mode:
 * 	name=ID COLON initial?="initial"? "mode" SEMI;
 *
 **/

// name=ID COLON initial?="initial"? "mode" SEMI
protected class Mode_Group extends GroupToken {
	
	public Mode_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class Mode_NameAssignment_0 extends AssignmentToken  {
	
	public Mode_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModeAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getModeAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getModeAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class Mode_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public Mode_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModeAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// initial?="initial"?
protected class Mode_InitialAssignment_2 extends AssignmentToken  {
	
	public Mode_InitialAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModeAccess().getInitialAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("initial",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("initial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getModeAccess().getInitialInitialKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// "mode"
protected class Mode_ModeKeyword_3 extends KeywordToken  {
	
	public Mode_ModeKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModeAccess().getModeKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_InitialAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mode_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class Mode_SEMITerminalRuleCall_4 extends UnassignedTextToken {

	public Mode_SEMITerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModeAccess().getSEMITerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_ModeKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Mode ****************/


/************ begin Rule ModeTransition ****************
 *
 * ModeTransition returns aadl2::ModeTransition:
 * 	(name=ID COLON)? source=[aadl2::Mode] LTRANS ownedTrigger+=TriggerPort (COMMA ownedTrigger+=TriggerPort)* RTRANS
 * 	destination=[aadl2::Mode] SEMI;
 *
 **/

// (name=ID COLON)? source=[aadl2::Mode] LTRANS ownedTrigger+=TriggerPort (COMMA ownedTrigger+=TriggerPort)* RTRANS
// destination=[aadl2::Mode] SEMI
protected class ModeTransition_Group extends GroupToken {
	
	public ModeTransition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_SEMITerminalRuleCall_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModeTransitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// (name=ID COLON)?
protected class ModeTransition_Group_0 extends GroupToken {
	
	public ModeTransition_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_COLONTerminalRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class ModeTransition_NameAssignment_0_0 extends AssignmentToken  {
	
	public ModeTransition_NameAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getNameAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getModeTransitionAccess().getNameIDTerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getModeTransitionAccess().getNameIDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class ModeTransition_COLONTerminalRuleCall_0_1 extends UnassignedTextToken {

	public ModeTransition_COLONTerminalRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getCOLONTerminalRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_NameAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// source=[aadl2::Mode]
protected class ModeTransition_SourceAssignment_1 extends AssignmentToken  {
	
	public ModeTransition_SourceAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getSourceAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("source",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeTransitionAccess().getSourceModeCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getModeTransitionAccess().getSourceModeCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// LTRANS
protected class ModeTransition_LTRANSTerminalRuleCall_2 extends UnassignedTextToken {

	public ModeTransition_LTRANSTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getLTRANSTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_SourceAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ownedTrigger+=TriggerPort
protected class ModeTransition_OwnedTriggerAssignment_3 extends AssignmentToken  {
	
	public ModeTransition_OwnedTriggerAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getOwnedTriggerAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerPort_PortAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedTrigger",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedTrigger");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModeTransitionAccess().getOwnedTriggerTriggerPortParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModeTransition_LTRANSTerminalRuleCall_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (COMMA ownedTrigger+=TriggerPort)*
protected class ModeTransition_Group_4 extends GroupToken {
	
	public ModeTransition_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_OwnedTriggerAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class ModeTransition_COMMATerminalRuleCall_4_0 extends UnassignedTextToken {

	public ModeTransition_COMMATerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getCOMMATerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ModeTransition_OwnedTriggerAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedTrigger+=TriggerPort
protected class ModeTransition_OwnedTriggerAssignment_4_1 extends AssignmentToken  {
	
	public ModeTransition_OwnedTriggerAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getOwnedTriggerAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerPort_PortAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedTrigger",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedTrigger");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModeTransitionAccess().getOwnedTriggerTriggerPortParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ModeTransition_COMMATerminalRuleCall_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// RTRANS
protected class ModeTransition_RTRANSTerminalRuleCall_5 extends UnassignedTextToken {

	public ModeTransition_RTRANSTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getRTRANSTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ModeTransition_OwnedTriggerAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// destination=[aadl2::Mode]
protected class ModeTransition_DestinationAssignment_6 extends AssignmentToken  {
	
	public ModeTransition_DestinationAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getDestinationAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_RTRANSTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("destination",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("destination");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeTransitionAccess().getDestinationModeCrossReference_6_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getModeTransitionAccess().getDestinationModeCrossReference_6_0(); 
				return obj;
			}
		}
		return null;
	}

}

// SEMI
protected class ModeTransition_SEMITerminalRuleCall_7 extends UnassignedTextToken {

	public ModeTransition_SEMITerminalRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModeTransitionAccess().getSEMITerminalRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_DestinationAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ModeTransition ****************/


/************ begin Rule TriggerPort ****************
 *
 * TriggerPort returns aadl2::TriggerPort:
 * 	port=[aadl2::Port];
 *
 **/

// port=[aadl2::Port]
protected class TriggerPort_PortAssignment extends AssignmentToken  {
	
	public TriggerPort_PortAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggerPortAccess().getPortAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTriggerPortRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("port",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("port");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerPortAccess().getPortPortCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTriggerPortAccess().getPortPortCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule TriggerPort ****************/



/************ begin Rule SystemType ****************
 *
 * SystemType returns aadl2::SystemType:
 * 	"system" name=ID //	(ownedExtension=TypeExtension)?
 * 	//	(=> 'extends' extends=[aadl2::SystemType|QCREF])?
 * 	("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
 * 	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort | FeatureGroup))+))? //| FeatureGroup
 * 	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
 * 	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
 * 	//	((ownedMode+=Mode)+))?
 * 	| noModes?=NONE)? //	(=> 'properties'
 * 	//	((ownedPropertyAssociation+=PropertyAssociation)+
 * 	//	| noProperties?=NONE))?
 * 	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
 *
 **/

// "system" name=ID //	(ownedExtension=TypeExtension)?
// //	(=> 'extends' extends=[aadl2::SystemType|QCREF])?
// ("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
// (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort | FeatureGroup))+))? //| FeatureGroup
// ("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
// ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)? //	(=> 'properties'
// //	((ownedPropertyAssociation+=PropertyAssociation)+
// //	| noProperties?=NONE))?
// ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
protected class SystemType_Group extends GroupToken {
	
	public SystemType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_SEMITerminalRuleCall_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSystemTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "system"
protected class SystemType_SystemKeyword_0 extends KeywordToken  {
	
	public SystemType_SystemKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getSystemKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class SystemType_NameAssignment_1 extends AssignmentToken  {
	
	public SystemType_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_SystemKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemTypeAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (=> "prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))?
protected class SystemType_Group_2 extends GroupToken {
	
	public SystemType_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Alternatives_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "prototypes"
protected class SystemType_PrototypesKeyword_2_0 extends KeywordToken  {
	
	public SystemType_PrototypesKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getPrototypesKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// noPrototypes?=NONE | ownedPrototype+=Prototype+
protected class SystemType_Alternatives_2_1 extends AlternativesToken {

	public SystemType_Alternatives_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_NoPrototypesAssignment_2_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_OwnedPrototypeAssignment_2_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noPrototypes?=NONE
protected class SystemType_NoPrototypesAssignment_2_1_0 extends AssignmentToken  {
	
	public SystemType_NoPrototypesAssignment_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getNoPrototypesAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_PrototypesKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noPrototypes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noPrototypes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemTypeAccess().getNoPrototypesNONETerminalRuleCall_2_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemTypeAccess().getNoPrototypesNONETerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// ownedPrototype+=Prototype+
protected class SystemType_OwnedPrototypeAssignment_2_1_1 extends AssignmentToken  {
	
	public SystemType_OwnedPrototypeAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getOwnedPrototypeAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prototype_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedPrototype",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedPrototype");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrototypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemTypeAccess().getOwnedPrototypePrototypeParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemType_OwnedPrototypeAssignment_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemType_PrototypesKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// (=> "features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
// ownedEventDataPort+=EventDataPort)+))?
protected class SystemType_Group_3 extends GroupToken {
	
	public SystemType_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Alternatives_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "features"
protected class SystemType_FeaturesKeyword_3_0 extends KeywordToken  {
	
	public SystemType_FeaturesKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getFeaturesKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
protected class SystemType_Alternatives_3_1 extends AlternativesToken {

	public SystemType_Alternatives_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getAlternatives_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_NoFeaturesAssignment_3_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_Alternatives_3_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noFeatures?=NONE
protected class SystemType_NoFeaturesAssignment_3_1_0 extends AssignmentToken  {
	
	public SystemType_NoFeaturesAssignment_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getNoFeaturesAssignment_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_FeaturesKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFeatures",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFeatures");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemTypeAccess().getNoFeaturesNONETerminalRuleCall_3_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemTypeAccess().getNoFeaturesNONETerminalRuleCall_3_1_0_0();
			return obj;
		}
		return null;
	}

}

// (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
protected class SystemType_Alternatives_3_1_1 extends AlternativesToken {

	public SystemType_Alternatives_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getAlternatives_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_OwnedDataPortAssignment_3_1_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_OwnedEventPortAssignment_3_1_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SystemType_OwnedEventDataPortAssignment_3_1_1_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ownedDataPort+=DataPort
protected class SystemType_OwnedDataPortAssignment_3_1_1_0 extends AssignmentToken  {
	
	public SystemType_OwnedDataPortAssignment_3_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getOwnedDataPortAssignment_3_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedDataPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedDataPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemTypeAccess().getOwnedDataPortDataPortParserRuleCall_3_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemType_Alternatives_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemType_FeaturesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedEventPort+=EventPort
protected class SystemType_OwnedEventPortAssignment_3_1_1_1 extends AssignmentToken  {
	
	public SystemType_OwnedEventPortAssignment_3_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getOwnedEventPortAssignment_3_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedEventPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedEventPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemTypeAccess().getOwnedEventPortEventPortParserRuleCall_3_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemType_Alternatives_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemType_FeaturesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedEventDataPort+=EventDataPort
protected class SystemType_OwnedEventDataPortAssignment_3_1_1_2 extends AssignmentToken  {
	
	public SystemType_OwnedEventDataPortAssignment_3_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getOwnedEventDataPortAssignment_3_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedEventDataPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedEventDataPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventDataPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemTypeAccess().getOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemType_Alternatives_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemType_FeaturesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




// (=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
protected class SystemType_Group_4 extends GroupToken {
	
	public SystemType_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Alternatives_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "flows"
protected class SystemType_FlowsKeyword_4_0 extends KeywordToken  {
	
	public SystemType_FlowsKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getFlowsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SystemType_NameAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
protected class SystemType_Alternatives_4_1 extends AlternativesToken {

	public SystemType_Alternatives_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getAlternatives_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_OwnedFlowSpecificationAssignment_4_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_NoFlowsAssignment_4_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+
protected class SystemType_OwnedFlowSpecificationAssignment_4_1_0 extends AssignmentToken  {
	
	public SystemType_OwnedFlowSpecificationAssignment_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getOwnedFlowSpecificationAssignment_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedFlowSpecification",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedFlowSpecification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowSpecificationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemTypeAccess().getOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemType_OwnedFlowSpecificationAssignment_4_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemType_FlowsKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// noFlows?=NONE
protected class SystemType_NoFlowsAssignment_4_1_1 extends AssignmentToken  {
	
	public SystemType_NoFlowsAssignment_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getNoFlowsAssignment_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_FlowsKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFlows",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFlows");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemTypeAccess().getNoFlowsNONETerminalRuleCall_4_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemTypeAccess().getNoFlowsNONETerminalRuleCall_4_1_1_0();
			return obj;
		}
		return null;
	}

}



// (=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)?
protected class SystemType_Alternatives_5 extends AlternativesToken {

	public SystemType_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Group_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_NoModesAssignment_5_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// => "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class SystemType_Group_5_0 extends GroupToken {
	
	public SystemType_Group_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Alternatives_5_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "modes"
protected class SystemType_ModesKeyword_5_0_0 extends KeywordToken  {
	
	public SystemType_ModesKeyword_5_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getModesKeyword_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SystemType_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SystemType_NameAssignment_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class SystemType_Alternatives_5_0_1 extends AlternativesToken {

	public SystemType_Alternatives_5_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getAlternatives_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_OwnedModeAssignment_5_0_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_OwnedModeTransitionAssignment_5_0_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedMode+=Mode
protected class SystemType_OwnedModeAssignment_5_0_1_0 extends AssignmentToken  {
	
	public SystemType_OwnedModeAssignment_5_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getOwnedModeAssignment_5_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedMode",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemTypeAccess().getOwnedModeModeParserRuleCall_5_0_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemType_Alternatives_5_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemType_ModesKeyword_5_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedModeTransition+=ModeTransition
protected class SystemType_OwnedModeTransitionAssignment_5_0_1_1 extends AssignmentToken  {
	
	public SystemType_OwnedModeTransitionAssignment_5_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getOwnedModeTransitionAssignment_5_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedModeTransition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedModeTransition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemTypeAccess().getOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemType_Alternatives_5_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemType_ModesKeyword_5_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// noModes?=NONE
protected class SystemType_NoModesAssignment_5_1 extends AssignmentToken  {
	
	public SystemType_NoModesAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getNoModesAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SystemType_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SystemType_NameAssignment_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noModes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemTypeAccess().getNoModesNONETerminalRuleCall_5_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemTypeAccess().getNoModesNONETerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}


// ownedAnnexSubclause+=AnnexSubclause*
protected class SystemType_OwnedAnnexSubclauseAssignment_6 extends AssignmentToken  {
	
	public SystemType_OwnedAnnexSubclauseAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getOwnedAnnexSubclauseAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnexSubclause_DefaultAnnexSubclauseParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedAnnexSubclause",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedAnnexSubclause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnexSubclauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemTypeAccess().getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemType_OwnedAnnexSubclauseAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemType_Alternatives_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new SystemType_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new SystemType_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new SystemType_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 5: return new SystemType_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class SystemType_EndKeyword_7 extends KeywordToken  {
	
	public SystemType_EndKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getEndKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_OwnedAnnexSubclauseAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemType_Alternatives_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SystemType_Group_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SystemType_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new SystemType_Group_2(lastRuleCallOrigin, this, 4, inst);
			case 5: return new SystemType_NameAssignment_1(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// ID
protected class SystemType_IDTerminalRuleCall_8 extends UnassignedTextToken {

	public SystemType_IDTerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getIDTerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_EndKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class SystemType_SEMITerminalRuleCall_9 extends UnassignedTextToken {

	public SystemType_SEMITerminalRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemTypeAccess().getSEMITerminalRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemType_IDTerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SystemType ****************/


/************ begin Rule ProcessType ****************
 *
 * ProcessType returns aadl2::ProcessType:
 * 	"process" name=ID //	(ownedExtension=TypeExtension)?
 * 	//	(=> 'extends' extends=[aadl2::ProcessType|QCREF])?
 * 	("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
 * 	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
 * 	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
 * 	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
 * 	//	((ownedMode+=Mode)+))?
 * 	| noModes?=NONE)? //	(=> 'properties'
 * 	//	((ownedPropertyAssociation+=PropertyAssociation)+
 * 	//	| noProperties?=NONE))?
 * 	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
 *
 **/

// "process" name=ID //	(ownedExtension=TypeExtension)?
// //	(=> 'extends' extends=[aadl2::ProcessType|QCREF])?
// ("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
// (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
// ("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
// ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)? //	(=> 'properties'
// //	((ownedPropertyAssociation+=PropertyAssociation)+
// //	| noProperties?=NONE))?
// ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
protected class ProcessType_Group extends GroupToken {
	
	public ProcessType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_SEMITerminalRuleCall_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcessTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "process"
protected class ProcessType_ProcessKeyword_0 extends KeywordToken  {
	
	public ProcessType_ProcessKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getProcessKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ProcessType_NameAssignment_1 extends AssignmentToken  {
	
	public ProcessType_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_ProcessKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessTypeAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (=> "prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))?
protected class ProcessType_Group_2 extends GroupToken {
	
	public ProcessType_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_Alternatives_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "prototypes"
protected class ProcessType_PrototypesKeyword_2_0 extends KeywordToken  {
	
	public ProcessType_PrototypesKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getPrototypesKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// noPrototypes?=NONE | ownedPrototype+=Prototype+
protected class ProcessType_Alternatives_2_1 extends AlternativesToken {

	public ProcessType_Alternatives_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_NoPrototypesAssignment_2_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_OwnedPrototypeAssignment_2_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noPrototypes?=NONE
protected class ProcessType_NoPrototypesAssignment_2_1_0 extends AssignmentToken  {
	
	public ProcessType_NoPrototypesAssignment_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getNoPrototypesAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_PrototypesKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noPrototypes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noPrototypes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessTypeAccess().getNoPrototypesNONETerminalRuleCall_2_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessTypeAccess().getNoPrototypesNONETerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// ownedPrototype+=Prototype+
protected class ProcessType_OwnedPrototypeAssignment_2_1_1 extends AssignmentToken  {
	
	public ProcessType_OwnedPrototypeAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getOwnedPrototypeAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prototype_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedPrototype",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedPrototype");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrototypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessTypeAccess().getOwnedPrototypePrototypeParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessType_OwnedPrototypeAssignment_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessType_PrototypesKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// (=> "features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
// ownedEventDataPort+=EventDataPort)+))?
protected class ProcessType_Group_3 extends GroupToken {
	
	public ProcessType_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_Alternatives_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "features"
protected class ProcessType_FeaturesKeyword_3_0 extends KeywordToken  {
	
	public ProcessType_FeaturesKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getFeaturesKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
protected class ProcessType_Alternatives_3_1 extends AlternativesToken {

	public ProcessType_Alternatives_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getAlternatives_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_NoFeaturesAssignment_3_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_Alternatives_3_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noFeatures?=NONE
protected class ProcessType_NoFeaturesAssignment_3_1_0 extends AssignmentToken  {
	
	public ProcessType_NoFeaturesAssignment_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getNoFeaturesAssignment_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_FeaturesKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFeatures",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFeatures");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessTypeAccess().getNoFeaturesNONETerminalRuleCall_3_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessTypeAccess().getNoFeaturesNONETerminalRuleCall_3_1_0_0();
			return obj;
		}
		return null;
	}

}

// (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
protected class ProcessType_Alternatives_3_1_1 extends AlternativesToken {

	public ProcessType_Alternatives_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getAlternatives_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_OwnedDataPortAssignment_3_1_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_OwnedEventPortAssignment_3_1_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessType_OwnedEventDataPortAssignment_3_1_1_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ownedDataPort+=DataPort
protected class ProcessType_OwnedDataPortAssignment_3_1_1_0 extends AssignmentToken  {
	
	public ProcessType_OwnedDataPortAssignment_3_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getOwnedDataPortAssignment_3_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedDataPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedDataPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessTypeAccess().getOwnedDataPortDataPortParserRuleCall_3_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessType_Alternatives_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessType_FeaturesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedEventPort+=EventPort
protected class ProcessType_OwnedEventPortAssignment_3_1_1_1 extends AssignmentToken  {
	
	public ProcessType_OwnedEventPortAssignment_3_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getOwnedEventPortAssignment_3_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedEventPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedEventPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessTypeAccess().getOwnedEventPortEventPortParserRuleCall_3_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessType_Alternatives_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessType_FeaturesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedEventDataPort+=EventDataPort
protected class ProcessType_OwnedEventDataPortAssignment_3_1_1_2 extends AssignmentToken  {
	
	public ProcessType_OwnedEventDataPortAssignment_3_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getOwnedEventDataPortAssignment_3_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedEventDataPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedEventDataPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventDataPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessTypeAccess().getOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessType_Alternatives_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessType_FeaturesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




// (=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
protected class ProcessType_Group_4 extends GroupToken {
	
	public ProcessType_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_Alternatives_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "flows"
protected class ProcessType_FlowsKeyword_4_0 extends KeywordToken  {
	
	public ProcessType_FlowsKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getFlowsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessType_NameAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
protected class ProcessType_Alternatives_4_1 extends AlternativesToken {

	public ProcessType_Alternatives_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getAlternatives_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_OwnedFlowSpecificationAssignment_4_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_NoFlowsAssignment_4_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+
protected class ProcessType_OwnedFlowSpecificationAssignment_4_1_0 extends AssignmentToken  {
	
	public ProcessType_OwnedFlowSpecificationAssignment_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getOwnedFlowSpecificationAssignment_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedFlowSpecification",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedFlowSpecification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowSpecificationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessTypeAccess().getOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessType_OwnedFlowSpecificationAssignment_4_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessType_FlowsKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// noFlows?=NONE
protected class ProcessType_NoFlowsAssignment_4_1_1 extends AssignmentToken  {
	
	public ProcessType_NoFlowsAssignment_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getNoFlowsAssignment_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_FlowsKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFlows",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFlows");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessTypeAccess().getNoFlowsNONETerminalRuleCall_4_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessTypeAccess().getNoFlowsNONETerminalRuleCall_4_1_1_0();
			return obj;
		}
		return null;
	}

}



// (=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)?
protected class ProcessType_Alternatives_5 extends AlternativesToken {

	public ProcessType_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_Group_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_NoModesAssignment_5_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// => "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class ProcessType_Group_5_0 extends GroupToken {
	
	public ProcessType_Group_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_Alternatives_5_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "modes"
protected class ProcessType_ModesKeyword_5_0_0 extends KeywordToken  {
	
	public ProcessType_ModesKeyword_5_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getModesKeyword_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessType_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ProcessType_NameAssignment_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class ProcessType_Alternatives_5_0_1 extends AlternativesToken {

	public ProcessType_Alternatives_5_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getAlternatives_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_OwnedModeAssignment_5_0_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_OwnedModeTransitionAssignment_5_0_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedMode+=Mode
protected class ProcessType_OwnedModeAssignment_5_0_1_0 extends AssignmentToken  {
	
	public ProcessType_OwnedModeAssignment_5_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getOwnedModeAssignment_5_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedMode",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessTypeAccess().getOwnedModeModeParserRuleCall_5_0_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessType_Alternatives_5_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessType_ModesKeyword_5_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedModeTransition+=ModeTransition
protected class ProcessType_OwnedModeTransitionAssignment_5_0_1_1 extends AssignmentToken  {
	
	public ProcessType_OwnedModeTransitionAssignment_5_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getOwnedModeTransitionAssignment_5_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedModeTransition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedModeTransition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessTypeAccess().getOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessType_Alternatives_5_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessType_ModesKeyword_5_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// noModes?=NONE
protected class ProcessType_NoModesAssignment_5_1 extends AssignmentToken  {
	
	public ProcessType_NoModesAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getNoModesAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessType_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ProcessType_NameAssignment_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noModes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessTypeAccess().getNoModesNONETerminalRuleCall_5_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessTypeAccess().getNoModesNONETerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}


// ownedAnnexSubclause+=AnnexSubclause*
protected class ProcessType_OwnedAnnexSubclauseAssignment_6 extends AssignmentToken  {
	
	public ProcessType_OwnedAnnexSubclauseAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getOwnedAnnexSubclauseAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnexSubclause_DefaultAnnexSubclauseParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedAnnexSubclause",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedAnnexSubclause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnexSubclauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessTypeAccess().getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessType_OwnedAnnexSubclauseAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessType_Alternatives_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ProcessType_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new ProcessType_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new ProcessType_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 5: return new ProcessType_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class ProcessType_EndKeyword_7 extends KeywordToken  {
	
	public ProcessType_EndKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getEndKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_OwnedAnnexSubclauseAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessType_Alternatives_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessType_Group_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ProcessType_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ProcessType_Group_2(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ProcessType_NameAssignment_1(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// ID
protected class ProcessType_IDTerminalRuleCall_8 extends UnassignedTextToken {

	public ProcessType_IDTerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getIDTerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_EndKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class ProcessType_SEMITerminalRuleCall_9 extends UnassignedTextToken {

	public ProcessType_SEMITerminalRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessTypeAccess().getSEMITerminalRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessType_IDTerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ProcessType ****************/


/************ begin Rule ThreadType ****************
 *
 * ThreadType returns aadl2::ThreadType:
 * 	"thread" name=ID //	(ownedExtension=TypeExtension)?
 * 	//	(=> 'extends' extends=[aadl2::ThreadType|QCREF])?
 * 	("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
 * 	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
 * 	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
 * 	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
 * 	//	((ownedMode+=Mode)+))?
 * 	| noModes?=NONE)? //	(=> 'properties'
 * 	//	((ownedPropertyAssociation+=PropertyAssociation)+
 * 	//	| noProperties?=NONE))?
 * 	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
 *
 **/

// "thread" name=ID //	(ownedExtension=TypeExtension)?
// //	(=> 'extends' extends=[aadl2::ThreadType|QCREF])?
// ("prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))? ("features" (noFeatures?=NONE |
// (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
// ("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
// ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)? //	(=> 'properties'
// //	((ownedPropertyAssociation+=PropertyAssociation)+
// //	| noProperties?=NONE))?
// ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
protected class ThreadType_Group extends GroupToken {
	
	public ThreadType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_SEMITerminalRuleCall_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getThreadTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "thread"
protected class ThreadType_ThreadKeyword_0 extends KeywordToken  {
	
	public ThreadType_ThreadKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getThreadKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ThreadType_NameAssignment_1 extends AssignmentToken  {
	
	public ThreadType_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_ThreadKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getThreadTypeAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getThreadTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (=> "prototypes" (noPrototypes?=NONE | ownedPrototype+=Prototype+))?
protected class ThreadType_Group_2 extends GroupToken {
	
	public ThreadType_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_Alternatives_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "prototypes"
protected class ThreadType_PrototypesKeyword_2_0 extends KeywordToken  {
	
	public ThreadType_PrototypesKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getPrototypesKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// noPrototypes?=NONE | ownedPrototype+=Prototype+
protected class ThreadType_Alternatives_2_1 extends AlternativesToken {

	public ThreadType_Alternatives_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_NoPrototypesAssignment_2_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_OwnedPrototypeAssignment_2_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noPrototypes?=NONE
protected class ThreadType_NoPrototypesAssignment_2_1_0 extends AssignmentToken  {
	
	public ThreadType_NoPrototypesAssignment_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getNoPrototypesAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_PrototypesKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noPrototypes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noPrototypes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getThreadTypeAccess().getNoPrototypesNONETerminalRuleCall_2_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getThreadTypeAccess().getNoPrototypesNONETerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// ownedPrototype+=Prototype+
protected class ThreadType_OwnedPrototypeAssignment_2_1_1 extends AssignmentToken  {
	
	public ThreadType_OwnedPrototypeAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getOwnedPrototypeAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prototype_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedPrototype",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedPrototype");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrototypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThreadTypeAccess().getOwnedPrototypePrototypeParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThreadType_OwnedPrototypeAssignment_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ThreadType_PrototypesKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// (=> "features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
// ownedEventDataPort+=EventDataPort)+))?
protected class ThreadType_Group_3 extends GroupToken {
	
	public ThreadType_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_Alternatives_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "features"
protected class ThreadType_FeaturesKeyword_3_0 extends KeywordToken  {
	
	public ThreadType_FeaturesKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getFeaturesKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
protected class ThreadType_Alternatives_3_1 extends AlternativesToken {

	public ThreadType_Alternatives_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getAlternatives_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_NoFeaturesAssignment_3_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_Alternatives_3_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noFeatures?=NONE
protected class ThreadType_NoFeaturesAssignment_3_1_0 extends AssignmentToken  {
	
	public ThreadType_NoFeaturesAssignment_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getNoFeaturesAssignment_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_FeaturesKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFeatures",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFeatures");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getThreadTypeAccess().getNoFeaturesNONETerminalRuleCall_3_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getThreadTypeAccess().getNoFeaturesNONETerminalRuleCall_3_1_0_0();
			return obj;
		}
		return null;
	}

}

// (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
protected class ThreadType_Alternatives_3_1_1 extends AlternativesToken {

	public ThreadType_Alternatives_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getAlternatives_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_OwnedDataPortAssignment_3_1_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_OwnedEventPortAssignment_3_1_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ThreadType_OwnedEventDataPortAssignment_3_1_1_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ownedDataPort+=DataPort
protected class ThreadType_OwnedDataPortAssignment_3_1_1_0 extends AssignmentToken  {
	
	public ThreadType_OwnedDataPortAssignment_3_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getOwnedDataPortAssignment_3_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedDataPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedDataPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThreadTypeAccess().getOwnedDataPortDataPortParserRuleCall_3_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThreadType_Alternatives_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ThreadType_FeaturesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedEventPort+=EventPort
protected class ThreadType_OwnedEventPortAssignment_3_1_1_1 extends AssignmentToken  {
	
	public ThreadType_OwnedEventPortAssignment_3_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getOwnedEventPortAssignment_3_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedEventPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedEventPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThreadTypeAccess().getOwnedEventPortEventPortParserRuleCall_3_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThreadType_Alternatives_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ThreadType_FeaturesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedEventDataPort+=EventDataPort
protected class ThreadType_OwnedEventDataPortAssignment_3_1_1_2 extends AssignmentToken  {
	
	public ThreadType_OwnedEventDataPortAssignment_3_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getOwnedEventDataPortAssignment_3_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedEventDataPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedEventDataPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventDataPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThreadTypeAccess().getOwnedEventDataPortEventDataPortParserRuleCall_3_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThreadType_Alternatives_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ThreadType_FeaturesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




// (=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
protected class ThreadType_Group_4 extends GroupToken {
	
	public ThreadType_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_Alternatives_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "flows"
protected class ThreadType_FlowsKeyword_4_0 extends KeywordToken  {
	
	public ThreadType_FlowsKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getFlowsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ThreadType_NameAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
protected class ThreadType_Alternatives_4_1 extends AlternativesToken {

	public ThreadType_Alternatives_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getAlternatives_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_OwnedFlowSpecificationAssignment_4_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_NoFlowsAssignment_4_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+
protected class ThreadType_OwnedFlowSpecificationAssignment_4_1_0 extends AssignmentToken  {
	
	public ThreadType_OwnedFlowSpecificationAssignment_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getOwnedFlowSpecificationAssignment_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedFlowSpecification",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedFlowSpecification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowSpecificationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThreadTypeAccess().getOwnedFlowSpecificationFlowSpecificationParserRuleCall_4_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThreadType_OwnedFlowSpecificationAssignment_4_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ThreadType_FlowsKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// noFlows?=NONE
protected class ThreadType_NoFlowsAssignment_4_1_1 extends AssignmentToken  {
	
	public ThreadType_NoFlowsAssignment_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getNoFlowsAssignment_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_FlowsKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFlows",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFlows");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getThreadTypeAccess().getNoFlowsNONETerminalRuleCall_4_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getThreadTypeAccess().getNoFlowsNONETerminalRuleCall_4_1_1_0();
			return obj;
		}
		return null;
	}

}



// (=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)?
protected class ThreadType_Alternatives_5 extends AlternativesToken {

	public ThreadType_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_Group_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_NoModesAssignment_5_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// => "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class ThreadType_Group_5_0 extends GroupToken {
	
	public ThreadType_Group_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_Alternatives_5_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "modes"
protected class ThreadType_ModesKeyword_5_0_0 extends KeywordToken  {
	
	public ThreadType_ModesKeyword_5_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getModesKeyword_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ThreadType_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ThreadType_NameAssignment_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class ThreadType_Alternatives_5_0_1 extends AlternativesToken {

	public ThreadType_Alternatives_5_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getAlternatives_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_OwnedModeAssignment_5_0_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_OwnedModeTransitionAssignment_5_0_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedMode+=Mode
protected class ThreadType_OwnedModeAssignment_5_0_1_0 extends AssignmentToken  {
	
	public ThreadType_OwnedModeAssignment_5_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getOwnedModeAssignment_5_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedMode",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThreadTypeAccess().getOwnedModeModeParserRuleCall_5_0_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThreadType_Alternatives_5_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ThreadType_ModesKeyword_5_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedModeTransition+=ModeTransition
protected class ThreadType_OwnedModeTransitionAssignment_5_0_1_1 extends AssignmentToken  {
	
	public ThreadType_OwnedModeTransitionAssignment_5_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getOwnedModeTransitionAssignment_5_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedModeTransition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedModeTransition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThreadTypeAccess().getOwnedModeTransitionModeTransitionParserRuleCall_5_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThreadType_Alternatives_5_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ThreadType_ModesKeyword_5_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// noModes?=NONE
protected class ThreadType_NoModesAssignment_5_1 extends AssignmentToken  {
	
	public ThreadType_NoModesAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getNoModesAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ThreadType_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ThreadType_NameAssignment_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noModes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getThreadTypeAccess().getNoModesNONETerminalRuleCall_5_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getThreadTypeAccess().getNoModesNONETerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}


// ownedAnnexSubclause+=AnnexSubclause*
protected class ThreadType_OwnedAnnexSubclauseAssignment_6 extends AssignmentToken  {
	
	public ThreadType_OwnedAnnexSubclauseAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getOwnedAnnexSubclauseAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnexSubclause_DefaultAnnexSubclauseParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedAnnexSubclause",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedAnnexSubclause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnexSubclauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThreadTypeAccess().getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThreadType_OwnedAnnexSubclauseAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ThreadType_Alternatives_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ThreadType_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new ThreadType_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new ThreadType_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 5: return new ThreadType_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class ThreadType_EndKeyword_7 extends KeywordToken  {
	
	public ThreadType_EndKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getEndKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_OwnedAnnexSubclauseAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ThreadType_Alternatives_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ThreadType_Group_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ThreadType_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ThreadType_Group_2(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ThreadType_NameAssignment_1(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// ID
protected class ThreadType_IDTerminalRuleCall_8 extends UnassignedTextToken {

	public ThreadType_IDTerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getIDTerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_EndKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class ThreadType_SEMITerminalRuleCall_9 extends UnassignedTextToken {

	public ThreadType_SEMITerminalRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getThreadTypeAccess().getSEMITerminalRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThreadType_IDTerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ThreadType ****************/


/************ begin Rule ProcessorType ****************
 *
 * ProcessorType returns aadl2::ProcessorType:
 * 	"processor" name=ID //	(=> 'extends' extends=[aadl2::ProcessorType|QCREF])?
 * 	//	(ownedExtension=TypeExtension)?
 * 	("features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
 * 	ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
 * 	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
 * 	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
 * 	//	((ownedMode+=Mode)+))?
 * 	| noModes?=NONE)? //	(=> 'properties'
 * 	//	((ownedPropertyAssociation+=PropertyAssociation)+
 * 	//	| noProperties?=NONE))?
 * 	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
 *
 **/

// "processor" name=ID //	(=> 'extends' extends=[aadl2::ProcessorType|QCREF])?
// //	(ownedExtension=TypeExtension)?
// ("features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
// ownedEventDataPort+=EventDataPort)+))? //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
// ("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
// ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)? //	(=> 'properties'
// //	((ownedPropertyAssociation+=PropertyAssociation)+
// //	| noProperties?=NONE))?
// ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
protected class ProcessorType_Group extends GroupToken {
	
	public ProcessorType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_SEMITerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcessorTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "processor"
protected class ProcessorType_ProcessorKeyword_0 extends KeywordToken  {
	
	public ProcessorType_ProcessorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getProcessorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ProcessorType_NameAssignment_1 extends AssignmentToken  {
	
	public ProcessorType_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_ProcessorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessorTypeAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessorTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (=> "features" (noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort |
// ownedEventDataPort+=EventDataPort)+))?
protected class ProcessorType_Group_2 extends GroupToken {
	
	public ProcessorType_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_Alternatives_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "features"
protected class ProcessorType_FeaturesKeyword_2_0 extends KeywordToken  {
	
	public ProcessorType_FeaturesKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getFeaturesKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// noFeatures?=NONE | (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
protected class ProcessorType_Alternatives_2_1 extends AlternativesToken {

	public ProcessorType_Alternatives_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_NoFeaturesAssignment_2_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorType_Alternatives_2_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noFeatures?=NONE
protected class ProcessorType_NoFeaturesAssignment_2_1_0 extends AssignmentToken  {
	
	public ProcessorType_NoFeaturesAssignment_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getNoFeaturesAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_FeaturesKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFeatures",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFeatures");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessorTypeAccess().getNoFeaturesNONETerminalRuleCall_2_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessorTypeAccess().getNoFeaturesNONETerminalRuleCall_2_1_0_0();
			return obj;
		}
		return null;
	}

}

// (ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+
protected class ProcessorType_Alternatives_2_1_1 extends AlternativesToken {

	public ProcessorType_Alternatives_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getAlternatives_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_OwnedDataPortAssignment_2_1_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorType_OwnedEventPortAssignment_2_1_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessorType_OwnedEventDataPortAssignment_2_1_1_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ownedDataPort+=DataPort
protected class ProcessorType_OwnedDataPortAssignment_2_1_1_0 extends AssignmentToken  {
	
	public ProcessorType_OwnedDataPortAssignment_2_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getOwnedDataPortAssignment_2_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedDataPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedDataPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessorTypeAccess().getOwnedDataPortDataPortParserRuleCall_2_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessorType_Alternatives_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessorType_FeaturesKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedEventPort+=EventPort
protected class ProcessorType_OwnedEventPortAssignment_2_1_1_1 extends AssignmentToken  {
	
	public ProcessorType_OwnedEventPortAssignment_2_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getOwnedEventPortAssignment_2_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedEventPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedEventPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessorTypeAccess().getOwnedEventPortEventPortParserRuleCall_2_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessorType_Alternatives_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessorType_FeaturesKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedEventDataPort+=EventDataPort
protected class ProcessorType_OwnedEventDataPortAssignment_2_1_1_2 extends AssignmentToken  {
	
	public ProcessorType_OwnedEventDataPortAssignment_2_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getOwnedEventDataPortAssignment_2_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedEventDataPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedEventDataPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventDataPortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessorTypeAccess().getOwnedEventDataPortEventDataPortParserRuleCall_2_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessorType_Alternatives_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessorType_FeaturesKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




// (=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
protected class ProcessorType_Group_3 extends GroupToken {
	
	public ProcessorType_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_Alternatives_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "flows"
protected class ProcessorType_FlowsKeyword_3_0 extends KeywordToken  {
	
	public ProcessorType_FlowsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getFlowsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorType_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
protected class ProcessorType_Alternatives_3_1 extends AlternativesToken {

	public ProcessorType_Alternatives_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getAlternatives_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_OwnedFlowSpecificationAssignment_3_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorType_NoFlowsAssignment_3_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+
protected class ProcessorType_OwnedFlowSpecificationAssignment_3_1_0 extends AssignmentToken  {
	
	public ProcessorType_OwnedFlowSpecificationAssignment_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getOwnedFlowSpecificationAssignment_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedFlowSpecification",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedFlowSpecification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowSpecificationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessorTypeAccess().getOwnedFlowSpecificationFlowSpecificationParserRuleCall_3_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessorType_OwnedFlowSpecificationAssignment_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessorType_FlowsKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// noFlows?=NONE
protected class ProcessorType_NoFlowsAssignment_3_1_1 extends AssignmentToken  {
	
	public ProcessorType_NoFlowsAssignment_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getNoFlowsAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_FlowsKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFlows",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFlows");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessorTypeAccess().getNoFlowsNONETerminalRuleCall_3_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessorTypeAccess().getNoFlowsNONETerminalRuleCall_3_1_1_0();
			return obj;
		}
		return null;
	}

}



// (=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)?
protected class ProcessorType_Alternatives_4 extends AlternativesToken {

	public ProcessorType_Alternatives_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getAlternatives_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_Group_4_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorType_NoModesAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// => "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class ProcessorType_Group_4_0 extends GroupToken {
	
	public ProcessorType_Group_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getGroup_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_Alternatives_4_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "modes"
protected class ProcessorType_ModesKeyword_4_0_0 extends KeywordToken  {
	
	public ProcessorType_ModesKeyword_4_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getModesKeyword_4_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorType_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessorType_NameAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class ProcessorType_Alternatives_4_0_1 extends AlternativesToken {

	public ProcessorType_Alternatives_4_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getAlternatives_4_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_OwnedModeAssignment_4_0_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorType_OwnedModeTransitionAssignment_4_0_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedMode+=Mode
protected class ProcessorType_OwnedModeAssignment_4_0_1_0 extends AssignmentToken  {
	
	public ProcessorType_OwnedModeAssignment_4_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getOwnedModeAssignment_4_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedMode",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessorTypeAccess().getOwnedModeModeParserRuleCall_4_0_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessorType_Alternatives_4_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessorType_ModesKeyword_4_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedModeTransition+=ModeTransition
protected class ProcessorType_OwnedModeTransitionAssignment_4_0_1_1 extends AssignmentToken  {
	
	public ProcessorType_OwnedModeTransitionAssignment_4_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getOwnedModeTransitionAssignment_4_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedModeTransition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedModeTransition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessorTypeAccess().getOwnedModeTransitionModeTransitionParserRuleCall_4_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessorType_Alternatives_4_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessorType_ModesKeyword_4_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// noModes?=NONE
protected class ProcessorType_NoModesAssignment_4_1 extends AssignmentToken  {
	
	public ProcessorType_NoModesAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getNoModesAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorType_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessorType_NameAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noModes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessorTypeAccess().getNoModesNONETerminalRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessorTypeAccess().getNoModesNONETerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// ownedAnnexSubclause+=AnnexSubclause*
protected class ProcessorType_OwnedAnnexSubclauseAssignment_5 extends AssignmentToken  {
	
	public ProcessorType_OwnedAnnexSubclauseAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getOwnedAnnexSubclauseAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnexSubclause_DefaultAnnexSubclauseParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedAnnexSubclause",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedAnnexSubclause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnexSubclauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessorTypeAccess().getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessorType_OwnedAnnexSubclauseAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessorType_Alternatives_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ProcessorType_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new ProcessorType_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new ProcessorType_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class ProcessorType_EndKeyword_6 extends KeywordToken  {
	
	public ProcessorType_EndKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getEndKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_OwnedAnnexSubclauseAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorType_Alternatives_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessorType_Group_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ProcessorType_Group_2(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ProcessorType_NameAssignment_1(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// ID
protected class ProcessorType_IDTerminalRuleCall_7 extends UnassignedTextToken {

	public ProcessorType_IDTerminalRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getIDTerminalRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_EndKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class ProcessorType_SEMITerminalRuleCall_8 extends UnassignedTextToken {

	public ProcessorType_SEMITerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessorTypeAccess().getSEMITerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorType_IDTerminalRuleCall_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ProcessorType ****************/


/************ begin Rule DataType ****************
 *
 * DataType returns aadl2::DataType:
 * 	"data" name=ID //	(=> 'extends' extends=[aadl2::DataType|QCREF])?
 * 	//	(ownedExtension=TypeExtension)?
 * 	("features" noFeatures?=NONE)? //	| (ownedDataPort+=DataPort| ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+ )
 * 	//	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
 * 	("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
 * 	ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
 * 	//	((ownedMode+=Mode)+))?
 * 	| noModes?=NONE)? //	(=> 'properties'
 * 	//	((ownedPropertyAssociation+=PropertyAssociation)+
 * 	//	| noProperties?=NONE))?
 * 	ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI;
 *
 **/

// "data" name=ID //	(=> 'extends' extends=[aadl2::DataType|QCREF])?
// //	(ownedExtension=TypeExtension)?
// ("features" noFeatures?=NONE)? //	| (ownedDataPort+=DataPort| ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort)+ )
// //	(ownedFeature+=(DataPort | EventPort | EventDataPort))+))?
// ("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))? ("modes" (ownedMode+=Mode |
// ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)? //	(=> 'properties'
// //	((ownedPropertyAssociation+=PropertyAssociation)+
// //	| noProperties?=NONE))?
// ownedAnnexSubclause+=AnnexSubclause* "end" ID SEMI
protected class DataType_Group extends GroupToken {
	
	public DataType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_SEMITerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "data"
protected class DataType_DataKeyword_0 extends KeywordToken  {
	
	public DataType_DataKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getDataKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class DataType_NameAssignment_1 extends AssignmentToken  {
	
	public DataType_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_DataKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (=> "features" noFeatures?=NONE)?
protected class DataType_Group_2 extends GroupToken {
	
	public DataType_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_NoFeaturesAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "features"
protected class DataType_FeaturesKeyword_2_0 extends KeywordToken  {
	
	public DataType_FeaturesKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getFeaturesKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// noFeatures?=NONE
protected class DataType_NoFeaturesAssignment_2_1 extends AssignmentToken  {
	
	public DataType_NoFeaturesAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getNoFeaturesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_FeaturesKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFeatures",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFeatures");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataTypeAccess().getNoFeaturesNONETerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDataTypeAccess().getNoFeaturesNONETerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// (=> "flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE))?
protected class DataType_Group_3 extends GroupToken {
	
	public DataType_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_Alternatives_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "flows"
protected class DataType_FlowsKeyword_3_0 extends KeywordToken  {
	
	public DataType_FlowsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getFlowsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataType_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+ | noFlows?=NONE
protected class DataType_Alternatives_3_1 extends AlternativesToken {

	public DataType_Alternatives_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getAlternatives_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_OwnedFlowSpecificationAssignment_3_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataType_NoFlowsAssignment_3_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedFlowSpecification+=FlowSpecification+
protected class DataType_OwnedFlowSpecificationAssignment_3_1_0 extends AssignmentToken  {
	
	public DataType_OwnedFlowSpecificationAssignment_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getOwnedFlowSpecificationAssignment_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FlowSpecification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedFlowSpecification",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedFlowSpecification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFlowSpecificationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDataTypeAccess().getOwnedFlowSpecificationFlowSpecificationParserRuleCall_3_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataType_OwnedFlowSpecificationAssignment_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DataType_FlowsKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// noFlows?=NONE
protected class DataType_NoFlowsAssignment_3_1_1 extends AssignmentToken  {
	
	public DataType_NoFlowsAssignment_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getNoFlowsAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_FlowsKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFlows",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFlows");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataTypeAccess().getNoFlowsNONETerminalRuleCall_3_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDataTypeAccess().getNoFlowsNONETerminalRuleCall_3_1_1_0();
			return obj;
		}
		return null;
	}

}



// (=> "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ //	(=> requiresModes?='requires' 'modes'
// //	((ownedMode+=Mode)+))?
// | noModes?=NONE)?
protected class DataType_Alternatives_4 extends AlternativesToken {

	public DataType_Alternatives_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getAlternatives_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_Group_4_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataType_NoModesAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// => "modes" (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class DataType_Group_4_0 extends GroupToken {
	
	public DataType_Group_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getGroup_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_Alternatives_4_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "modes"
protected class DataType_ModesKeyword_4_0_0 extends KeywordToken  {
	
	public DataType_ModesKeyword_4_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getModesKeyword_4_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataType_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new DataType_NameAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class DataType_Alternatives_4_0_1 extends AlternativesToken {

	public DataType_Alternatives_4_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getAlternatives_4_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_OwnedModeAssignment_4_0_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataType_OwnedModeTransitionAssignment_4_0_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedMode+=Mode
protected class DataType_OwnedModeAssignment_4_0_1_0 extends AssignmentToken  {
	
	public DataType_OwnedModeAssignment_4_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getOwnedModeAssignment_4_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedMode",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDataTypeAccess().getOwnedModeModeParserRuleCall_4_0_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataType_Alternatives_4_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DataType_ModesKeyword_4_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedModeTransition+=ModeTransition
protected class DataType_OwnedModeTransitionAssignment_4_0_1_1 extends AssignmentToken  {
	
	public DataType_OwnedModeTransitionAssignment_4_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getOwnedModeTransitionAssignment_4_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedModeTransition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedModeTransition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDataTypeAccess().getOwnedModeTransitionModeTransitionParserRuleCall_4_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataType_Alternatives_4_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DataType_ModesKeyword_4_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// noModes?=NONE
protected class DataType_NoModesAssignment_4_1 extends AssignmentToken  {
	
	public DataType_NoModesAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getNoModesAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataType_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new DataType_NameAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noModes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataTypeAccess().getNoModesNONETerminalRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDataTypeAccess().getNoModesNONETerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// ownedAnnexSubclause+=AnnexSubclause*
protected class DataType_OwnedAnnexSubclauseAssignment_5 extends AssignmentToken  {
	
	public DataType_OwnedAnnexSubclauseAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getOwnedAnnexSubclauseAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnexSubclause_DefaultAnnexSubclauseParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedAnnexSubclause",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedAnnexSubclause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnexSubclauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDataTypeAccess().getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataType_OwnedAnnexSubclauseAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DataType_Alternatives_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new DataType_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new DataType_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new DataType_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class DataType_EndKeyword_6 extends KeywordToken  {
	
	public DataType_EndKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getEndKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_OwnedAnnexSubclauseAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataType_Alternatives_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new DataType_Group_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new DataType_Group_2(lastRuleCallOrigin, this, 3, inst);
			case 4: return new DataType_NameAssignment_1(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// ID
protected class DataType_IDTerminalRuleCall_7 extends UnassignedTextToken {

	public DataType_IDTerminalRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getIDTerminalRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_EndKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class DataType_SEMITerminalRuleCall_8 extends UnassignedTextToken {

	public DataType_SEMITerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataTypeAccess().getSEMITerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataType_IDTerminalRuleCall_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DataType ****************/


/************ begin Rule SystemImplementation ****************
 *
 * //ComponentImplementation :
 * //	SystemImplementation | DataImplementation 
 * //;
 * SystemImplementation returns aadl2::SystemImplementation: //	{aadl2::SystemImplementation}
 * 	"system" "implementation" //	ownedRealization=Realization DOT name=INAME
 * 	//	(ownedExtension=ImplementationExtension)?
 * 	//	implemented=[aadl2::ComponentType|ID] DOT name=INAME
 * 	//	(=> 'extends' extends=[aadl2::SystemImplementation|QCREF])?
 * 	("subcomponents" ((ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
 * 	ownedDataSubcomponent+=DataSubcomponent)+ // ownedSubcomponent instaed of each subclass
 * 	//	((ownedSubcomponent+=Subcomponent )+
 * 	| noSubcomponents?=NONE))? ("connections" (ownedPortConnection+=PortConnection+ | noConnections?=NONE))? ("flows"
 * 	noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE))? //	(=> 'properties'
 * 	//	((ownedPropertyAssociation+=PropertyAssociation)+
 * 	//	| noProperties?=NONE))?
 * 	ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI;
 *
 **/

// //	{aadl2::SystemImplementation}
// "system" "implementation" //	ownedRealization=Realization DOT name=INAME
// //	(ownedExtension=ImplementationExtension)?
// //	implemented=[aadl2::ComponentType|ID] DOT name=INAME
// //	(=> 'extends' extends=[aadl2::SystemImplementation|QCREF])?
// ("subcomponents" ((ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
// ownedDataSubcomponent+=DataSubcomponent)+ // ownedSubcomponent instaed of each subclass
// //	((ownedSubcomponent+=Subcomponent )+
// | noSubcomponents?=NONE))? ("connections" (ownedPortConnection+=PortConnection+ | noConnections?=NONE))? ("flows"
// noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE))? //	(=> 'properties'
// //	((ownedPropertyAssociation+=PropertyAssociation)+
// //	| noProperties?=NONE))?
// ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI
protected class SystemImplementation_Group extends GroupToken {
	
	public SystemImplementation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_SEMITerminalRuleCall_11(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSystemImplementationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //	{aadl2::SystemImplementation}
// "system"
protected class SystemImplementation_SystemKeyword_0 extends KeywordToken  {
	
	public SystemImplementation_SystemKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getSystemKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "implementation"
protected class SystemImplementation_ImplementationKeyword_1 extends KeywordToken  {
	
	public SystemImplementation_ImplementationKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getImplementationKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_SystemKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (=> "subcomponents" ((ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
// ownedDataSubcomponent+=DataSubcomponent)+ // ownedSubcomponent instaed of each subclass
// //	((ownedSubcomponent+=Subcomponent )+
// | noSubcomponents?=NONE))?
protected class SystemImplementation_Group_2 extends GroupToken {
	
	public SystemImplementation_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "subcomponents"
protected class SystemImplementation_SubcomponentsKeyword_2_0 extends KeywordToken  {
	
	public SystemImplementation_SubcomponentsKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getSubcomponentsKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_ImplementationKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
// ownedDataSubcomponent+=DataSubcomponent)+ // ownedSubcomponent instaed of each subclass
// //	((ownedSubcomponent+=Subcomponent )+
// | noSubcomponents?=NONE
protected class SystemImplementation_Alternatives_2_1 extends AlternativesToken {

	public SystemImplementation_Alternatives_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_2_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemImplementation_NoSubcomponentsAssignment_2_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (ownedSystemSubcomponent+=SystemSubcomponent | ownedProcessorSubcomponent+=ProcessorSubcomponent |
// ownedDataSubcomponent+=DataSubcomponent)+
protected class SystemImplementation_Alternatives_2_1_0 extends AlternativesToken {

	public SystemImplementation_Alternatives_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getAlternatives_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_OwnedSystemSubcomponentAssignment_2_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemImplementation_OwnedProcessorSubcomponentAssignment_2_1_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SystemImplementation_OwnedDataSubcomponentAssignment_2_1_0_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ownedSystemSubcomponent+=SystemSubcomponent
protected class SystemImplementation_OwnedSystemSubcomponentAssignment_2_1_0_0 extends AssignmentToken  {
	
	public SystemImplementation_OwnedSystemSubcomponentAssignment_2_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getOwnedSystemSubcomponentAssignment_2_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedSystemSubcomponent",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedSystemSubcomponent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSystemSubcomponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemImplementationAccess().getOwnedSystemSubcomponentSystemSubcomponentParserRuleCall_2_1_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemImplementation_SubcomponentsKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedProcessorSubcomponent+=ProcessorSubcomponent
protected class SystemImplementation_OwnedProcessorSubcomponentAssignment_2_1_0_1 extends AssignmentToken  {
	
	public SystemImplementation_OwnedProcessorSubcomponentAssignment_2_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getOwnedProcessorSubcomponentAssignment_2_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedProcessorSubcomponent",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedProcessorSubcomponent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessorSubcomponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemImplementationAccess().getOwnedProcessorSubcomponentProcessorSubcomponentParserRuleCall_2_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemImplementation_SubcomponentsKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedDataSubcomponent+=DataSubcomponent
protected class SystemImplementation_OwnedDataSubcomponentAssignment_2_1_0_2 extends AssignmentToken  {
	
	public SystemImplementation_OwnedDataSubcomponentAssignment_2_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getOwnedDataSubcomponentAssignment_2_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedDataSubcomponent",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedDataSubcomponent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataSubcomponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemImplementationAccess().getOwnedDataSubcomponentDataSubcomponentParserRuleCall_2_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemImplementation_SubcomponentsKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// noSubcomponents?=NONE
protected class SystemImplementation_NoSubcomponentsAssignment_2_1_1 extends AssignmentToken  {
	
	public SystemImplementation_NoSubcomponentsAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getNoSubcomponentsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_SubcomponentsKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noSubcomponents",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noSubcomponents");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemImplementationAccess().getNoSubcomponentsNONETerminalRuleCall_2_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemImplementationAccess().getNoSubcomponentsNONETerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}



// (=> "connections" (ownedPortConnection+=PortConnection+ | noConnections?=NONE))?
protected class SystemImplementation_Group_3 extends GroupToken {
	
	public SystemImplementation_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "connections"
protected class SystemImplementation_ConnectionsKeyword_3_0 extends KeywordToken  {
	
	public SystemImplementation_ConnectionsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getConnectionsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemImplementation_ImplementationKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedPortConnection+=PortConnection+ | noConnections?=NONE
protected class SystemImplementation_Alternatives_3_1 extends AlternativesToken {

	public SystemImplementation_Alternatives_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getAlternatives_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_OwnedPortConnectionAssignment_3_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemImplementation_NoConnectionsAssignment_3_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedPortConnection+=PortConnection+
protected class SystemImplementation_OwnedPortConnectionAssignment_3_1_0 extends AssignmentToken  {
	
	public SystemImplementation_OwnedPortConnectionAssignment_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getOwnedPortConnectionAssignment_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedPortConnection",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedPortConnection");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPortConnectionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemImplementationAccess().getOwnedPortConnectionPortConnectionParserRuleCall_3_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemImplementation_OwnedPortConnectionAssignment_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemImplementation_ConnectionsKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// noConnections?=NONE
protected class SystemImplementation_NoConnectionsAssignment_3_1_1 extends AssignmentToken  {
	
	public SystemImplementation_NoConnectionsAssignment_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getNoConnectionsAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_ConnectionsKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noConnections",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noConnections");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemImplementationAccess().getNoConnectionsNONETerminalRuleCall_3_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemImplementationAccess().getNoConnectionsNONETerminalRuleCall_3_1_1_0();
			return obj;
		}
		return null;
	}

}



// (=> "flows" noFlows?=NONE)?
protected class SystemImplementation_Group_4 extends GroupToken {
	
	public SystemImplementation_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_NoFlowsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "flows"
protected class SystemImplementation_FlowsKeyword_4_0 extends KeywordToken  {
	
	public SystemImplementation_FlowsKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getFlowsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemImplementation_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SystemImplementation_ImplementationKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// noFlows?=NONE
protected class SystemImplementation_NoFlowsAssignment_4_1 extends AssignmentToken  {
	
	public SystemImplementation_NoFlowsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getNoFlowsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_FlowsKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFlows",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFlows");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemImplementationAccess().getNoFlowsNONETerminalRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemImplementationAccess().getNoFlowsNONETerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// (=> "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE))?
protected class SystemImplementation_Group_5 extends GroupToken {
	
	public SystemImplementation_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "modes"
protected class SystemImplementation_ModesKeyword_5_0 extends KeywordToken  {
	
	public SystemImplementation_ModesKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getModesKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemImplementation_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SystemImplementation_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SystemImplementation_ImplementationKeyword_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE
protected class SystemImplementation_Alternatives_5_1 extends AlternativesToken {

	public SystemImplementation_Alternatives_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getAlternatives_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_5_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemImplementation_NoModesAssignment_5_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class SystemImplementation_Alternatives_5_1_0 extends AlternativesToken {

	public SystemImplementation_Alternatives_5_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getAlternatives_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_OwnedModeAssignment_5_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemImplementation_OwnedModeTransitionAssignment_5_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedMode+=Mode
protected class SystemImplementation_OwnedModeAssignment_5_1_0_0 extends AssignmentToken  {
	
	public SystemImplementation_OwnedModeAssignment_5_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getOwnedModeAssignment_5_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedMode",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemImplementationAccess().getOwnedModeModeParserRuleCall_5_1_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_5_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemImplementation_ModesKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedModeTransition+=ModeTransition
protected class SystemImplementation_OwnedModeTransitionAssignment_5_1_0_1 extends AssignmentToken  {
	
	public SystemImplementation_OwnedModeTransitionAssignment_5_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getOwnedModeTransitionAssignment_5_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedModeTransition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedModeTransition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemImplementationAccess().getOwnedModeTransitionModeTransitionParserRuleCall_5_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemImplementation_Alternatives_5_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemImplementation_ModesKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// noModes?=NONE
protected class SystemImplementation_NoModesAssignment_5_1_1 extends AssignmentToken  {
	
	public SystemImplementation_NoModesAssignment_5_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getNoModesAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_ModesKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noModes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemImplementationAccess().getNoModesNONETerminalRuleCall_5_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemImplementationAccess().getNoModesNONETerminalRuleCall_5_1_1_0();
			return obj;
		}
		return null;
	}

}



// ownedAnnexSubclause+=AnnexSubclause*
protected class SystemImplementation_OwnedAnnexSubclauseAssignment_6 extends AssignmentToken  {
	
	public SystemImplementation_OwnedAnnexSubclauseAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getOwnedAnnexSubclauseAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnexSubclause_DefaultAnnexSubclauseParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedAnnexSubclause",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedAnnexSubclause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnexSubclauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemImplementationAccess().getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemImplementation_OwnedAnnexSubclauseAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemImplementation_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new SystemImplementation_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new SystemImplementation_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new SystemImplementation_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 5: return new SystemImplementation_ImplementationKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class SystemImplementation_EndKeyword_7 extends KeywordToken  {
	
	public SystemImplementation_EndKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getEndKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_OwnedAnnexSubclauseAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemImplementation_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SystemImplementation_Group_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SystemImplementation_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new SystemImplementation_Group_2(lastRuleCallOrigin, this, 4, inst);
			case 5: return new SystemImplementation_ImplementationKeyword_1(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// ID
protected class SystemImplementation_IDTerminalRuleCall_8 extends UnassignedTextToken {

	public SystemImplementation_IDTerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getIDTerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_EndKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DOT
protected class SystemImplementation_DOTTerminalRuleCall_9 extends UnassignedTextToken {

	public SystemImplementation_DOTTerminalRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getDOTTerminalRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_IDTerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// INAME
protected class SystemImplementation_INAMEParserRuleCall_10 extends UnassignedTextToken {

	public SystemImplementation_INAMEParserRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getINAMEParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_DOTTerminalRuleCall_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class SystemImplementation_SEMITerminalRuleCall_11 extends UnassignedTextToken {

	public SystemImplementation_SEMITerminalRuleCall_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemImplementationAccess().getSEMITerminalRuleCall_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemImplementation_INAMEParserRuleCall_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SystemImplementation ****************/


/************ begin Rule DataImplementation ****************
 *
 * DataImplementation returns aadl2::DataImplementation:
 * 	"data" "implementation" //	implemented=[aadl2::DataType|ID] DOT name=INAME
 * 	//	(=> 'extends' extends=[aadl2::DataImplementation|QCREF])?
 * 	//	ownedRealization=Realization DOT name=INAME
 * 	//	(ownedExtension=ImplementationExtension)?
 * 	("subcomponents" (ownedDataSubcomponent+=DataSubcomponent //	((ownedSubcomponent+=Subcomponent )+
 * 	| noSubcomponents?=NONE))? ("flows" noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
 * 	| noModes?=NONE))? //	(=> 'properties'
 * 	//	((ownedPropertyAssociation+=PropertyAssociation)+
 * 	//	| noProperties?=NONE))?
 * 	ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI;
 *
 **/

// "data" "implementation" //	implemented=[aadl2::DataType|ID] DOT name=INAME
// //	(=> 'extends' extends=[aadl2::DataImplementation|QCREF])?
// //	ownedRealization=Realization DOT name=INAME
// //	(ownedExtension=ImplementationExtension)?
// ("subcomponents" (ownedDataSubcomponent+=DataSubcomponent //	((ownedSubcomponent+=Subcomponent )+
// | noSubcomponents?=NONE))? ("flows" noFlows?=NONE)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ |
// noModes?=NONE))? //	(=> 'properties'
// //	((ownedPropertyAssociation+=PropertyAssociation)+
// //	| noProperties?=NONE))?
// ownedAnnexSubclause+=AnnexSubclause* "end" ID DOT INAME SEMI
protected class DataImplementation_Group extends GroupToken {
	
	public DataImplementation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_SEMITerminalRuleCall_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataImplementationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "data"
protected class DataImplementation_DataKeyword_0 extends KeywordToken  {
	
	public DataImplementation_DataKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getDataKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "implementation"
protected class DataImplementation_ImplementationKeyword_1 extends KeywordToken  {
	
	public DataImplementation_ImplementationKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getImplementationKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_DataKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (=> "subcomponents" (ownedDataSubcomponent+=DataSubcomponent //	((ownedSubcomponent+=Subcomponent )+
// | noSubcomponents?=NONE))?
protected class DataImplementation_Group_2 extends GroupToken {
	
	public DataImplementation_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_Alternatives_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "subcomponents"
protected class DataImplementation_SubcomponentsKeyword_2_0 extends KeywordToken  {
	
	public DataImplementation_SubcomponentsKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getSubcomponentsKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_ImplementationKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ownedDataSubcomponent+=DataSubcomponent //	((ownedSubcomponent+=Subcomponent )+
// | noSubcomponents?=NONE
protected class DataImplementation_Alternatives_2_1 extends AlternativesToken {

	public DataImplementation_Alternatives_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getAlternatives_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_OwnedDataSubcomponentAssignment_2_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataImplementation_NoSubcomponentsAssignment_2_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedDataSubcomponent+=DataSubcomponent
protected class DataImplementation_OwnedDataSubcomponentAssignment_2_1_0 extends AssignmentToken  {
	
	public DataImplementation_OwnedDataSubcomponentAssignment_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getOwnedDataSubcomponentAssignment_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedDataSubcomponent",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedDataSubcomponent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataSubcomponentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDataImplementationAccess().getOwnedDataSubcomponentDataSubcomponentParserRuleCall_2_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataImplementation_SubcomponentsKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// noSubcomponents?=NONE
protected class DataImplementation_NoSubcomponentsAssignment_2_1_1 extends AssignmentToken  {
	
	public DataImplementation_NoSubcomponentsAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getNoSubcomponentsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_SubcomponentsKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noSubcomponents",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noSubcomponents");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataImplementationAccess().getNoSubcomponentsNONETerminalRuleCall_2_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDataImplementationAccess().getNoSubcomponentsNONETerminalRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}



// (=> "flows" noFlows?=NONE)?
protected class DataImplementation_Group_3 extends GroupToken {
	
	public DataImplementation_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_NoFlowsAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "flows"
protected class DataImplementation_FlowsKeyword_3_0 extends KeywordToken  {
	
	public DataImplementation_FlowsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getFlowsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataImplementation_ImplementationKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// noFlows?=NONE
protected class DataImplementation_NoFlowsAssignment_3_1 extends AssignmentToken  {
	
	public DataImplementation_NoFlowsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getNoFlowsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_FlowsKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noFlows",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noFlows");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataImplementationAccess().getNoFlowsNONETerminalRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDataImplementationAccess().getNoFlowsNONETerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// (=> "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE))?
protected class DataImplementation_Group_4 extends GroupToken {
	
	public DataImplementation_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_Alternatives_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "modes"
protected class DataImplementation_ModesKeyword_4_0 extends KeywordToken  {
	
	public DataImplementation_ModesKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getModesKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataImplementation_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new DataImplementation_ImplementationKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?=NONE
protected class DataImplementation_Alternatives_4_1 extends AlternativesToken {

	public DataImplementation_Alternatives_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getAlternatives_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_Alternatives_4_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataImplementation_NoModesAssignment_4_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (ownedMode+=Mode | ownedModeTransition+=ModeTransition)+
protected class DataImplementation_Alternatives_4_1_0 extends AlternativesToken {

	public DataImplementation_Alternatives_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getAlternatives_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_OwnedModeAssignment_4_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataImplementation_OwnedModeTransitionAssignment_4_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ownedMode+=Mode
protected class DataImplementation_OwnedModeAssignment_4_1_0_0 extends AssignmentToken  {
	
	public DataImplementation_OwnedModeAssignment_4_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getOwnedModeAssignment_4_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mode_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedMode",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDataImplementationAccess().getOwnedModeModeParserRuleCall_4_1_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataImplementation_Alternatives_4_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DataImplementation_ModesKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ownedModeTransition+=ModeTransition
protected class DataImplementation_OwnedModeTransitionAssignment_4_1_0_1 extends AssignmentToken  {
	
	public DataImplementation_OwnedModeTransitionAssignment_4_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getOwnedModeTransitionAssignment_4_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedModeTransition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedModeTransition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDataImplementationAccess().getOwnedModeTransitionModeTransitionParserRuleCall_4_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataImplementation_Alternatives_4_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DataImplementation_ModesKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// noModes?=NONE
protected class DataImplementation_NoModesAssignment_4_1_1 extends AssignmentToken  {
	
	public DataImplementation_NoModesAssignment_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getNoModesAssignment_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_ModesKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noModes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataImplementationAccess().getNoModesNONETerminalRuleCall_4_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDataImplementationAccess().getNoModesNONETerminalRuleCall_4_1_1_0();
			return obj;
		}
		return null;
	}

}



// ownedAnnexSubclause+=AnnexSubclause*
protected class DataImplementation_OwnedAnnexSubclauseAssignment_5 extends AssignmentToken  {
	
	public DataImplementation_OwnedAnnexSubclauseAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getOwnedAnnexSubclauseAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnnexSubclause_DefaultAnnexSubclauseParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ownedAnnexSubclause",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ownedAnnexSubclause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnexSubclauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDataImplementationAccess().getOwnedAnnexSubclauseAnnexSubclauseParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataImplementation_OwnedAnnexSubclauseAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DataImplementation_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new DataImplementation_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new DataImplementation_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new DataImplementation_ImplementationKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class DataImplementation_EndKeyword_6 extends KeywordToken  {
	
	public DataImplementation_EndKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getEndKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_OwnedAnnexSubclauseAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataImplementation_Group_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new DataImplementation_Group_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new DataImplementation_Group_2(lastRuleCallOrigin, this, 3, inst);
			case 4: return new DataImplementation_ImplementationKeyword_1(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// ID
protected class DataImplementation_IDTerminalRuleCall_7 extends UnassignedTextToken {

	public DataImplementation_IDTerminalRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getIDTerminalRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_EndKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DOT
protected class DataImplementation_DOTTerminalRuleCall_8 extends UnassignedTextToken {

	public DataImplementation_DOTTerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getDOTTerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_IDTerminalRuleCall_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// INAME
protected class DataImplementation_INAMEParserRuleCall_9 extends UnassignedTextToken {

	public DataImplementation_INAMEParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getINAMEParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_DOTTerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class DataImplementation_SEMITerminalRuleCall_10 extends UnassignedTextToken {

	public DataImplementation_SEMITerminalRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataImplementationAccess().getSEMITerminalRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataImplementation_INAMEParserRuleCall_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DataImplementation ****************/


/************ begin Rule Realization ****************
 *
 * Realization returns aadl2::Realization:
 * 	implemented=[aadl2::SystemType];
 *
 **/

// implemented=[aadl2::SystemType]
protected class Realization_ImplementedAssignment extends AssignmentToken  {
	
	public Realization_ImplementedAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRealizationAccess().getImplementedAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRealizationRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("implemented",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("implemented");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRealizationAccess().getImplementedSystemTypeCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getRealizationAccess().getImplementedSystemTypeCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule Realization ****************/


/************ begin Rule Prototype ****************
 *
 * Prototype returns aadl2::Prototype:
 * 	ComponentPrototype | FeatureGroupPrototype | FeaturePrototype;
 *
 **/

// ComponentPrototype | FeatureGroupPrototype | FeaturePrototype
protected class Prototype_Alternatives extends AlternativesToken {

	public Prototype_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrototypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prototype_ComponentPrototypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Prototype_FeatureGroupPrototypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Prototype_FeaturePrototypeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentPrototypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureGroupPrototypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeaturePrototypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ComponentPrototype
protected class Prototype_ComponentPrototypeParserRuleCall_0 extends RuleCallToken {
	
	public Prototype_ComponentPrototypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrototypeAccess().getComponentPrototypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentPrototype_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentPrototypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ComponentPrototype_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FeatureGroupPrototype
protected class Prototype_FeatureGroupPrototypeParserRuleCall_1 extends RuleCallToken {
	
	public Prototype_FeatureGroupPrototypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrototypeAccess().getFeatureGroupPrototypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupPrototype_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureGroupPrototypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FeatureGroupPrototype_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FeaturePrototype
protected class Prototype_FeaturePrototypeParserRuleCall_2 extends RuleCallToken {
	
	public Prototype_FeaturePrototypeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrototypeAccess().getFeaturePrototypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeaturePrototype_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeaturePrototypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FeaturePrototype_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Prototype ****************/


/************ begin Rule ComponentPrototype ****************
 *
 * ComponentPrototype returns aadl2::ComponentPrototype:
 * 	name=ID COLON category=ComponentCategoryKW constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
 * 	SEMI;
 *
 **/

// name=ID COLON category=ComponentCategoryKW constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
// SEMI
protected class ComponentPrototype_Group extends GroupToken {
	
	public ComponentPrototype_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentPrototypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentPrototype_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentPrototypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class ComponentPrototype_NameAssignment_0 extends AssignmentToken  {
	
	public ComponentPrototype_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentPrototypeAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getComponentPrototypeAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getComponentPrototypeAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class ComponentPrototype_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public ComponentPrototype_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentPrototypeAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentPrototype_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// category=ComponentCategoryKW
protected class ComponentPrototype_CategoryAssignment_2 extends AssignmentToken  {
	
	public ComponentPrototype_CategoryAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentPrototypeAccess().getCategoryAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentPrototype_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("category",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("category");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getComponentPrototypeAccess().getCategoryComponentCategoryKWParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getComponentPrototypeAccess().getCategoryComponentCategoryKWParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// constrainingClassifier=[aadl2::ComponentClassifier|QCREF]?
protected class ComponentPrototype_ConstrainingClassifierAssignment_3 extends AssignmentToken  {
	
	public ComponentPrototype_ConstrainingClassifierAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentPrototypeAccess().getConstrainingClassifierAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentPrototype_CategoryAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constrainingClassifier",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constrainingClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentPrototypeAccess().getConstrainingClassifierComponentClassifierCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getComponentPrototypeAccess().getConstrainingClassifierComponentClassifierCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
// SEMI
protected class ComponentPrototype_SEMITerminalRuleCall_4 extends UnassignedTextToken {

	public ComponentPrototype_SEMITerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentPrototypeAccess().getSEMITerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentPrototype_ConstrainingClassifierAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentPrototype_CategoryAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ComponentPrototype ****************/


/************ begin Rule FeatureGroupPrototype ****************
 *
 * FeatureGroupPrototype returns aadl2::FeatureGroupPrototype:
 * 	name=ID COLON "feature" "group" constrainingFeatureGroupType=[aadl2::FeatureGroupType|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
 * 	SEMI;
 *
 **/

// name=ID COLON "feature" "group" constrainingFeatureGroupType=[aadl2::FeatureGroupType|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
// SEMI
protected class FeatureGroupPrototype_Group extends GroupToken {
	
	public FeatureGroupPrototype_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureGroupPrototypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupPrototype_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureGroupPrototypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class FeatureGroupPrototype_NameAssignment_0 extends AssignmentToken  {
	
	public FeatureGroupPrototype_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureGroupPrototypeAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureGroupPrototypeAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureGroupPrototypeAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class FeatureGroupPrototype_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public FeatureGroupPrototype_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureGroupPrototypeAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupPrototype_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "feature"
protected class FeatureGroupPrototype_FeatureKeyword_2 extends KeywordToken  {
	
	public FeatureGroupPrototype_FeatureKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureGroupPrototypeAccess().getFeatureKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupPrototype_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "group"
protected class FeatureGroupPrototype_GroupKeyword_3 extends KeywordToken  {
	
	public FeatureGroupPrototype_GroupKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureGroupPrototypeAccess().getGroupKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupPrototype_FeatureKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// constrainingFeatureGroupType=[aadl2::FeatureGroupType|QCREF]?
protected class FeatureGroupPrototype_ConstrainingFeatureGroupTypeAssignment_4 extends AssignmentToken  {
	
	public FeatureGroupPrototype_ConstrainingFeatureGroupTypeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureGroupPrototypeAccess().getConstrainingFeatureGroupTypeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupPrototype_GroupKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constrainingFeatureGroupType",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constrainingFeatureGroupType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureGroupPrototypeAccess().getConstrainingFeatureGroupTypeFeatureGroupTypeCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeatureGroupPrototypeAccess().getConstrainingFeatureGroupTypeFeatureGroupTypeCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
// SEMI
protected class FeatureGroupPrototype_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public FeatureGroupPrototype_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureGroupPrototypeAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupPrototype_ConstrainingFeatureGroupTypeAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureGroupPrototype_GroupKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule FeatureGroupPrototype ****************/


/************ begin Rule FeaturePrototype ****************
 *
 * FeaturePrototype returns aadl2::FeaturePrototype:
 * 	name=ID COLON "feature" direction=PortDirection? // only in or out not inout
 * 	//(incoming?='in' | outgoing?='out')?
 * 	constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
 * 	SEMI;
 *
 **/

// name=ID COLON "feature" direction=PortDirection? // only in or out not inout
// //(incoming?='in' | outgoing?='out')?
// constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
// SEMI
protected class FeaturePrototype_Group extends GroupToken {
	
	public FeaturePrototype_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeaturePrototypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeaturePrototype_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeaturePrototypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class FeaturePrototype_NameAssignment_0 extends AssignmentToken  {
	
	public FeaturePrototype_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeaturePrototypeAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeaturePrototypeAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeaturePrototypeAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class FeaturePrototype_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public FeaturePrototype_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeaturePrototypeAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeaturePrototype_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "feature"
protected class FeaturePrototype_FeatureKeyword_2 extends KeywordToken  {
	
	public FeaturePrototype_FeatureKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeaturePrototypeAccess().getFeatureKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeaturePrototype_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// direction=PortDirection?
protected class FeaturePrototype_DirectionAssignment_3 extends AssignmentToken  {
	
	public FeaturePrototype_DirectionAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeaturePrototypeAccess().getDirectionAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeaturePrototype_FeatureKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("direction",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("direction");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeaturePrototypeAccess().getDirectionPortDirectionParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFeaturePrototypeAccess().getDirectionPortDirectionParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// constrainingClassifier=[aadl2::ComponentClassifier|QCREF]?
protected class FeaturePrototype_ConstrainingClassifierAssignment_4 extends AssignmentToken  {
	
	public FeaturePrototype_ConstrainingClassifierAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeaturePrototypeAccess().getConstrainingClassifierAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeaturePrototype_DirectionAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeaturePrototype_FeatureKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constrainingClassifier",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constrainingClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeaturePrototypeAccess().getConstrainingClassifierComponentClassifierCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeaturePrototypeAccess().getConstrainingClassifierComponentClassifierCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// //	(=> LCURLY (ownedPropertyAssociation+=PropertyAssociation)+ RCURLY)?
// SEMI
protected class FeaturePrototype_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public FeaturePrototype_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeaturePrototypeAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeaturePrototype_ConstrainingClassifierAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeaturePrototype_DirectionAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FeaturePrototype_FeatureKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule FeaturePrototype ****************/


/************ begin Rule DataPort ****************
 *
 * //ComponentClassifierOrPrototype returns aadl2::ComponentClassifierOrPrototype:
 * //	ComponentClassifier | ComponentPrototype;
 * DataPort returns aadl2::DataPort:
 * 	name=ID COLON direction=PortDirection "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI;
 *
 **/

// name=ID COLON direction=PortDirection "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI
protected class DataPort_Group extends GroupToken {
	
	public DataPort_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataPortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_SEMITerminalRuleCall_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataPortRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class DataPort_NameAssignment_0 extends AssignmentToken  {
	
	public DataPort_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataPortAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataPortAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDataPortAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class DataPort_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public DataPort_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataPortAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// direction=PortDirection
protected class DataPort_DirectionAssignment_2 extends AssignmentToken  {
	
	public DataPort_DirectionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataPortAccess().getDirectionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("direction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("direction");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataPortAccess().getDirectionPortDirectionParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getDataPortAccess().getDirectionPortDirectionParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "data"
protected class DataPort_DataKeyword_3 extends KeywordToken  {
	
	public DataPort_DataKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataPortAccess().getDataKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_DirectionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "port"
protected class DataPort_PortKeyword_4 extends KeywordToken  {
	
	public DataPort_PortKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataPortAccess().getPortKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_DataKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// dataClassifier=[aadl2::DataType|QCREF]?
protected class DataPort_DataClassifierAssignment_5 extends AssignmentToken  {
	
	public DataPort_DataClassifierAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataPortAccess().getDataClassifierAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_PortKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dataClassifier",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dataClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataPortAccess().getDataClassifierDataTypeCrossReference_5_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getDataPortAccess().getDataClassifierDataTypeCrossReference_5_0(); 
				return obj;
			}
		}
		return null;
	}

}

// SEMI
protected class DataPort_SEMITerminalRuleCall_6 extends UnassignedTextToken {

	public DataPort_SEMITerminalRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataPortAccess().getSEMITerminalRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_DataClassifierAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataPort_PortKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule DataPort ****************/


/************ begin Rule EventDataPort ****************
 *
 * //	name=ID COLON ( incoming?=IN)? (outgoing?=OUT)? 'data' 'port' (dataClassifier=[DataType|QCREF])? SEMI ;
 * EventDataPort returns aadl2::EventDataPort:
 * 	name=ID COLON direction=PortDirection "event" "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI;
 *
 **/

// name=ID COLON direction=PortDirection "event" "data" "port" dataClassifier=[aadl2::DataType|QCREF]? SEMI
protected class EventDataPort_Group extends GroupToken {
	
	public EventDataPort_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventDataPortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_SEMITerminalRuleCall_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventDataPortRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class EventDataPort_NameAssignment_0 extends AssignmentToken  {
	
	public EventDataPort_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDataPortAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventDataPortAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEventDataPortAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class EventDataPort_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public EventDataPort_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventDataPortAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// direction=PortDirection
protected class EventDataPort_DirectionAssignment_2 extends AssignmentToken  {
	
	public EventDataPort_DirectionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDataPortAccess().getDirectionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("direction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("direction");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventDataPortAccess().getDirectionPortDirectionParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getEventDataPortAccess().getDirectionPortDirectionParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "event"
protected class EventDataPort_EventKeyword_3 extends KeywordToken  {
	
	public EventDataPort_EventKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDataPortAccess().getEventKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_DirectionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "data"
protected class EventDataPort_DataKeyword_4 extends KeywordToken  {
	
	public EventDataPort_DataKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDataPortAccess().getDataKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_EventKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "port"
protected class EventDataPort_PortKeyword_5 extends KeywordToken  {
	
	public EventDataPort_PortKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventDataPortAccess().getPortKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_DataKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// dataClassifier=[aadl2::DataType|QCREF]?
protected class EventDataPort_DataClassifierAssignment_6 extends AssignmentToken  {
	
	public EventDataPort_DataClassifierAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDataPortAccess().getDataClassifierAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_PortKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dataClassifier",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dataClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventDataPortAccess().getDataClassifierDataTypeCrossReference_6_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getEventDataPortAccess().getDataClassifierDataTypeCrossReference_6_0(); 
				return obj;
			}
		}
		return null;
	}

}

// SEMI
protected class EventDataPort_SEMITerminalRuleCall_7 extends UnassignedTextToken {

	public EventDataPort_SEMITerminalRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventDataPortAccess().getSEMITerminalRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_DataClassifierAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDataPort_PortKeyword_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule EventDataPort ****************/


/************ begin Rule EventPort ****************
 *
 * //	name=ID COLON ( incoming?=IN)? (outgoing?=OUT)? 'event' 'data' 'port' (dataClassifier=[DataType|QCREF])? SEMI ;
 * EventPort returns aadl2::EventPort:
 * 	name=ID COLON direction=PortDirection "event" "port" SEMI;
 *
 **/

// name=ID COLON direction=PortDirection "event" "port" SEMI
protected class EventPort_Group extends GroupToken {
	
	public EventPort_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventPortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventPortRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class EventPort_NameAssignment_0 extends AssignmentToken  {
	
	public EventPort_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventPortAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventPortAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEventPortAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class EventPort_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public EventPort_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventPortAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// direction=PortDirection
protected class EventPort_DirectionAssignment_2 extends AssignmentToken  {
	
	public EventPort_DirectionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventPortAccess().getDirectionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("direction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("direction");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventPortAccess().getDirectionPortDirectionParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getEventPortAccess().getDirectionPortDirectionParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "event"
protected class EventPort_EventKeyword_3 extends KeywordToken  {
	
	public EventPort_EventKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventPortAccess().getEventKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_DirectionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "port"
protected class EventPort_PortKeyword_4 extends KeywordToken  {
	
	public EventPort_PortKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEventPortAccess().getPortKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_EventKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class EventPort_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public EventPort_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventPortAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_PortKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EventPort ****************/


/************ begin Rule FeatureGroup ****************
 *
 * //	name=ID COLON ( incoming?=IN |outgoing?=OUT | (incoming?=IN outgoing?=OUT)) 'event' 'port' SEMI ;
 * FeatureGroup returns aadl2::FeatureGroup:
 * 	name=ID "feature" "group" featureGroupType=[aadl2::FeatureGroupType|QCREF] SEMI;
 *
 **/

// name=ID "feature" "group" featureGroupType=[aadl2::FeatureGroupType|QCREF] SEMI
protected class FeatureGroup_Group extends GroupToken {
	
	public FeatureGroup_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureGroupAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroup_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureGroupRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class FeatureGroup_NameAssignment_0 extends AssignmentToken  {
	
	public FeatureGroup_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureGroupAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureGroupAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureGroupAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "feature"
protected class FeatureGroup_FeatureKeyword_1 extends KeywordToken  {
	
	public FeatureGroup_FeatureKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureGroupAccess().getFeatureKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroup_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "group"
protected class FeatureGroup_GroupKeyword_2 extends KeywordToken  {
	
	public FeatureGroup_GroupKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureGroupAccess().getGroupKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroup_FeatureKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// featureGroupType=[aadl2::FeatureGroupType|QCREF]
protected class FeatureGroup_FeatureGroupTypeAssignment_3 extends AssignmentToken  {
	
	public FeatureGroup_FeatureGroupTypeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureGroupAccess().getFeatureGroupTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroup_GroupKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("featureGroupType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("featureGroupType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureGroupAccess().getFeatureGroupTypeFeatureGroupTypeCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeatureGroupAccess().getFeatureGroupTypeFeatureGroupTypeCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// SEMI
protected class FeatureGroup_SEMITerminalRuleCall_4 extends UnassignedTextToken {

	public FeatureGroup_SEMITerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureGroupAccess().getSEMITerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroup_FeatureGroupTypeAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FeatureGroup ****************/


/************ begin Rule Feature ****************
 *
 * Feature returns aadl2::Feature:
 * 	Port | FeatureGroup;
 *
 **/

// Port | FeatureGroup
protected class Feature_Alternatives extends AlternativesToken {

	public Feature_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFeatureAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_PortParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Feature_FeatureGroupParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureGroupRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Port
protected class Feature_PortParserRuleCall_0 extends RuleCallToken {
	
	public Feature_PortParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getPortParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Port_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventPortRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Port_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FeatureGroup
protected class Feature_FeatureGroupParserRuleCall_1 extends RuleCallToken {
	
	public Feature_FeatureGroupParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getFeatureGroupParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroup_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureGroupRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FeatureGroup_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Feature ****************/


/************ begin Rule Port ****************
 *
 * Port returns aadl2::Port:
 * 	DataPort | EventPort | EventDataPort;
 *
 **/

// DataPort | EventPort | EventDataPort
protected class Port_Alternatives extends AlternativesToken {

	public Port_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPortAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Port_DataPortParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Port_EventPortParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Port_EventDataPortParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventPortRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DataPort
protected class Port_DataPortParserRuleCall_0 extends RuleCallToken {
	
	public Port_DataPortParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortAccess().getDataPortParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataPortRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DataPort_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EventPort
protected class Port_EventPortParserRuleCall_1 extends RuleCallToken {
	
	public Port_EventPortParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortAccess().getEventPortParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventPortRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EventPort_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EventDataPort
protected class Port_EventDataPortParserRuleCall_2 extends RuleCallToken {
	
	public Port_EventDataPortParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortAccess().getEventDataPortParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDataPort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventDataPortRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EventDataPort_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Port ****************/



/************ begin Rule ModeRef ****************
 *
 * ModeRef returns aadl2::ModeBinding:
 * 	parentMode=[aadl2::Mode] ("->" derivedMode=[aadl2::Mode])?;
 *
 **/

// parentMode=[aadl2::Mode] ("->" derivedMode=[aadl2::Mode])?
protected class ModeRef_Group extends GroupToken {
	
	public ModeRef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModeRefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeRef_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ModeRef_ParentModeAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModeRefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// parentMode=[aadl2::Mode]
protected class ModeRef_ParentModeAssignment_0 extends AssignmentToken  {
	
	public ModeRef_ParentModeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModeRefAccess().getParentModeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parentMode",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parentMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRefAccess().getParentModeModeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getModeRefAccess().getParentModeModeCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("->" derivedMode=[aadl2::Mode])?
protected class ModeRef_Group_1 extends GroupToken {
	
	public ModeRef_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModeRefAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeRef_DerivedModeAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "->"
protected class ModeRef_HyphenMinusGreaterThanSignKeyword_1_0 extends KeywordToken  {
	
	public ModeRef_HyphenMinusGreaterThanSignKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModeRefAccess().getHyphenMinusGreaterThanSignKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeRef_ParentModeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// derivedMode=[aadl2::Mode]
protected class ModeRef_DerivedModeAssignment_1_1 extends AssignmentToken  {
	
	public ModeRef_DerivedModeAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModeRefAccess().getDerivedModeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeRef_HyphenMinusGreaterThanSignKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("derivedMode",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("derivedMode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRefAccess().getDerivedModeModeCrossReference_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getModeRefAccess().getDerivedModeModeCrossReference_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule ModeRef ****************/


/************ begin Rule SystemSubcomponent ****************
 *
 * SystemSubcomponent returns aadl2::SystemSubcomponent:
 * 	name=ID COLON "system" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
 * 	//	(classifier=[ComponentClassifierOrPrototype|QCREF] )?
 * 	// Could not disambiguate the following rule
 * 	//([SystemClassifier|QCREF]|prototype=[ComponentPrototype|ID])
 * 	systemClassifier=[aadl2::SystemClassifier|QCREF] ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
 * 	RPARENS)? SEMI;
 *
 **/

// name=ID COLON "system" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
// //	(classifier=[ComponentClassifierOrPrototype|QCREF] )?
// // Could not disambiguate the following rule
// //([SystemClassifier|QCREF]|prototype=[ComponentPrototype|ID])
// systemClassifier=[aadl2::SystemClassifier|QCREF] ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
// RPARENS)? SEMI
protected class SystemSubcomponent_Group extends GroupToken {
	
	public SystemSubcomponent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSystemSubcomponentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class SystemSubcomponent_NameAssignment_0 extends AssignmentToken  {
	
	public SystemSubcomponent_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSystemSubcomponentAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSystemSubcomponentAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class SystemSubcomponent_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public SystemSubcomponent_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "system"
protected class SystemSubcomponent_SystemKeyword_2 extends KeywordToken  {
	
	public SystemSubcomponent_SystemKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getSystemKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
// //	(classifier=[ComponentClassifierOrPrototype|QCREF] )?
// // Could not disambiguate the following rule
// //([SystemClassifier|QCREF]|prototype=[ComponentPrototype|ID])
// systemClassifier=[aadl2::SystemClassifier|QCREF]
protected class SystemSubcomponent_SystemClassifierAssignment_3 extends AssignmentToken  {
	
	public SystemSubcomponent_SystemClassifierAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getSystemClassifierAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_SystemKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("systemClassifier",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("systemClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSystemSubcomponentAccess().getSystemClassifierSystemClassifierCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getSystemSubcomponentAccess().getSystemClassifierSystemClassifierCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
protected class SystemSubcomponent_Group_4 extends GroupToken {
	
	public SystemSubcomponent_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_RPARENSTerminalRuleCall_4_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "in"
protected class SystemSubcomponent_InKeyword_4_0 extends KeywordToken  {
	
	public SystemSubcomponent_InKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getInKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_SystemClassifierAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "modes"
protected class SystemSubcomponent_ModesKeyword_4_1 extends KeywordToken  {
	
	public SystemSubcomponent_ModesKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getModesKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_InKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class SystemSubcomponent_LPARENSTerminalRuleCall_4_2 extends UnassignedTextToken {

	public SystemSubcomponent_LPARENSTerminalRuleCall_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getLPARENSTerminalRuleCall_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_ModesKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// modeBinding+=ModeRef+ | allModes?="all"
protected class SystemSubcomponent_Alternatives_4_3 extends AlternativesToken {

	public SystemSubcomponent_Alternatives_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getAlternatives_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_ModeBindingAssignment_4_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemSubcomponent_AllModesAssignment_4_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// modeBinding+=ModeRef+
protected class SystemSubcomponent_ModeBindingAssignment_4_3_0 extends AssignmentToken  {
	
	public SystemSubcomponent_ModeBindingAssignment_4_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getModeBindingAssignment_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modeBinding",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modeBinding");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSystemSubcomponentAccess().getModeBindingModeRefParserRuleCall_4_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SystemSubcomponent_ModeBindingAssignment_4_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SystemSubcomponent_LPARENSTerminalRuleCall_4_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// allModes?="all"
protected class SystemSubcomponent_AllModesAssignment_4_3_1 extends AssignmentToken  {
	
	public SystemSubcomponent_AllModesAssignment_4_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getAllModesAssignment_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_LPARENSTerminalRuleCall_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("allModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("allModes");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSystemSubcomponentAccess().getAllModesAllKeyword_4_3_1_0();
			return obj;
		}
		return null;
	}

}


// RPARENS
protected class SystemSubcomponent_RPARENSTerminalRuleCall_4_4 extends UnassignedTextToken {

	public SystemSubcomponent_RPARENSTerminalRuleCall_4_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getRPARENSTerminalRuleCall_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_Alternatives_4_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// SEMI
protected class SystemSubcomponent_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public SystemSubcomponent_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSystemSubcomponentAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SystemSubcomponent_SystemClassifierAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SystemSubcomponent ****************/


/************ begin Rule ProcessorSubcomponent ****************
 *
 * ProcessorSubcomponent returns aadl2::ProcessorSubcomponent:
 * 	name=ID COLON "processor" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
 * 	processorClassifier=[aadl2::ProcessorClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
 * 	RPARENS)? SEMI;
 *
 **/

// name=ID COLON "processor" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
// processorClassifier=[aadl2::ProcessorClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all")
// RPARENS)? SEMI
protected class ProcessorSubcomponent_Group extends GroupToken {
	
	public ProcessorSubcomponent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcessorSubcomponentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class ProcessorSubcomponent_NameAssignment_0 extends AssignmentToken  {
	
	public ProcessorSubcomponent_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcessorSubcomponentAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcessorSubcomponentAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class ProcessorSubcomponent_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public ProcessorSubcomponent_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "processor"
protected class ProcessorSubcomponent_ProcessorKeyword_2 extends KeywordToken  {
	
	public ProcessorSubcomponent_ProcessorKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getProcessorKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// processorClassifier=[aadl2::ProcessorClassifier|QCREF]?
protected class ProcessorSubcomponent_ProcessorClassifierAssignment_3 extends AssignmentToken  {
	
	public ProcessorSubcomponent_ProcessorClassifierAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getProcessorClassifierAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_ProcessorKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("processorClassifier",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("processorClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessorSubcomponentAccess().getProcessorClassifierProcessorClassifierCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getProcessorSubcomponentAccess().getProcessorClassifierProcessorClassifierCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
protected class ProcessorSubcomponent_Group_4 extends GroupToken {
	
	public ProcessorSubcomponent_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_RPARENSTerminalRuleCall_4_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "in"
protected class ProcessorSubcomponent_InKeyword_4_0 extends KeywordToken  {
	
	public ProcessorSubcomponent_InKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getInKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_ProcessorClassifierAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorSubcomponent_ProcessorKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "modes"
protected class ProcessorSubcomponent_ModesKeyword_4_1 extends KeywordToken  {
	
	public ProcessorSubcomponent_ModesKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getModesKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_InKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class ProcessorSubcomponent_LPARENSTerminalRuleCall_4_2 extends UnassignedTextToken {

	public ProcessorSubcomponent_LPARENSTerminalRuleCall_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getLPARENSTerminalRuleCall_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_ModesKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// modeBinding+=ModeRef+ | allModes?="all"
protected class ProcessorSubcomponent_Alternatives_4_3 extends AlternativesToken {

	public ProcessorSubcomponent_Alternatives_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getAlternatives_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_ModeBindingAssignment_4_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorSubcomponent_AllModesAssignment_4_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// modeBinding+=ModeRef+
protected class ProcessorSubcomponent_ModeBindingAssignment_4_3_0 extends AssignmentToken  {
	
	public ProcessorSubcomponent_ModeBindingAssignment_4_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getModeBindingAssignment_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modeBinding",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modeBinding");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcessorSubcomponentAccess().getModeBindingModeRefParserRuleCall_4_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcessorSubcomponent_ModeBindingAssignment_4_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProcessorSubcomponent_LPARENSTerminalRuleCall_4_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// allModes?="all"
protected class ProcessorSubcomponent_AllModesAssignment_4_3_1 extends AssignmentToken  {
	
	public ProcessorSubcomponent_AllModesAssignment_4_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getAllModesAssignment_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_LPARENSTerminalRuleCall_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("allModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("allModes");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getProcessorSubcomponentAccess().getAllModesAllKeyword_4_3_1_0();
			return obj;
		}
		return null;
	}

}


// RPARENS
protected class ProcessorSubcomponent_RPARENSTerminalRuleCall_4_4 extends UnassignedTextToken {

	public ProcessorSubcomponent_RPARENSTerminalRuleCall_4_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getRPARENSTerminalRuleCall_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_Alternatives_4_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// SEMI
protected class ProcessorSubcomponent_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public ProcessorSubcomponent_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessorSubcomponentAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcessorSubcomponent_ProcessorClassifierAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ProcessorSubcomponent_ProcessorKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule ProcessorSubcomponent ****************/


/************ begin Rule DataSubcomponent ****************
 *
 * DataSubcomponent returns aadl2::DataSubcomponent:
 * 	name=ID COLON "data" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
 * 	dataClassifier=[aadl2::DataClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
 * 	SEMI;
 *
 **/

// name=ID COLON "data" //	(refined?='refined' 'to')? // if boolean is set then we need to find the subcomponent being 'refined'
// dataClassifier=[aadl2::DataClassifier|QCREF]? ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
// SEMI
protected class DataSubcomponent_Group extends GroupToken {
	
	public DataSubcomponent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataSubcomponentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class DataSubcomponent_NameAssignment_0 extends AssignmentToken  {
	
	public DataSubcomponent_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDataSubcomponentAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDataSubcomponentAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class DataSubcomponent_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public DataSubcomponent_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "data"
protected class DataSubcomponent_DataKeyword_2 extends KeywordToken  {
	
	public DataSubcomponent_DataKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getDataKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// dataClassifier=[aadl2::DataClassifier|QCREF]?
protected class DataSubcomponent_DataClassifierAssignment_3 extends AssignmentToken  {
	
	public DataSubcomponent_DataClassifierAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getDataClassifierAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_DataKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dataClassifier",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dataClassifier");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataSubcomponentAccess().getDataClassifierDataClassifierCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getDataSubcomponentAccess().getDataClassifierDataClassifierCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("in" "modes" LPARENS (modeBinding+=ModeRef+ | allModes?="all") RPARENS)?
protected class DataSubcomponent_Group_4 extends GroupToken {
	
	public DataSubcomponent_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_RPARENSTerminalRuleCall_4_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "in"
protected class DataSubcomponent_InKeyword_4_0 extends KeywordToken  {
	
	public DataSubcomponent_InKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getInKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_DataClassifierAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataSubcomponent_DataKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "modes"
protected class DataSubcomponent_ModesKeyword_4_1 extends KeywordToken  {
	
	public DataSubcomponent_ModesKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getModesKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_InKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class DataSubcomponent_LPARENSTerminalRuleCall_4_2 extends UnassignedTextToken {

	public DataSubcomponent_LPARENSTerminalRuleCall_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getLPARENSTerminalRuleCall_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_ModesKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// modeBinding+=ModeRef+ | allModes?="all"
protected class DataSubcomponent_Alternatives_4_3 extends AlternativesToken {

	public DataSubcomponent_Alternatives_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getAlternatives_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_ModeBindingAssignment_4_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataSubcomponent_AllModesAssignment_4_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// modeBinding+=ModeRef+
protected class DataSubcomponent_ModeBindingAssignment_4_3_0 extends AssignmentToken  {
	
	public DataSubcomponent_ModeBindingAssignment_4_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getModeBindingAssignment_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ModeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modeBinding",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modeBinding");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModeRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDataSubcomponentAccess().getModeBindingModeRefParserRuleCall_4_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataSubcomponent_ModeBindingAssignment_4_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DataSubcomponent_LPARENSTerminalRuleCall_4_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// allModes?="all"
protected class DataSubcomponent_AllModesAssignment_4_3_1 extends AssignmentToken  {
	
	public DataSubcomponent_AllModesAssignment_4_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getAllModesAssignment_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_LPARENSTerminalRuleCall_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("allModes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("allModes");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDataSubcomponentAccess().getAllModesAllKeyword_4_3_1_0();
			return obj;
		}
		return null;
	}

}


// RPARENS
protected class DataSubcomponent_RPARENSTerminalRuleCall_4_4 extends UnassignedTextToken {

	public DataSubcomponent_RPARENSTerminalRuleCall_4_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getRPARENSTerminalRuleCall_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_Alternatives_4_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// SEMI
protected class DataSubcomponent_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public DataSubcomponent_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataSubcomponentAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DataSubcomponent_DataClassifierAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new DataSubcomponent_DataKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule DataSubcomponent ****************/


/************ begin Rule Subcomponent ****************
 *
 * Subcomponent returns aadl2::Subcomponent:
 * 	SystemSubcomponent | ProcessorSubcomponent | DataSubcomponent;
 *
 **/

// SystemSubcomponent | ProcessorSubcomponent | DataSubcomponent
protected class Subcomponent_Alternatives extends AlternativesToken {

	public Subcomponent_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSubcomponentAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Subcomponent_SystemSubcomponentParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Subcomponent_ProcessorSubcomponentParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Subcomponent_DataSubcomponentParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataSubcomponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProcessorSubcomponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSystemSubcomponentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SystemSubcomponent
protected class Subcomponent_SystemSubcomponentParserRuleCall_0 extends RuleCallToken {
	
	public Subcomponent_SystemSubcomponentParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubcomponentAccess().getSystemSubcomponentParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SystemSubcomponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSystemSubcomponentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SystemSubcomponent_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ProcessorSubcomponent
protected class Subcomponent_ProcessorSubcomponentParserRuleCall_1 extends RuleCallToken {
	
	public Subcomponent_ProcessorSubcomponentParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubcomponentAccess().getProcessorSubcomponentParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcessorSubcomponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcessorSubcomponentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ProcessorSubcomponent_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DataSubcomponent
protected class Subcomponent_DataSubcomponentParserRuleCall_2 extends RuleCallToken {
	
	public Subcomponent_DataSubcomponentParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubcomponentAccess().getDataSubcomponentParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataSubcomponentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DataSubcomponent_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Subcomponent ****************/


/************ begin Rule PortConnection ****************
 *
 * //SystemClassifier returns aadl2::SystemClassifier:
 * //	SystemType | SystemImplementation;
 * //
 * //ProcessorClassifier returns aadl2::ProcessorClassifier:
 * //	ProcessorType;
 * //ProcessClassifier returns aadl2::ProcessClassifier:
 * //	ProcessType;
 * //ThreadClassifier returns aadl2::ThreadClassifier:
 * //	ThreadType;
 * //
 * //DataClassifier returns aadl2::DataClassifier:
 * //	DataType | DataImplementation;
 * PortConnection returns aadl2::PortConnection:
 * 	name=ID COLON kind=ConnectionType (sourceContext=[aadl2::Context] DOT)? source=[aadl2::ConnectionEnd] ("->" |
 * 	bidirectional?="<->") (destinationContext=[aadl2::Context] DOT)? destination=[aadl2::ConnectionEnd] SEMI;
 *
 **/

// name=ID COLON kind=ConnectionType (sourceContext=[aadl2::Context] DOT)? source=[aadl2::ConnectionEnd] ("->" |
// bidirectional?="<->") (destinationContext=[aadl2::Context] DOT)? destination=[aadl2::ConnectionEnd] SEMI
protected class PortConnection_Group extends GroupToken {
	
	public PortConnection_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_SEMITerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPortConnectionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class PortConnection_NameAssignment_0 extends AssignmentToken  {
	
	public PortConnection_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPortConnectionAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPortConnectionAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class PortConnection_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public PortConnection_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// kind=ConnectionType
protected class PortConnection_KindAssignment_2 extends AssignmentToken  {
	
	public PortConnection_KindAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getKindAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kind",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kind");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPortConnectionAccess().getKindConnectionTypeParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getPortConnectionAccess().getKindConnectionTypeParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (sourceContext=[aadl2::Context] DOT)?
protected class PortConnection_Group_3 extends GroupToken {
	
	public PortConnection_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_DOTTerminalRuleCall_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// sourceContext=[aadl2::Context]
protected class PortConnection_SourceContextAssignment_3_0 extends AssignmentToken  {
	
	public PortConnection_SourceContextAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getSourceContextAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_KindAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sourceContext",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sourceContext");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPortConnectionAccess().getSourceContextContextCrossReference_3_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPortConnectionAccess().getSourceContextContextCrossReference_3_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// DOT
protected class PortConnection_DOTTerminalRuleCall_3_1 extends UnassignedTextToken {

	public PortConnection_DOTTerminalRuleCall_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getDOTTerminalRuleCall_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_SourceContextAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// source=[aadl2::ConnectionEnd]
protected class PortConnection_SourceAssignment_4 extends AssignmentToken  {
	
	public PortConnection_SourceAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getSourceAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PortConnection_KindAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("source",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPortConnectionAccess().getSourceConnectionEndCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPortConnectionAccess().getSourceConnectionEndCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "->" | bidirectional?="<->"
protected class PortConnection_Alternatives_5 extends AlternativesToken {

	public PortConnection_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_HyphenMinusGreaterThanSignKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PortConnection_BidirectionalAssignment_5_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "->"
protected class PortConnection_HyphenMinusGreaterThanSignKeyword_5_0 extends KeywordToken  {
	
	public PortConnection_HyphenMinusGreaterThanSignKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getHyphenMinusGreaterThanSignKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_SourceAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// bidirectional?="<->"
protected class PortConnection_BidirectionalAssignment_5_1 extends AssignmentToken  {
	
	public PortConnection_BidirectionalAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getBidirectionalAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_SourceAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bidirectional",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bidirectional");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPortConnectionAccess().getBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_5_1_0();
			return obj;
		}
		return null;
	}

}


// (destinationContext=[aadl2::Context] DOT)?
protected class PortConnection_Group_6 extends GroupToken {
	
	public PortConnection_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_DOTTerminalRuleCall_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// destinationContext=[aadl2::Context]
protected class PortConnection_DestinationContextAssignment_6_0 extends AssignmentToken  {
	
	public PortConnection_DestinationContextAssignment_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getDestinationContextAssignment_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_Alternatives_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("destinationContext",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("destinationContext");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPortConnectionAccess().getDestinationContextContextCrossReference_6_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPortConnectionAccess().getDestinationContextContextCrossReference_6_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// DOT
protected class PortConnection_DOTTerminalRuleCall_6_1 extends UnassignedTextToken {

	public PortConnection_DOTTerminalRuleCall_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getDOTTerminalRuleCall_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_DestinationContextAssignment_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// destination=[aadl2::ConnectionEnd]
protected class PortConnection_DestinationAssignment_7 extends AssignmentToken  {
	
	public PortConnection_DestinationAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getDestinationAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PortConnection_Alternatives_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("destination",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("destination");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPortConnectionAccess().getDestinationConnectionEndCrossReference_7_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPortConnectionAccess().getDestinationConnectionEndCrossReference_7_0(); 
				return obj;
			}
		}
		return null;
	}

}

// SEMI
protected class PortConnection_SEMITerminalRuleCall_8 extends UnassignedTextToken {

	public PortConnection_SEMITerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPortConnectionAccess().getSEMITerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_DestinationAssignment_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule PortConnection ****************/



/************ begin Rule ConnectionEnd ****************
 *
 * ConnectionEnd returns aadl2::ConnectionEnd:
 * 	DataSubcomponent | Feature;
 *
 **/

// DataSubcomponent | Feature
protected class ConnectionEnd_Alternatives extends AlternativesToken {

	public ConnectionEnd_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConnectionEndAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConnectionEnd_DataSubcomponentParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConnectionEnd_FeatureParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDataSubcomponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureGroupRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DataSubcomponent
protected class ConnectionEnd_DataSubcomponentParserRuleCall_0 extends RuleCallToken {
	
	public ConnectionEnd_DataSubcomponentParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConnectionEndAccess().getDataSubcomponentParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DataSubcomponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataSubcomponentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DataSubcomponent_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Feature
protected class ConnectionEnd_FeatureParserRuleCall_1 extends RuleCallToken {
	
	public ConnectionEnd_FeatureParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConnectionEndAccess().getFeatureParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventDataPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEventPortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureGroupRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Feature_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConnectionEnd ****************/


/************ begin Rule Context ****************
 *
 * //Subcomponent | ComponentType; // THE CULPRIT
 * Context returns aadl2::Context:
 * 	Subcomponent;
 *
 **/

// Subcomponent
protected class Context_SubcomponentParserRuleCall extends RuleCallToken {
	
	public Context_SubcomponentParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getContextAccess().getSubcomponentParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Subcomponent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDataSubcomponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProcessorSubcomponentRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSystemSubcomponentRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Subcomponent_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Context ****************/


/************ begin Rule Connection ****************
 *
 * Connection returns aadl2::Connection:
 * 	PortConnection;
 *
 **/

// PortConnection
protected class Connection_PortConnectionParserRuleCall extends RuleCallToken {
	
	public Connection_PortConnectionParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConnectionAccess().getPortConnectionParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PortConnection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPortConnectionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(PortConnection_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Connection ****************/


/************ begin Rule FeatureGroupType ****************
 *
 * FeatureGroupType returns aadl2::FeatureGroupType:
 * 	"feature" "group" name=ID "end" ID SEMI;
 *
 **/

// "feature" "group" name=ID "end" ID SEMI
protected class FeatureGroupType_Group extends GroupToken {
	
	public FeatureGroupType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureGroupTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupType_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureGroupTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "feature"
protected class FeatureGroupType_FeatureKeyword_0 extends KeywordToken  {
	
	public FeatureGroupType_FeatureKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureGroupTypeAccess().getFeatureKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "group"
protected class FeatureGroupType_GroupKeyword_1 extends KeywordToken  {
	
	public FeatureGroupType_GroupKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureGroupTypeAccess().getGroupKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupType_FeatureKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class FeatureGroupType_NameAssignment_2 extends AssignmentToken  {
	
	public FeatureGroupType_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureGroupTypeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupType_GroupKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureGroupTypeAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureGroupTypeAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "end"
protected class FeatureGroupType_EndKeyword_3 extends KeywordToken  {
	
	public FeatureGroupType_EndKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureGroupTypeAccess().getEndKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupType_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ID
protected class FeatureGroupType_IDTerminalRuleCall_4 extends UnassignedTextToken {

	public FeatureGroupType_IDTerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureGroupTypeAccess().getIDTerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupType_EndKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class FeatureGroupType_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public FeatureGroupType_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureGroupTypeAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureGroupType_IDTerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FeatureGroupType ****************/


/************ begin Rule AnnexLibrary ****************
 *
 * AnnexLibrary returns aadl2::AnnexLibrary:
 * 	DefaultAnnexLibrary;
 *
 **/

// DefaultAnnexLibrary
protected class AnnexLibrary_DefaultAnnexLibraryParserRuleCall extends RuleCallToken {
	
	public AnnexLibrary_DefaultAnnexLibraryParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAnnexLibraryAccess().getDefaultAnnexLibraryParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexLibrary_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefaultAnnexLibraryRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DefaultAnnexLibrary_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule AnnexLibrary ****************/


/************ begin Rule DefaultAnnexLibrary ****************
 *
 * DefaultAnnexLibrary returns aadl2::DefaultAnnexLibrary:
 * 	"annex" name=ID sourceText=ANNEXTEXT SEMI;
 *
 **/

// "annex" name=ID sourceText=ANNEXTEXT SEMI
protected class DefaultAnnexLibrary_Group extends GroupToken {
	
	public DefaultAnnexLibrary_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefaultAnnexLibraryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexLibrary_SEMITerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefaultAnnexLibraryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "annex"
protected class DefaultAnnexLibrary_AnnexKeyword_0 extends KeywordToken  {
	
	public DefaultAnnexLibrary_AnnexKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefaultAnnexLibraryAccess().getAnnexKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class DefaultAnnexLibrary_NameAssignment_1 extends AssignmentToken  {
	
	public DefaultAnnexLibrary_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefaultAnnexLibraryAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexLibrary_AnnexKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDefaultAnnexLibraryAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDefaultAnnexLibraryAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// sourceText=ANNEXTEXT
protected class DefaultAnnexLibrary_SourceTextAssignment_2 extends AssignmentToken  {
	
	public DefaultAnnexLibrary_SourceTextAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefaultAnnexLibraryAccess().getSourceTextAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexLibrary_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sourceText",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sourceText");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDefaultAnnexLibraryAccess().getSourceTextANNEXTEXTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDefaultAnnexLibraryAccess().getSourceTextANNEXTEXTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// SEMI
protected class DefaultAnnexLibrary_SEMITerminalRuleCall_3 extends UnassignedTextToken {

	public DefaultAnnexLibrary_SEMITerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefaultAnnexLibraryAccess().getSEMITerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexLibrary_SourceTextAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DefaultAnnexLibrary ****************/


/************ begin Rule AnnexSubclause ****************
 *
 * AnnexSubclause returns aadl2::AnnexSubclause:
 * 	DefaultAnnexSubclause;
 *
 **/

// DefaultAnnexSubclause
protected class AnnexSubclause_DefaultAnnexSubclauseParserRuleCall extends RuleCallToken {
	
	public AnnexSubclause_DefaultAnnexSubclauseParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAnnexSubclauseAccess().getDefaultAnnexSubclauseParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexSubclause_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefaultAnnexSubclauseRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DefaultAnnexSubclause_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule AnnexSubclause ****************/


/************ begin Rule DefaultAnnexSubclause ****************
 *
 * DefaultAnnexSubclause returns aadl2::DefaultAnnexSubclause:
 * 	"annex" name=ID sourceText=ANNEXTEXT SEMI;
 *
 **/

// "annex" name=ID sourceText=ANNEXTEXT SEMI
protected class DefaultAnnexSubclause_Group extends GroupToken {
	
	public DefaultAnnexSubclause_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefaultAnnexSubclauseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexSubclause_SEMITerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefaultAnnexSubclauseRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "annex"
protected class DefaultAnnexSubclause_AnnexKeyword_0 extends KeywordToken  {
	
	public DefaultAnnexSubclause_AnnexKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefaultAnnexSubclauseAccess().getAnnexKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class DefaultAnnexSubclause_NameAssignment_1 extends AssignmentToken  {
	
	public DefaultAnnexSubclause_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefaultAnnexSubclauseAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexSubclause_AnnexKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDefaultAnnexSubclauseAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDefaultAnnexSubclauseAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// sourceText=ANNEXTEXT
protected class DefaultAnnexSubclause_SourceTextAssignment_2 extends AssignmentToken  {
	
	public DefaultAnnexSubclause_SourceTextAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefaultAnnexSubclauseAccess().getSourceTextAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexSubclause_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sourceText",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sourceText");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDefaultAnnexSubclauseAccess().getSourceTextANNEXTEXTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDefaultAnnexSubclauseAccess().getSourceTextANNEXTEXTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// SEMI
protected class DefaultAnnexSubclause_SEMITerminalRuleCall_3 extends UnassignedTextToken {

	public DefaultAnnexSubclause_SEMITerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefaultAnnexSubclauseAccess().getSEMITerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefaultAnnexSubclause_SourceTextAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DefaultAnnexSubclause ****************/







}
