/*
* generated by Xtext
*/
package org.osate.xtext.aadl2.errormodel.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.osate.xtext.aadl2.errormodel.services.ErrorModelGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class ErrorModelParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ErrorModelGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EM2AnnexSubclause_Group(this, this, 0, inst);
			case 1: return new ErrorTypeSet_Group(this, this, 1, inst);
			case 2: return new ErrorTypeSetRefinement_Group(this, this, 2, inst);
			case 3: return new ErrorType_Group(this, this, 3, inst);
			case 4: return new Feature_Group(this, this, 4, inst);
			case 5: return new ErrorTypeRefinement_Group(this, this, 5, inst);
			case 6: return new ErrorPropagations_Group(this, this, 6, inst);
			case 7: return new ErrorPropagation_Group(this, this, 7, inst);
			case 8: return new ErrorFlow_Alternatives(this, this, 8, inst);
			case 9: return new ErrorSource_Group(this, this, 9, inst);
			case 10: return new ErrorSink_Group(this, this, 10, inst);
			case 11: return new ErrorPath_Group(this, this, 11, inst);
			case 12: return new ErrorPropagationReference_Group(this, this, 12, inst);
			case 13: return new ErrorBehaviorStateMachine_Group(this, this, 13, inst);
			case 14: return new ErrorBehaviorEvent_Alternatives(this, this, 14, inst);
			case 15: return new ErrorEvent_Group(this, this, 15, inst);
			case 16: return new RepairEvent_Group(this, this, 16, inst);
			case 17: return new ErrorBehaviorState_Group(this, this, 17, inst);
			case 18: return new ErrorBehaviorTransition_Alternatives(this, this, 18, inst);
			case 19: return new TriggeredTransition_Group(this, this, 19, inst);
			case 20: return new BranchTransition_Group(this, this, 20, inst);
			case 21: return new ComponentErrorBehavior_Group(this, this, 21, inst);
			case 22: return new TransitionCondition_Group(this, this, 22, inst);
			case 23: return new TriggerConditionExpression_Alternatives(this, this, 23, inst);
			case 24: return new AndExpression_Group(this, this, 24, inst);
			case 25: return new OrExpression_Group(this, this, 25, inst);
			case 26: return new OrmoreExpression_Group(this, this, 26, inst);
			case 27: return new OrlessExpression_Group(this, this, 27, inst);
			case 28: return new OthersExpression_Group(this, this, 28, inst);
			case 29: return new Primary_Alternatives(this, this, 29, inst);
			case 30: return new ErrorEventReference_Group(this, this, 30, inst);
			case 31: return new WorkingReference_Group(this, this, 31, inst);
			case 32: return new PropagationCondition_Group(this, this, 32, inst);
			case 33: return new DetectionEvent_Group(this, this, 33, inst);
			case 34: return new CompositeErrorBehavior_Group(this, this, 34, inst);
			case 35: return new CompositeState_Group(this, this, 35, inst);
			case 36: return new StateConditionExpression_Alternatives(this, this, 36, inst);
			case 37: return new AndSExpression_Group(this, this, 37, inst);
			case 38: return new OrSExpression_Group(this, this, 38, inst);
			case 39: return new OrmoreSExpression_Group(this, this, 39, inst);
			case 40: return new OrlessSExpression_Group(this, this, 40, inst);
			case 41: return new SPrimary_Alternatives(this, this, 41, inst);
			case 42: return new SubcomponentStateReference_Group(this, this, 42, inst);
			case 43: return new PropertyAssociation_Group(this, this, 43, inst);
			case 44: return new PropertyExpression_Alternatives(this, this, 44, inst);
			case 45: return new Literal_NameAssignment(this, this, 45, inst);
			case 46: return new ProbabilityValue_Group(this, this, 46, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule EM2AnnexSubclause ****************
 *
 * //import 'platform:/resource/org.osate.xtext.aadl2/src-gen/org/osate/aadl2/Aadl2.ecore' as aadl2
 * //import "http://www.osate.org/aadl2/properties/Properties" as props
 * EM2AnnexSubclause:
 * 	"annex" EM "{**" (types+=ErrorTypeSet | ebsm+=ErrorBehaviorStateMachine | ep+=ErrorPropagations |
 * 	ceb+=ComponentErrorBehavior | compeb+=CompositeErrorBehavior)+ "**}" SEMI;
 *
 **/

// "annex" EM "{**" (types+=ErrorTypeSet | ebsm+=ErrorBehaviorStateMachine | ep+=ErrorPropagations |
// ceb+=ComponentErrorBehavior | compeb+=CompositeErrorBehavior)+ "**}" SEMI
protected class EM2AnnexSubclause_Group extends GroupToken {
	
	public EM2AnnexSubclause_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EM2AnnexSubclause_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEM2AnnexSubclauseRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "annex"
protected class EM2AnnexSubclause_AnnexKeyword_0 extends KeywordToken  {
	
	public EM2AnnexSubclause_AnnexKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getAnnexKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// EM
protected class EM2AnnexSubclause_EMTerminalRuleCall_1 extends UnassignedTextToken {

	public EM2AnnexSubclause_EMTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getEMTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EM2AnnexSubclause_AnnexKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{**"
protected class EM2AnnexSubclause_LeftCurlyBracketAsteriskAsteriskKeyword_2 extends KeywordToken  {
	
	public EM2AnnexSubclause_LeftCurlyBracketAsteriskAsteriskKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getLeftCurlyBracketAsteriskAsteriskKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EM2AnnexSubclause_EMTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (types+=ErrorTypeSet | ebsm+=ErrorBehaviorStateMachine | ep+=ErrorPropagations | ceb+=ComponentErrorBehavior |
// compeb+=CompositeErrorBehavior)+
protected class EM2AnnexSubclause_Alternatives_3 extends AlternativesToken {

	public EM2AnnexSubclause_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EM2AnnexSubclause_TypesAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EM2AnnexSubclause_EbsmAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new EM2AnnexSubclause_EpAssignment_3_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new EM2AnnexSubclause_CebAssignment_3_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new EM2AnnexSubclause_CompebAssignment_3_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// types+=ErrorTypeSet
protected class EM2AnnexSubclause_TypesAssignment_3_0 extends AssignmentToken  {
	
	public EM2AnnexSubclause_TypesAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getTypesAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("types",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("types");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeSetRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEM2AnnexSubclauseAccess().getTypesErrorTypeSetParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EM2AnnexSubclause_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EM2AnnexSubclause_LeftCurlyBracketAsteriskAsteriskKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ebsm+=ErrorBehaviorStateMachine
protected class EM2AnnexSubclause_EbsmAssignment_3_1 extends AssignmentToken  {
	
	public EM2AnnexSubclause_EbsmAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getEbsmAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ebsm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ebsm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorBehaviorStateMachineRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEM2AnnexSubclauseAccess().getEbsmErrorBehaviorStateMachineParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EM2AnnexSubclause_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EM2AnnexSubclause_LeftCurlyBracketAsteriskAsteriskKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ep+=ErrorPropagations
protected class EM2AnnexSubclause_EpAssignment_3_2 extends AssignmentToken  {
	
	public EM2AnnexSubclause_EpAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getEpAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ep",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ep");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEM2AnnexSubclauseAccess().getEpErrorPropagationsParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EM2AnnexSubclause_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EM2AnnexSubclause_LeftCurlyBracketAsteriskAsteriskKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ceb+=ComponentErrorBehavior
protected class EM2AnnexSubclause_CebAssignment_3_3 extends AssignmentToken  {
	
	public EM2AnnexSubclause_CebAssignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getCebAssignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ceb",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ceb");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentErrorBehaviorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEM2AnnexSubclauseAccess().getCebComponentErrorBehaviorParserRuleCall_3_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EM2AnnexSubclause_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EM2AnnexSubclause_LeftCurlyBracketAsteriskAsteriskKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// compeb+=CompositeErrorBehavior
protected class EM2AnnexSubclause_CompebAssignment_3_4 extends AssignmentToken  {
	
	public EM2AnnexSubclause_CompebAssignment_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getCompebAssignment_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("compeb",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("compeb");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeErrorBehaviorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEM2AnnexSubclauseAccess().getCompebCompositeErrorBehaviorParserRuleCall_3_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EM2AnnexSubclause_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EM2AnnexSubclause_LeftCurlyBracketAsteriskAsteriskKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "**}"
protected class EM2AnnexSubclause_AsteriskAsteriskRightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public EM2AnnexSubclause_AsteriskAsteriskRightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getAsteriskAsteriskRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EM2AnnexSubclause_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class EM2AnnexSubclause_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public EM2AnnexSubclause_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEM2AnnexSubclauseAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EM2AnnexSubclause_AsteriskAsteriskRightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EM2AnnexSubclause ****************/


/************ begin Rule ErrorTypeSet ****************
 *
 * ErrorTypeSet:
 * 	"errors" name=ID types+=ErrorType+ features+=Feature* "end" ID SEMI;
 *
 **/

// "errors" name=ID types+=ErrorType+ features+=Feature* "end" ID SEMI
protected class ErrorTypeSet_Group extends GroupToken {
	
	public ErrorTypeSet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorTypeSetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSet_SEMITerminalRuleCall_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorTypeSetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "errors"
protected class ErrorTypeSet_ErrorsKeyword_0 extends KeywordToken  {
	
	public ErrorTypeSet_ErrorsKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorTypeSetAccess().getErrorsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ErrorTypeSet_NameAssignment_1 extends AssignmentToken  {
	
	public ErrorTypeSet_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeSetAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSet_ErrorsKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorTypeSetAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getErrorTypeSetAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// types+=ErrorType+
protected class ErrorTypeSet_TypesAssignment_2 extends AssignmentToken  {
	
	public ErrorTypeSet_TypesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeSetAccess().getTypesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("types",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("types");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorTypeSetAccess().getTypesErrorTypeParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorTypeSet_TypesAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorTypeSet_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// features+=Feature*
protected class ErrorTypeSet_FeaturesAssignment_3 extends AssignmentToken  {
	
	public ErrorTypeSet_FeaturesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeSetAccess().getFeaturesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("features",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorTypeSetAccess().getFeaturesFeatureParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorTypeSet_FeaturesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorTypeSet_TypesAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class ErrorTypeSet_EndKeyword_4 extends KeywordToken  {
	
	public ErrorTypeSet_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorTypeSetAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSet_FeaturesAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorTypeSet_TypesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ID
protected class ErrorTypeSet_IDTerminalRuleCall_5 extends UnassignedTextToken {

	public ErrorTypeSet_IDTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeSetAccess().getIDTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSet_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class ErrorTypeSet_SEMITerminalRuleCall_6 extends UnassignedTextToken {

	public ErrorTypeSet_SEMITerminalRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeSetAccess().getSEMITerminalRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSet_IDTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorTypeSet ****************/


/************ begin Rule ErrorTypeSetRefinement ****************
 *
 * ErrorTypeSetRefinement returns ErrorTypeSet:
 * 	"errors" name=ID "extends" extends= // [ErrorTypeSet|QCREF] across packages
 * 	[ErrorTypeSet] (types+=ErrorType | refinements+=ErrorTypeRefinement)+ "end" ID;
 *
 **/

// "errors" name=ID "extends" extends= // [ErrorTypeSet|QCREF] across packages
// [ErrorTypeSet] (types+=ErrorType | refinements+=ErrorTypeRefinement)+ "end" ID
protected class ErrorTypeSetRefinement_Group extends GroupToken {
	
	public ErrorTypeSetRefinement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSetRefinement_IDTerminalRuleCall_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorTypeSetRefinementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "errors"
protected class ErrorTypeSetRefinement_ErrorsKeyword_0 extends KeywordToken  {
	
	public ErrorTypeSetRefinement_ErrorsKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getErrorsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ErrorTypeSetRefinement_NameAssignment_1 extends AssignmentToken  {
	
	public ErrorTypeSetRefinement_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSetRefinement_ErrorsKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorTypeSetRefinementAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getErrorTypeSetRefinementAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "extends"
protected class ErrorTypeSetRefinement_ExtendsKeyword_2 extends KeywordToken  {
	
	public ErrorTypeSetRefinement_ExtendsKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getExtendsKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSetRefinement_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extends= // [ErrorTypeSet|QCREF] across packages
// [ErrorTypeSet]
protected class ErrorTypeSetRefinement_ExtendsAssignment_3 extends AssignmentToken  {
	
	public ErrorTypeSetRefinement_ExtendsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getExtendsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSetRefinement_ExtendsKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extends",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeSetRefinementAccess().getExtendsErrorTypeSetCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorTypeSetRefinementAccess().getExtendsErrorTypeSetCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (types+=ErrorType | refinements+=ErrorTypeRefinement)+
protected class ErrorTypeSetRefinement_Alternatives_4 extends AlternativesToken {

	public ErrorTypeSetRefinement_Alternatives_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getAlternatives_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSetRefinement_TypesAssignment_4_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorTypeSetRefinement_RefinementsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// types+=ErrorType
protected class ErrorTypeSetRefinement_TypesAssignment_4_0 extends AssignmentToken  {
	
	public ErrorTypeSetRefinement_TypesAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getTypesAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("types",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("types");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorTypeSetRefinementAccess().getTypesErrorTypeParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorTypeSetRefinement_Alternatives_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorTypeSetRefinement_ExtendsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// refinements+=ErrorTypeRefinement
protected class ErrorTypeSetRefinement_RefinementsAssignment_4_1 extends AssignmentToken  {
	
	public ErrorTypeSetRefinement_RefinementsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getRefinementsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("refinements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("refinements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeRefinementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorTypeSetRefinementAccess().getRefinementsErrorTypeRefinementParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorTypeSetRefinement_Alternatives_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorTypeSetRefinement_ExtendsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "end"
protected class ErrorTypeSetRefinement_EndKeyword_5 extends KeywordToken  {
	
	public ErrorTypeSetRefinement_EndKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getEndKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSetRefinement_Alternatives_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ID
protected class ErrorTypeSetRefinement_IDTerminalRuleCall_6 extends UnassignedTextToken {

	public ErrorTypeSetRefinement_IDTerminalRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeSetRefinementAccess().getIDTerminalRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeSetRefinement_EndKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorTypeSetRefinement ****************/


/************ begin Rule ErrorType ****************
 *
 * ErrorType:
 * 	name=ID COLON "error" "type" (ASSIGN LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)? SEMI;
 *
 **/

// name=ID COLON "error" "type" (ASSIGN LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)? SEMI
protected class ErrorType_Group extends GroupToken {
	
	public ErrorType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class ErrorType_NameAssignment_0 extends AssignmentToken  {
	
	public ErrorType_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorTypeAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getErrorTypeAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class ErrorType_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public ErrorType_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "error"
protected class ErrorType_ErrorKeyword_2 extends KeywordToken  {
	
	public ErrorType_ErrorKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getErrorKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "type"
protected class ErrorType_TypeKeyword_3 extends KeywordToken  {
	
	public ErrorType_TypeKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getTypeKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_ErrorKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (ASSIGN LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)?
protected class ErrorType_Group_4 extends GroupToken {
	
	public ErrorType_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_RPARENSTerminalRuleCall_4_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ASSIGN
protected class ErrorType_ASSIGNTerminalRuleCall_4_0 extends UnassignedTextToken {

	public ErrorType_ASSIGNTerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getASSIGNTerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_TypeKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class ErrorType_LPARENSTerminalRuleCall_4_1 extends UnassignedTextToken {

	public ErrorType_LPARENSTerminalRuleCall_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getLPARENSTerminalRuleCall_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_ASSIGNTerminalRuleCall_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subtypes+=[ErrorType]
protected class ErrorType_SubtypesAssignment_4_2 extends AssignmentToken  {
	
	public ErrorType_SubtypesAssignment_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getSubtypesAssignment_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_LPARENSTerminalRuleCall_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subtypes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subtypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeAccess().getSubtypesErrorTypeCrossReference_4_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorTypeAccess().getSubtypesErrorTypeCrossReference_4_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (COMMA subtypes+=[ErrorType])*
protected class ErrorType_Group_4_3 extends GroupToken {
	
	public ErrorType_Group_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getGroup_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_SubtypesAssignment_4_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class ErrorType_COMMATerminalRuleCall_4_3_0 extends UnassignedTextToken {

	public ErrorType_COMMATerminalRuleCall_4_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getCOMMATerminalRuleCall_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorType_SubtypesAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// subtypes+=[ErrorType]
protected class ErrorType_SubtypesAssignment_4_3_1 extends AssignmentToken  {
	
	public ErrorType_SubtypesAssignment_4_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getSubtypesAssignment_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_COMMATerminalRuleCall_4_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subtypes",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subtypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeAccess().getSubtypesErrorTypeCrossReference_4_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorTypeAccess().getSubtypesErrorTypeCrossReference_4_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// RPARENS
protected class ErrorType_RPARENSTerminalRuleCall_4_4 extends UnassignedTextToken {

	public ErrorType_RPARENSTerminalRuleCall_4_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getRPARENSTerminalRuleCall_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorType_SubtypesAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// SEMI
protected class ErrorType_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public ErrorType_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorType_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorType_TypeKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorType ****************/


/************ begin Rule Feature ****************
 *
 * Feature:
 * 	"feature" name=ID SEMI;
 *
 **/

// "feature" name=ID SEMI
protected class Feature_Group extends GroupToken {
	
	public Feature_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_SEMITerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "feature"
protected class Feature_FeatureKeyword_0 extends KeywordToken  {
	
	public Feature_FeatureKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAccess().getFeatureKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class Feature_NameAssignment_1 extends AssignmentToken  {
	
	public Feature_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_FeatureKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// SEMI
protected class Feature_SEMITerminalRuleCall_2 extends UnassignedTextToken {

	public Feature_SEMITerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getSEMITerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Feature ****************/


/************ begin Rule ErrorTypeRefinement ****************
 *
 * ErrorTypeRefinement:
 * 	name=[ErrorType] COLON "refined" "to" (APPEND LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)?
 * 	SEMI;
 *
 **/

// name=[ErrorType] COLON "refined" "to" (APPEND LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)?
// SEMI
protected class ErrorTypeRefinement_Group extends GroupToken {
	
	public ErrorTypeRefinement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorTypeRefinementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=[ErrorType]
protected class ErrorTypeRefinement_NameAssignment_0 extends AssignmentToken  {
	
	public ErrorTypeRefinement_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeRefinementAccess().getNameErrorTypeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorTypeRefinementAccess().getNameErrorTypeCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// COLON
protected class ErrorTypeRefinement_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public ErrorTypeRefinement_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "refined"
protected class ErrorTypeRefinement_RefinedKeyword_2 extends KeywordToken  {
	
	public ErrorTypeRefinement_RefinedKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getRefinedKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "to"
protected class ErrorTypeRefinement_ToKeyword_3 extends KeywordToken  {
	
	public ErrorTypeRefinement_ToKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getToKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_RefinedKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (APPEND LPARENS subtypes+=[ErrorType] (COMMA subtypes+=[ErrorType])* RPARENS)?
protected class ErrorTypeRefinement_Group_4 extends GroupToken {
	
	public ErrorTypeRefinement_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_RPARENSTerminalRuleCall_4_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// APPEND
protected class ErrorTypeRefinement_APPENDTerminalRuleCall_4_0 extends UnassignedTextToken {

	public ErrorTypeRefinement_APPENDTerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getAPPENDTerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_ToKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class ErrorTypeRefinement_LPARENSTerminalRuleCall_4_1 extends UnassignedTextToken {

	public ErrorTypeRefinement_LPARENSTerminalRuleCall_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getLPARENSTerminalRuleCall_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_APPENDTerminalRuleCall_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subtypes+=[ErrorType]
protected class ErrorTypeRefinement_SubtypesAssignment_4_2 extends AssignmentToken  {
	
	public ErrorTypeRefinement_SubtypesAssignment_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getSubtypesAssignment_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_LPARENSTerminalRuleCall_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subtypes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subtypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeRefinementAccess().getSubtypesErrorTypeCrossReference_4_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorTypeRefinementAccess().getSubtypesErrorTypeCrossReference_4_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (COMMA subtypes+=[ErrorType])*
protected class ErrorTypeRefinement_Group_4_3 extends GroupToken {
	
	public ErrorTypeRefinement_Group_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getGroup_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_SubtypesAssignment_4_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class ErrorTypeRefinement_COMMATerminalRuleCall_4_3_0 extends UnassignedTextToken {

	public ErrorTypeRefinement_COMMATerminalRuleCall_4_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getCOMMATerminalRuleCall_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorTypeRefinement_SubtypesAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// subtypes+=[ErrorType]
protected class ErrorTypeRefinement_SubtypesAssignment_4_3_1 extends AssignmentToken  {
	
	public ErrorTypeRefinement_SubtypesAssignment_4_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getSubtypesAssignment_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_COMMATerminalRuleCall_4_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subtypes",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subtypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorTypeRefinementAccess().getSubtypesErrorTypeCrossReference_4_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorTypeRefinementAccess().getSubtypesErrorTypeCrossReference_4_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// RPARENS
protected class ErrorTypeRefinement_RPARENSTerminalRuleCall_4_4 extends UnassignedTextToken {

	public ErrorTypeRefinement_RPARENSTerminalRuleCall_4_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getRPARENSTerminalRuleCall_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorTypeRefinement_SubtypesAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// SEMI
protected class ErrorTypeRefinement_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public ErrorTypeRefinement_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorTypeRefinementAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorTypeRefinement_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorTypeRefinement_ToKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorTypeRefinement ****************/


/************ begin Rule ErrorPropagations ****************
 *
 * ErrorPropagations:
 * 	"error" "propagations" "use" importedNamespace=QualifiedNameWithWildCard //use=[ErrorTypeSet|ID] SEMI
 * 	SEMI ("propagations" propagations+=ErrorPropagation+)? ("flows" flows+=ErrorFlow+)? "end" SEMI;
 *
 **/

// "error" "propagations" "use" importedNamespace=QualifiedNameWithWildCard //use=[ErrorTypeSet|ID] SEMI
// SEMI ("propagations" propagations+=ErrorPropagation+)? ("flows" flows+=ErrorFlow+)? "end" SEMI
protected class ErrorPropagations_Group extends GroupToken {
	
	public ErrorPropagations_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_SEMITerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorPropagationsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "error"
protected class ErrorPropagations_ErrorKeyword_0 extends KeywordToken  {
	
	public ErrorPropagations_ErrorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getErrorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "propagations"
protected class ErrorPropagations_PropagationsKeyword_1 extends KeywordToken  {
	
	public ErrorPropagations_PropagationsKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getPropagationsKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_ErrorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "use"
protected class ErrorPropagations_UseKeyword_2 extends KeywordToken  {
	
	public ErrorPropagations_UseKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getUseKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_PropagationsKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// importedNamespace=QualifiedNameWithWildCard
protected class ErrorPropagations_ImportedNamespaceAssignment_3 extends AssignmentToken  {
	
	public ErrorPropagations_ImportedNamespaceAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getImportedNamespaceAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_UseKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedNamespace",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedNamespace");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorPropagationsAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getErrorPropagationsAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// //use=[ErrorTypeSet|ID] SEMI
// SEMI
protected class ErrorPropagations_SEMITerminalRuleCall_4 extends UnassignedTextToken {

	public ErrorPropagations_SEMITerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getSEMITerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_ImportedNamespaceAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (=> "propagations" propagations+=ErrorPropagation+)?
protected class ErrorPropagations_Group_5 extends GroupToken {
	
	public ErrorPropagations_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_PropagationsAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "propagations"
protected class ErrorPropagations_PropagationsKeyword_5_0 extends KeywordToken  {
	
	public ErrorPropagations_PropagationsKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getPropagationsKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// propagations+=ErrorPropagation+
protected class ErrorPropagations_PropagationsAssignment_5_1 extends AssignmentToken  {
	
	public ErrorPropagations_PropagationsAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getPropagationsAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("propagations",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("propagations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorPropagationsAccess().getPropagationsErrorPropagationParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorPropagations_PropagationsAssignment_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorPropagations_PropagationsKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (=> "flows" flows+=ErrorFlow+)?
protected class ErrorPropagations_Group_6 extends GroupToken {
	
	public ErrorPropagations_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_FlowsAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "flows"
protected class ErrorPropagations_FlowsKeyword_6_0 extends KeywordToken  {
	
	public ErrorPropagations_FlowsKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getFlowsKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorPropagations_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// flows+=ErrorFlow+
protected class ErrorPropagations_FlowsAssignment_6_1 extends AssignmentToken  {
	
	public ErrorPropagations_FlowsAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getFlowsAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorFlow_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("flows",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("flows");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorFlowRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorPropagationsAccess().getFlowsErrorFlowParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorPropagations_FlowsAssignment_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorPropagations_FlowsKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "end"
protected class ErrorPropagations_EndKeyword_7 extends KeywordToken  {
	
	public ErrorPropagations_EndKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getEndKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorPropagations_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ErrorPropagations_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class ErrorPropagations_SEMITerminalRuleCall_8 extends UnassignedTextToken {

	public ErrorPropagations_SEMITerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorPropagationsAccess().getSEMITerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagations_EndKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorPropagations ****************/


/************ begin Rule ErrorPropagation ****************
 *
 * ErrorPropagation:
 * 	type=[ErrorType] COLON mask?="not"? direction=PropagationDirection? "propagation" "applies" "to" (binding+=BindingKind
 * 	| appliesto+=[Feature]) (COMMA (binding+=BindingKind | appliesto+=[Feature]))* SEMI;
 *
 **/

// type=[ErrorType] COLON mask?="not"? direction=PropagationDirection? "propagation" "applies" "to" (binding+=BindingKind |
// appliesto+=[Feature]) (COMMA (binding+=BindingKind | appliesto+=[Feature]))* SEMI
protected class ErrorPropagation_Group extends GroupToken {
	
	public ErrorPropagation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_SEMITerminalRuleCall_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorPropagationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type=[ErrorType]
protected class ErrorPropagation_TypeAssignment_0 extends AssignmentToken  {
	
	public ErrorPropagation_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationAccess().getTypeErrorTypeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorPropagationAccess().getTypeErrorTypeCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// COLON
protected class ErrorPropagation_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public ErrorPropagation_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_TypeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// mask?="not"?
protected class ErrorPropagation_MaskAssignment_2 extends AssignmentToken  {
	
	public ErrorPropagation_MaskAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getMaskAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mask",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mask");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getErrorPropagationAccess().getMaskNotKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// direction=PropagationDirection?
protected class ErrorPropagation_DirectionAssignment_3 extends AssignmentToken  {
	
	public ErrorPropagation_DirectionAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getDirectionAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_MaskAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorPropagation_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("direction",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("direction");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getErrorPropagationAccess().getDirectionPropagationDirectionEnumRuleCall_3_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getErrorPropagationAccess().getDirectionPropagationDirectionEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "propagation"
protected class ErrorPropagation_PropagationKeyword_4 extends KeywordToken  {
	
	public ErrorPropagation_PropagationKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getPropagationKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_DirectionAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorPropagation_MaskAssignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ErrorPropagation_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// "applies"
protected class ErrorPropagation_AppliesKeyword_5 extends KeywordToken  {
	
	public ErrorPropagation_AppliesKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getAppliesKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_PropagationKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "to"
protected class ErrorPropagation_ToKeyword_6 extends KeywordToken  {
	
	public ErrorPropagation_ToKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getToKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_AppliesKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// binding+=BindingKind | appliesto+=[Feature]
protected class ErrorPropagation_Alternatives_7 extends AlternativesToken {

	public ErrorPropagation_Alternatives_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getAlternatives_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_BindingAssignment_7_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorPropagation_AppliestoAssignment_7_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// binding+=BindingKind
protected class ErrorPropagation_BindingAssignment_7_0 extends AssignmentToken  {
	
	public ErrorPropagation_BindingAssignment_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getBindingAssignment_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_ToKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("binding",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("binding");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorPropagationAccess().getBindingBindingKindParserRuleCall_7_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getErrorPropagationAccess().getBindingBindingKindParserRuleCall_7_0_0();
			return obj;
		}
		return null;
	}

}

// appliesto+=[Feature]
protected class ErrorPropagation_AppliestoAssignment_7_1 extends AssignmentToken  {
	
	public ErrorPropagation_AppliestoAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getAppliestoAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_ToKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("appliesto",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("appliesto");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationAccess().getAppliestoFeatureCrossReference_7_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorPropagationAccess().getAppliestoFeatureCrossReference_7_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// (COMMA (binding+=BindingKind | appliesto+=[Feature]))*
protected class ErrorPropagation_Group_8 extends GroupToken {
	
	public ErrorPropagation_Group_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_Alternatives_8_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class ErrorPropagation_COMMATerminalRuleCall_8_0 extends UnassignedTextToken {

	public ErrorPropagation_COMMATerminalRuleCall_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getCOMMATerminalRuleCall_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_Group_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorPropagation_Alternatives_7(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// binding+=BindingKind | appliesto+=[Feature]
protected class ErrorPropagation_Alternatives_8_1 extends AlternativesToken {

	public ErrorPropagation_Alternatives_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getAlternatives_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_BindingAssignment_8_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorPropagation_AppliestoAssignment_8_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// binding+=BindingKind
protected class ErrorPropagation_BindingAssignment_8_1_0 extends AssignmentToken  {
	
	public ErrorPropagation_BindingAssignment_8_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getBindingAssignment_8_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_COMMATerminalRuleCall_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("binding",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("binding");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorPropagationAccess().getBindingBindingKindParserRuleCall_8_1_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getErrorPropagationAccess().getBindingBindingKindParserRuleCall_8_1_0_0();
			return obj;
		}
		return null;
	}

}

// appliesto+=[Feature]
protected class ErrorPropagation_AppliestoAssignment_8_1_1 extends AssignmentToken  {
	
	public ErrorPropagation_AppliestoAssignment_8_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getAppliestoAssignment_8_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_COMMATerminalRuleCall_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("appliesto",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("appliesto");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationAccess().getAppliestoFeatureCrossReference_8_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorPropagationAccess().getAppliestoFeatureCrossReference_8_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



// SEMI
protected class ErrorPropagation_SEMITerminalRuleCall_9 extends UnassignedTextToken {

	public ErrorPropagation_SEMITerminalRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorPropagationAccess().getSEMITerminalRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagation_Group_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorPropagation_Alternatives_7(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorPropagation ****************/



/************ begin Rule ErrorFlow ****************
 *
 * ErrorFlow:
 * 	ErrorSource | ErrorSink | ErrorPath;
 *
 **/

// ErrorSource | ErrorSink | ErrorPath
protected class ErrorFlow_Alternatives extends AlternativesToken {

	public ErrorFlow_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getErrorFlowAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorFlow_ErrorSourceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorFlow_ErrorSinkParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ErrorFlow_ErrorPathParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorPathRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorSinkRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorSourceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ErrorSource
protected class ErrorFlow_ErrorSourceParserRuleCall_0 extends RuleCallToken {
	
	public ErrorFlow_ErrorSourceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorFlowAccess().getErrorSourceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorSource_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorSourceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ErrorSource_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ErrorSink
protected class ErrorFlow_ErrorSinkParserRuleCall_1 extends RuleCallToken {
	
	public ErrorFlow_ErrorSinkParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorFlowAccess().getErrorSinkParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorSink_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorSinkRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ErrorSink_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ErrorPath
protected class ErrorFlow_ErrorPathParserRuleCall_2 extends RuleCallToken {
	
	public ErrorFlow_ErrorPathParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorFlowAccess().getErrorPathParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPath_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorPathRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ErrorPath_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ErrorFlow ****************/


/************ begin Rule ErrorSource ****************
 *
 * ErrorSource:
 * 	"error" "source" outgoing=ErrorPropagationReference SEMI;
 *
 **/

// "error" "source" outgoing=ErrorPropagationReference SEMI
protected class ErrorSource_Group extends GroupToken {
	
	public ErrorSource_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorSourceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorSource_SEMITerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorSourceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "error"
protected class ErrorSource_ErrorKeyword_0 extends KeywordToken  {
	
	public ErrorSource_ErrorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorSourceAccess().getErrorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "source"
protected class ErrorSource_SourceKeyword_1 extends KeywordToken  {
	
	public ErrorSource_SourceKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorSourceAccess().getSourceKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorSource_ErrorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// outgoing=ErrorPropagationReference
protected class ErrorSource_OutgoingAssignment_2 extends AssignmentToken  {
	
	public ErrorSource_OutgoingAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorSourceAccess().getOutgoingAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("outgoing",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("outgoing");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorSourceAccess().getOutgoingErrorPropagationReferenceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorSource_SourceKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMI
protected class ErrorSource_SEMITerminalRuleCall_3 extends UnassignedTextToken {

	public ErrorSource_SEMITerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorSourceAccess().getSEMITerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorSource_OutgoingAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorSource ****************/


/************ begin Rule ErrorSink ****************
 *
 * ErrorSink:
 * 	"error" "sink" incoming=ErrorPropagationReference SEMI;
 *
 **/

// "error" "sink" incoming=ErrorPropagationReference SEMI
protected class ErrorSink_Group extends GroupToken {
	
	public ErrorSink_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorSinkAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorSink_SEMITerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorSinkRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "error"
protected class ErrorSink_ErrorKeyword_0 extends KeywordToken  {
	
	public ErrorSink_ErrorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorSinkAccess().getErrorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "sink"
protected class ErrorSink_SinkKeyword_1 extends KeywordToken  {
	
	public ErrorSink_SinkKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorSinkAccess().getSinkKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorSink_ErrorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// incoming=ErrorPropagationReference
protected class ErrorSink_IncomingAssignment_2 extends AssignmentToken  {
	
	public ErrorSink_IncomingAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorSinkAccess().getIncomingAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("incoming",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("incoming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorSinkAccess().getIncomingErrorPropagationReferenceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorSink_SinkKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMI
protected class ErrorSink_SEMITerminalRuleCall_3 extends UnassignedTextToken {

	public ErrorSink_SEMITerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorSinkAccess().getSEMITerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorSink_IncomingAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorSink ****************/


/************ begin Rule ErrorPath ****************
 *
 * ErrorPath:
 * 	"error" "path" incoming=ErrorPropagationReference "->" outgoing=ErrorPropagationReference SEMI;
 *
 **/

// "error" "path" incoming=ErrorPropagationReference "->" outgoing=ErrorPropagationReference SEMI
protected class ErrorPath_Group extends GroupToken {
	
	public ErrorPath_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorPathAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPath_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorPathRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "error"
protected class ErrorPath_ErrorKeyword_0 extends KeywordToken  {
	
	public ErrorPath_ErrorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPathAccess().getErrorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "path"
protected class ErrorPath_PathKeyword_1 extends KeywordToken  {
	
	public ErrorPath_PathKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPathAccess().getPathKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPath_ErrorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// incoming=ErrorPropagationReference
protected class ErrorPath_IncomingAssignment_2 extends AssignmentToken  {
	
	public ErrorPath_IncomingAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPathAccess().getIncomingAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("incoming",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("incoming");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorPathAccess().getIncomingErrorPropagationReferenceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorPath_PathKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "->"
protected class ErrorPath_HyphenMinusGreaterThanSignKeyword_3 extends KeywordToken  {
	
	public ErrorPath_HyphenMinusGreaterThanSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorPathAccess().getHyphenMinusGreaterThanSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPath_IncomingAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// outgoing=ErrorPropagationReference
protected class ErrorPath_OutgoingAssignment_4 extends AssignmentToken  {
	
	public ErrorPath_OutgoingAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPathAccess().getOutgoingAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("outgoing",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("outgoing");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorPathAccess().getOutgoingErrorPropagationReferenceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorPath_HyphenMinusGreaterThanSignKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMI
protected class ErrorPath_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public ErrorPath_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorPathAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPath_OutgoingAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorPath ****************/


/************ begin Rule ErrorPropagationReference ****************
 *
 * ErrorPropagationReference:
 * 	(binding=BindingKind | feature=[Feature] | self?="self") LBRACKET errortype=[ErrorType] RBRACKET;
 *
 **/

// (binding=BindingKind | feature=[Feature] | self?="self") LBRACKET errortype=[ErrorType] RBRACKET
protected class ErrorPropagationReference_Group extends GroupToken {
	
	public ErrorPropagationReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorPropagationReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_RBRACKETTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// binding=BindingKind | feature=[Feature] | self?="self"
protected class ErrorPropagationReference_Alternatives_0 extends AlternativesToken {

	public ErrorPropagationReference_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getErrorPropagationReferenceAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_BindingAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorPropagationReference_FeatureAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ErrorPropagationReference_SelfAssignment_0_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// binding=BindingKind
protected class ErrorPropagationReference_BindingAssignment_0_0 extends AssignmentToken  {
	
	public ErrorPropagationReference_BindingAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationReferenceAccess().getBindingAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("binding",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("binding");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorPropagationReferenceAccess().getBindingBindingKindParserRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getErrorPropagationReferenceAccess().getBindingBindingKindParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// feature=[Feature]
protected class ErrorPropagationReference_FeatureAssignment_0_1 extends AssignmentToken  {
	
	public ErrorPropagationReference_FeatureAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationReferenceAccess().getFeatureAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("feature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationReferenceAccess().getFeatureFeatureCrossReference_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorPropagationReferenceAccess().getFeatureFeatureCrossReference_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// self?="self"
protected class ErrorPropagationReference_SelfAssignment_0_2 extends AssignmentToken  {
	
	public ErrorPropagationReference_SelfAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationReferenceAccess().getSelfAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("self",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("self");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getErrorPropagationReferenceAccess().getSelfSelfKeyword_0_2_0();
			return obj;
		}
		return null;
	}

}


// LBRACKET
protected class ErrorPropagationReference_LBRACKETTerminalRuleCall_1 extends UnassignedTextToken {

	public ErrorPropagationReference_LBRACKETTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorPropagationReferenceAccess().getLBRACKETTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// errortype=[ErrorType]
protected class ErrorPropagationReference_ErrortypeAssignment_2 extends AssignmentToken  {
	
	public ErrorPropagationReference_ErrortypeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorPropagationReferenceAccess().getErrortypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_LBRACKETTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("errortype",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("errortype");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorPropagationReferenceAccess().getErrortypeErrorTypeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorPropagationReferenceAccess().getErrortypeErrorTypeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// RBRACKET
protected class ErrorPropagationReference_RBRACKETTerminalRuleCall_3 extends UnassignedTextToken {

	public ErrorPropagationReference_RBRACKETTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorPropagationReferenceAccess().getRBRACKETTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_ErrortypeAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorPropagationReference ****************/


/************ begin Rule ErrorBehaviorStateMachine ****************
 *
 * ErrorBehaviorStateMachine:
 * 	"error" "model" name=ID ("extends" extends=[ErrorBehaviorStateMachine])? ("use"
 * 	importedNamespace=QualifiedNameWithWildCard SEMI)? //use=[ErrorTypeSet|ID] SEMI )?
 * 	("events" events+=ErrorBehaviorEvent+)? ("states" states+=ErrorBehaviorState+)? ("transitions"
 * 	transitions+=ErrorBehaviorTransition+)? "end" ID SEMI;
 *
 **/

// "error" "model" name=ID ("extends" extends=[ErrorBehaviorStateMachine])? ("use"
// importedNamespace=QualifiedNameWithWildCard SEMI)? //use=[ErrorTypeSet|ID] SEMI )?
// ("events" events+=ErrorBehaviorEvent+)? ("states" states+=ErrorBehaviorState+)? ("transitions"
// transitions+=ErrorBehaviorTransition+)? "end" ID SEMI
protected class ErrorBehaviorStateMachine_Group extends GroupToken {
	
	public ErrorBehaviorStateMachine_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_SEMITerminalRuleCall_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorBehaviorStateMachineRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "error"
protected class ErrorBehaviorStateMachine_ErrorKeyword_0 extends KeywordToken  {
	
	public ErrorBehaviorStateMachine_ErrorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getErrorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "model"
protected class ErrorBehaviorStateMachine_ModelKeyword_1 extends KeywordToken  {
	
	public ErrorBehaviorStateMachine_ModelKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getModelKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_ErrorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class ErrorBehaviorStateMachine_NameAssignment_2 extends AssignmentToken  {
	
	public ErrorBehaviorStateMachine_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_ModelKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorBehaviorStateMachineAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getErrorBehaviorStateMachineAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (=> "extends" extends=[ErrorBehaviorStateMachine])?
protected class ErrorBehaviorStateMachine_Group_3 extends GroupToken {
	
	public ErrorBehaviorStateMachine_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_ExtendsAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "extends"
protected class ErrorBehaviorStateMachine_ExtendsKeyword_3_0 extends KeywordToken  {
	
	public ErrorBehaviorStateMachine_ExtendsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getExtendsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extends=[ErrorBehaviorStateMachine]
protected class ErrorBehaviorStateMachine_ExtendsAssignment_3_1 extends AssignmentToken  {
	
	public ErrorBehaviorStateMachine_ExtendsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getExtendsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_ExtendsKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extends",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorBehaviorStateMachineAccess().getExtendsErrorBehaviorStateMachineCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorBehaviorStateMachineAccess().getExtendsErrorBehaviorStateMachineCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// (=> "use" importedNamespace=QualifiedNameWithWildCard SEMI)?
protected class ErrorBehaviorStateMachine_Group_4 extends GroupToken {
	
	public ErrorBehaviorStateMachine_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_SEMITerminalRuleCall_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "use"
protected class ErrorBehaviorStateMachine_UseKeyword_4_0 extends KeywordToken  {
	
	public ErrorBehaviorStateMachine_UseKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getUseKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorBehaviorStateMachine_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// importedNamespace=QualifiedNameWithWildCard
protected class ErrorBehaviorStateMachine_ImportedNamespaceAssignment_4_1 extends AssignmentToken  {
	
	public ErrorBehaviorStateMachine_ImportedNamespaceAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getImportedNamespaceAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_UseKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedNamespace",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedNamespace");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorBehaviorStateMachineAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getErrorBehaviorStateMachineAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}

// SEMI
protected class ErrorBehaviorStateMachine_SEMITerminalRuleCall_4_2 extends UnassignedTextToken {

	public ErrorBehaviorStateMachine_SEMITerminalRuleCall_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getSEMITerminalRuleCall_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_ImportedNamespaceAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// (=> "events" events+=ErrorBehaviorEvent+)?
protected class ErrorBehaviorStateMachine_Group_5 extends GroupToken {
	
	public ErrorBehaviorStateMachine_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_EventsAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "events"
protected class ErrorBehaviorStateMachine_EventsKeyword_5_0 extends KeywordToken  {
	
	public ErrorBehaviorStateMachine_EventsKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getEventsKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorBehaviorStateMachine_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ErrorBehaviorStateMachine_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// events+=ErrorBehaviorEvent+
protected class ErrorBehaviorStateMachine_EventsAssignment_5_1 extends AssignmentToken  {
	
	public ErrorBehaviorStateMachine_EventsAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getEventsAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorEvent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("events",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("events");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorBehaviorEventRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorBehaviorStateMachineAccess().getEventsErrorBehaviorEventParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_EventsAssignment_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorBehaviorStateMachine_EventsKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (=> "states" states+=ErrorBehaviorState+)?
protected class ErrorBehaviorStateMachine_Group_6 extends GroupToken {
	
	public ErrorBehaviorStateMachine_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_StatesAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "states"
protected class ErrorBehaviorStateMachine_StatesKeyword_6_0 extends KeywordToken  {
	
	public ErrorBehaviorStateMachine_StatesKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getStatesKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorBehaviorStateMachine_Group_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ErrorBehaviorStateMachine_Group_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ErrorBehaviorStateMachine_NameAssignment_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// states+=ErrorBehaviorState+
protected class ErrorBehaviorStateMachine_StatesAssignment_6_1 extends AssignmentToken  {
	
	public ErrorBehaviorStateMachine_StatesAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getStatesAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorState_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("states",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("states");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorBehaviorStateRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorBehaviorStateMachineAccess().getStatesErrorBehaviorStateParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_StatesAssignment_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorBehaviorStateMachine_StatesKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (=> "transitions" transitions+=ErrorBehaviorTransition+)?
protected class ErrorBehaviorStateMachine_Group_7 extends GroupToken {
	
	public ErrorBehaviorStateMachine_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_TransitionsAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// => "transitions"
protected class ErrorBehaviorStateMachine_TransitionsKeyword_7_0 extends KeywordToken  {
	
	public ErrorBehaviorStateMachine_TransitionsKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getTransitionsKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorBehaviorStateMachine_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ErrorBehaviorStateMachine_Group_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ErrorBehaviorStateMachine_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ErrorBehaviorStateMachine_NameAssignment_2(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// transitions+=ErrorBehaviorTransition+
protected class ErrorBehaviorStateMachine_TransitionsAssignment_7_1 extends AssignmentToken  {
	
	public ErrorBehaviorStateMachine_TransitionsAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getTransitionsAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorTransition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("transitions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("transitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorBehaviorTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorBehaviorStateMachineAccess().getTransitionsErrorBehaviorTransitionParserRuleCall_7_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_TransitionsAssignment_7_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorBehaviorStateMachine_TransitionsKeyword_7_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "end"
protected class ErrorBehaviorStateMachine_EndKeyword_8 extends KeywordToken  {
	
	public ErrorBehaviorStateMachine_EndKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getEndKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorBehaviorStateMachine_Group_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ErrorBehaviorStateMachine_Group_5(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ErrorBehaviorStateMachine_Group_4(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ErrorBehaviorStateMachine_Group_3(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ErrorBehaviorStateMachine_NameAssignment_2(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// ID
protected class ErrorBehaviorStateMachine_IDTerminalRuleCall_9 extends UnassignedTextToken {

	public ErrorBehaviorStateMachine_IDTerminalRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getIDTerminalRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_EndKeyword_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class ErrorBehaviorStateMachine_SEMITerminalRuleCall_10 extends UnassignedTextToken {

	public ErrorBehaviorStateMachine_SEMITerminalRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateMachineAccess().getSEMITerminalRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorStateMachine_IDTerminalRuleCall_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorBehaviorStateMachine ****************/


/************ begin Rule ErrorBehaviorEvent ****************
 *
 * ErrorBehaviorEvent:
 * 	ErrorEvent | RepairEvent;
 *
 **/

// ErrorEvent | RepairEvent
protected class ErrorBehaviorEvent_Alternatives extends AlternativesToken {

	public ErrorBehaviorEvent_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getErrorBehaviorEventAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorEvent_ErrorEventParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorBehaviorEvent_RepairEventParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorEventRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRepairEventRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ErrorEvent
protected class ErrorBehaviorEvent_ErrorEventParserRuleCall_0 extends RuleCallToken {
	
	public ErrorBehaviorEvent_ErrorEventParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorEventAccess().getErrorEventParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorEvent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorEventRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ErrorEvent_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RepairEvent
protected class ErrorBehaviorEvent_RepairEventParserRuleCall_1 extends RuleCallToken {
	
	public ErrorBehaviorEvent_RepairEventParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorEventAccess().getRepairEventParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RepairEvent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRepairEventRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RepairEvent_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ErrorBehaviorEvent ****************/


/************ begin Rule ErrorEvent ****************
 *
 * // add event condition and properties
 * ErrorEvent:
 * 	name=ID COLON "error" "event" SEMI;
 *
 **/

// name=ID COLON "error" "event" SEMI
protected class ErrorEvent_Group extends GroupToken {
	
	public ErrorEvent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorEventAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorEvent_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorEventRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class ErrorEvent_NameAssignment_0 extends AssignmentToken  {
	
	public ErrorEvent_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorEventAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorEventAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getErrorEventAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class ErrorEvent_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public ErrorEvent_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorEventAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorEvent_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "error"
protected class ErrorEvent_ErrorKeyword_2 extends KeywordToken  {
	
	public ErrorEvent_ErrorKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorEventAccess().getErrorKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorEvent_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "event"
protected class ErrorEvent_EventKeyword_3 extends KeywordToken  {
	
	public ErrorEvent_EventKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorEventAccess().getEventKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorEvent_ErrorKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class ErrorEvent_SEMITerminalRuleCall_4 extends UnassignedTextToken {

	public ErrorEvent_SEMITerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorEventAccess().getSEMITerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorEvent_EventKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorEvent ****************/


/************ begin Rule RepairEvent ****************
 *
 * //add repair initiator and properties
 * RepairEvent:
 * 	name=ID COLON "repair" "event" SEMI;
 *
 **/

// name=ID COLON "repair" "event" SEMI
protected class RepairEvent_Group extends GroupToken {
	
	public RepairEvent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRepairEventAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RepairEvent_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRepairEventRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class RepairEvent_NameAssignment_0 extends AssignmentToken  {
	
	public RepairEvent_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRepairEventAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRepairEventAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRepairEventAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class RepairEvent_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public RepairEvent_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRepairEventAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RepairEvent_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "repair"
protected class RepairEvent_RepairKeyword_2 extends KeywordToken  {
	
	public RepairEvent_RepairKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRepairEventAccess().getRepairKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RepairEvent_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "event"
protected class RepairEvent_EventKeyword_3 extends KeywordToken  {
	
	public RepairEvent_EventKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRepairEventAccess().getEventKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RepairEvent_RepairKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class RepairEvent_SEMITerminalRuleCall_4 extends UnassignedTextToken {

	public RepairEvent_SEMITerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRepairEventAccess().getSEMITerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RepairEvent_EventKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule RepairEvent ****************/


/************ begin Rule ErrorBehaviorState ****************
 *
 * ErrorBehaviorState:
 * 	name=ID intial?="initial"? "state" (LCURLY properties+=PropertyAssociation+ RCURLY)? SEMI;
 *
 **/

// name=ID intial?="initial"? "state" (LCURLY properties+=PropertyAssociation+ RCURLY)? SEMI
protected class ErrorBehaviorState_Group extends GroupToken {
	
	public ErrorBehaviorState_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorState_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorBehaviorStateRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class ErrorBehaviorState_NameAssignment_0 extends AssignmentToken  {
	
	public ErrorBehaviorState_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getErrorBehaviorStateAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getErrorBehaviorStateAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// intial?="initial"?
protected class ErrorBehaviorState_IntialAssignment_1 extends AssignmentToken  {
	
	public ErrorBehaviorState_IntialAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateAccess().getIntialAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorState_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("intial",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("intial");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getErrorBehaviorStateAccess().getIntialInitialKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// "state"
protected class ErrorBehaviorState_StateKeyword_2 extends KeywordToken  {
	
	public ErrorBehaviorState_StateKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateAccess().getStateKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorState_IntialAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorBehaviorState_NameAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (LCURLY properties+=PropertyAssociation+ RCURLY)?
protected class ErrorBehaviorState_Group_3 extends GroupToken {
	
	public ErrorBehaviorState_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorState_RCURLYTerminalRuleCall_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LCURLY
protected class ErrorBehaviorState_LCURLYTerminalRuleCall_3_0 extends UnassignedTextToken {

	public ErrorBehaviorState_LCURLYTerminalRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateAccess().getLCURLYTerminalRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorState_StateKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// properties+=PropertyAssociation+
protected class ErrorBehaviorState_PropertiesAssignment_3_1 extends AssignmentToken  {
	
	public ErrorBehaviorState_PropertiesAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateAccess().getPropertiesAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertyAssociation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("properties",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyAssociationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getErrorBehaviorStateAccess().getPropertiesPropertyAssociationParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ErrorBehaviorState_PropertiesAssignment_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ErrorBehaviorState_LCURLYTerminalRuleCall_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RCURLY
protected class ErrorBehaviorState_RCURLYTerminalRuleCall_3_2 extends UnassignedTextToken {

	public ErrorBehaviorState_RCURLYTerminalRuleCall_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateAccess().getRCURLYTerminalRuleCall_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorState_PropertiesAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// SEMI
protected class ErrorBehaviorState_SEMITerminalRuleCall_4 extends UnassignedTextToken {

	public ErrorBehaviorState_SEMITerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorStateAccess().getSEMITerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorState_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorBehaviorState_StateKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ErrorBehaviorState ****************/


/************ begin Rule ErrorBehaviorTransition ****************
 *
 * ErrorBehaviorTransition:
 * 	TriggeredTransition | BranchTransition;
 *
 **/

// TriggeredTransition | BranchTransition
protected class ErrorBehaviorTransition_Alternatives extends AlternativesToken {

	public ErrorBehaviorTransition_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getErrorBehaviorTransitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorBehaviorTransition_TriggeredTransitionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ErrorBehaviorTransition_BranchTransitionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBranchTransitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTriggeredTransitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TriggeredTransition
protected class ErrorBehaviorTransition_TriggeredTransitionParserRuleCall_0 extends RuleCallToken {
	
	public ErrorBehaviorTransition_TriggeredTransitionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorTransitionAccess().getTriggeredTransitionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTriggeredTransitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TriggeredTransition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BranchTransition
protected class ErrorBehaviorTransition_BranchTransitionParserRuleCall_1 extends RuleCallToken {
	
	public ErrorBehaviorTransition_BranchTransitionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getErrorBehaviorTransitionAccess().getBranchTransitionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BranchTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBranchTransitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BranchTransition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ErrorBehaviorTransition ****************/


/************ begin Rule TriggeredTransition ****************
 *
 * TriggeredTransition:
 * 	name=ID COLON source=[ErrorBehaviorState] ("->" | LTRANS events+=[ErrorBehaviorEvent] (COMMA
 * 	events+=[ErrorBehaviorEvent])* RTRANS) destination=[ErrorBehaviorState] SEMI;
 *
 **/

// name=ID COLON source=[ErrorBehaviorState] ("->" | LTRANS events+=[ErrorBehaviorEvent] (COMMA
// events+=[ErrorBehaviorEvent])* RTRANS) destination=[ErrorBehaviorState] SEMI
protected class TriggeredTransition_Group extends GroupToken {
	
	public TriggeredTransition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTriggeredTransitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class TriggeredTransition_NameAssignment_0 extends AssignmentToken  {
	
	public TriggeredTransition_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTriggeredTransitionAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTriggeredTransitionAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// COLON
protected class TriggeredTransition_COLONTerminalRuleCall_1 extends UnassignedTextToken {

	public TriggeredTransition_COLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getCOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// source=[ErrorBehaviorState]
protected class TriggeredTransition_SourceAssignment_2 extends AssignmentToken  {
	
	public TriggeredTransition_SourceAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getSourceAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_COLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("source",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggeredTransitionAccess().getSourceErrorBehaviorStateCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTriggeredTransitionAccess().getSourceErrorBehaviorStateCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "->" | LTRANS events+=[ErrorBehaviorEvent] (COMMA events+=[ErrorBehaviorEvent])* RTRANS
protected class TriggeredTransition_Alternatives_3 extends AlternativesToken {

	public TriggeredTransition_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_HyphenMinusGreaterThanSignKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TriggeredTransition_Group_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "->"
protected class TriggeredTransition_HyphenMinusGreaterThanSignKeyword_3_0 extends KeywordToken  {
	
	public TriggeredTransition_HyphenMinusGreaterThanSignKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getHyphenMinusGreaterThanSignKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_SourceAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LTRANS events+=[ErrorBehaviorEvent] (COMMA events+=[ErrorBehaviorEvent])* RTRANS
protected class TriggeredTransition_Group_3_1 extends GroupToken {
	
	public TriggeredTransition_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_RTRANSTerminalRuleCall_3_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LTRANS
protected class TriggeredTransition_LTRANSTerminalRuleCall_3_1_0 extends UnassignedTextToken {

	public TriggeredTransition_LTRANSTerminalRuleCall_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getLTRANSTerminalRuleCall_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_SourceAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// events+=[ErrorBehaviorEvent]
protected class TriggeredTransition_EventsAssignment_3_1_1 extends AssignmentToken  {
	
	public TriggeredTransition_EventsAssignment_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getEventsAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_LTRANSTerminalRuleCall_3_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("events",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("events");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggeredTransitionAccess().getEventsErrorBehaviorEventCrossReference_3_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTriggeredTransitionAccess().getEventsErrorBehaviorEventCrossReference_3_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (COMMA events+=[ErrorBehaviorEvent])*
protected class TriggeredTransition_Group_3_1_2 extends GroupToken {
	
	public TriggeredTransition_Group_3_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getGroup_3_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_EventsAssignment_3_1_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class TriggeredTransition_COMMATerminalRuleCall_3_1_2_0 extends UnassignedTextToken {

	public TriggeredTransition_COMMATerminalRuleCall_3_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getCOMMATerminalRuleCall_3_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_Group_3_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TriggeredTransition_EventsAssignment_3_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// events+=[ErrorBehaviorEvent]
protected class TriggeredTransition_EventsAssignment_3_1_2_1 extends AssignmentToken  {
	
	public TriggeredTransition_EventsAssignment_3_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getEventsAssignment_3_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_COMMATerminalRuleCall_3_1_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("events",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("events");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggeredTransitionAccess().getEventsErrorBehaviorEventCrossReference_3_1_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTriggeredTransitionAccess().getEventsErrorBehaviorEventCrossReference_3_1_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// RTRANS
protected class TriggeredTransition_RTRANSTerminalRuleCall_3_1_3 extends UnassignedTextToken {

	public TriggeredTransition_RTRANSTerminalRuleCall_3_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getRTRANSTerminalRuleCall_3_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_Group_3_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TriggeredTransition_EventsAssignment_3_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



// destination=[ErrorBehaviorState]
protected class TriggeredTransition_DestinationAssignment_4 extends AssignmentToken  {
	
	public TriggeredTransition_DestinationAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getDestinationAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("destination",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("destination");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggeredTransitionAccess().getDestinationErrorBehaviorStateCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTriggeredTransitionAccess().getDestinationErrorBehaviorStateCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// SEMI
protected class TriggeredTransition_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public TriggeredTransition_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTriggeredTransitionAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggeredTransition_DestinationAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule TriggeredTransition ****************/


/************ begin Rule BranchTransition ****************
 *
 * BranchTransition:
 * 	source=[ErrorBehaviorState] "-(" value=BranchValue ")->" destination=[ErrorBehaviorState] SEMI;
 *
 **/

// source=[ErrorBehaviorState] "-(" value=BranchValue ")->" destination=[ErrorBehaviorState] SEMI
protected class BranchTransition_Group extends GroupToken {
	
	public BranchTransition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBranchTransitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BranchTransition_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBranchTransitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// source=[ErrorBehaviorState]
protected class BranchTransition_SourceAssignment_0 extends AssignmentToken  {
	
	public BranchTransition_SourceAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBranchTransitionAccess().getSourceAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("source",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBranchTransitionAccess().getSourceErrorBehaviorStateCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getBranchTransitionAccess().getSourceErrorBehaviorStateCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "-("
protected class BranchTransition_HyphenMinusLeftParenthesisKeyword_1 extends KeywordToken  {
	
	public BranchTransition_HyphenMinusLeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBranchTransitionAccess().getHyphenMinusLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BranchTransition_SourceAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=BranchValue
protected class BranchTransition_ValueAssignment_2 extends AssignmentToken  {
	
	public BranchTransition_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBranchTransitionAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BranchTransition_HyphenMinusLeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBranchTransitionAccess().getValueBranchValueParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getBranchTransitionAccess().getValueBranchValueParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ")->"
protected class BranchTransition_RightParenthesisHyphenMinusGreaterThanSignKeyword_3 extends KeywordToken  {
	
	public BranchTransition_RightParenthesisHyphenMinusGreaterThanSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBranchTransitionAccess().getRightParenthesisHyphenMinusGreaterThanSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BranchTransition_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// destination=[ErrorBehaviorState]
protected class BranchTransition_DestinationAssignment_4 extends AssignmentToken  {
	
	public BranchTransition_DestinationAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBranchTransitionAccess().getDestinationAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BranchTransition_RightParenthesisHyphenMinusGreaterThanSignKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("destination",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("destination");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBranchTransitionAccess().getDestinationErrorBehaviorStateCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getBranchTransitionAccess().getDestinationErrorBehaviorStateCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// SEMI
protected class BranchTransition_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public BranchTransition_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBranchTransitionAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BranchTransition_DestinationAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule BranchTransition ****************/



/************ begin Rule ComponentErrorBehavior ****************
 *
 * ComponentErrorBehavior:
 * 	"error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
 * 	SEMI ("transition" "conditions" transitionCondition+=TransitionCondition+)? ("propagation" "conditions"
 * 	propagationCondition+=PropagationCondition+)? ("detection" "events" detectionEvent+=DetectionEvent+)? "end" SEMI;
 *
 **/

// "error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
// SEMI ("transition" "conditions" transitionCondition+=TransitionCondition+)? ("propagation" "conditions"
// propagationCondition+=PropagationCondition+)? ("detection" "events" detectionEvent+=DetectionEvent+)? "end" SEMI
protected class ComponentErrorBehavior_Group extends GroupToken {
	
	public ComponentErrorBehavior_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_SEMITerminalRuleCall_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentErrorBehaviorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "error"
protected class ComponentErrorBehavior_ErrorKeyword_0 extends KeywordToken  {
	
	public ComponentErrorBehavior_ErrorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getErrorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "behavior"
protected class ComponentErrorBehavior_BehaviorKeyword_1 extends KeywordToken  {
	
	public ComponentErrorBehavior_BehaviorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getBehaviorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_ErrorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "use"
protected class ComponentErrorBehavior_UseKeyword_2 extends KeywordToken  {
	
	public ComponentErrorBehavior_UseKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getUseKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_BehaviorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// importedNamespace=QualifiedNameWithWildCard
protected class ComponentErrorBehavior_ImportedNamespaceAssignment_3 extends AssignmentToken  {
	
	public ComponentErrorBehavior_ImportedNamespaceAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getImportedNamespaceAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_UseKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedNamespace",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedNamespace");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getComponentErrorBehaviorAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getComponentErrorBehaviorAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// //[ErrorBehaviorStateMachine|ID] SEMI
// SEMI
protected class ComponentErrorBehavior_SEMITerminalRuleCall_4 extends UnassignedTextToken {

	public ComponentErrorBehavior_SEMITerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getSEMITerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_ImportedNamespaceAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("transition" "conditions" transitionCondition+=TransitionCondition+)?
protected class ComponentErrorBehavior_Group_5 extends GroupToken {
	
	public ComponentErrorBehavior_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_TransitionConditionAssignment_5_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "transition"
protected class ComponentErrorBehavior_TransitionKeyword_5_0 extends KeywordToken  {
	
	public ComponentErrorBehavior_TransitionKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getTransitionKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "conditions"
protected class ComponentErrorBehavior_ConditionsKeyword_5_1 extends KeywordToken  {
	
	public ComponentErrorBehavior_ConditionsKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getConditionsKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_TransitionKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// transitionCondition+=TransitionCondition+
protected class ComponentErrorBehavior_TransitionConditionAssignment_5_2 extends AssignmentToken  {
	
	public ComponentErrorBehavior_TransitionConditionAssignment_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getTransitionConditionAssignment_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("transitionCondition",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("transitionCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransitionConditionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComponentErrorBehaviorAccess().getTransitionConditionTransitionConditionParserRuleCall_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentErrorBehavior_TransitionConditionAssignment_5_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ComponentErrorBehavior_ConditionsKeyword_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("propagation" "conditions" propagationCondition+=PropagationCondition+)?
protected class ComponentErrorBehavior_Group_6 extends GroupToken {
	
	public ComponentErrorBehavior_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_PropagationConditionAssignment_6_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "propagation"
protected class ComponentErrorBehavior_PropagationKeyword_6_0 extends KeywordToken  {
	
	public ComponentErrorBehavior_PropagationKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getPropagationKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentErrorBehavior_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "conditions"
protected class ComponentErrorBehavior_ConditionsKeyword_6_1 extends KeywordToken  {
	
	public ComponentErrorBehavior_ConditionsKeyword_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getConditionsKeyword_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_PropagationKeyword_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// propagationCondition+=PropagationCondition+
protected class ComponentErrorBehavior_PropagationConditionAssignment_6_2 extends AssignmentToken  {
	
	public ComponentErrorBehavior_PropagationConditionAssignment_6_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getPropagationConditionAssignment_6_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("propagationCondition",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("propagationCondition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropagationConditionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComponentErrorBehaviorAccess().getPropagationConditionPropagationConditionParserRuleCall_6_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentErrorBehavior_PropagationConditionAssignment_6_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ComponentErrorBehavior_ConditionsKeyword_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("detection" "events" detectionEvent+=DetectionEvent+)?
protected class ComponentErrorBehavior_Group_7 extends GroupToken {
	
	public ComponentErrorBehavior_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_DetectionEventAssignment_7_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "detection"
protected class ComponentErrorBehavior_DetectionKeyword_7_0 extends KeywordToken  {
	
	public ComponentErrorBehavior_DetectionKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getDetectionKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentErrorBehavior_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ComponentErrorBehavior_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// "events"
protected class ComponentErrorBehavior_EventsKeyword_7_1 extends KeywordToken  {
	
	public ComponentErrorBehavior_EventsKeyword_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getEventsKeyword_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_DetectionKeyword_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// detectionEvent+=DetectionEvent+
protected class ComponentErrorBehavior_DetectionEventAssignment_7_2 extends AssignmentToken  {
	
	public ComponentErrorBehavior_DetectionEventAssignment_7_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getDetectionEventAssignment_7_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DetectionEvent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("detectionEvent",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("detectionEvent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDetectionEventRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComponentErrorBehaviorAccess().getDetectionEventDetectionEventParserRuleCall_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentErrorBehavior_DetectionEventAssignment_7_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ComponentErrorBehavior_EventsKeyword_7_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "end"
protected class ComponentErrorBehavior_EndKeyword_8 extends KeywordToken  {
	
	public ComponentErrorBehavior_EndKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getEndKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComponentErrorBehavior_Group_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ComponentErrorBehavior_Group_5(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ComponentErrorBehavior_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class ComponentErrorBehavior_SEMITerminalRuleCall_9 extends UnassignedTextToken {

	public ComponentErrorBehavior_SEMITerminalRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentErrorBehaviorAccess().getSEMITerminalRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentErrorBehavior_EndKeyword_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ComponentErrorBehavior ****************/




/************ begin Rule TransitionCondition ****************
 *
 * TransitionCondition:
 * 	(errorTransition=[TriggeredTransition] | mask?="mask") "when" condition=TriggerConditionExpression SEMI;
 *
 **/

// (errorTransition=[TriggeredTransition] | mask?="mask") "when" condition=TriggerConditionExpression SEMI
protected class TransitionCondition_Group extends GroupToken {
	
	public TransitionCondition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTransitionConditionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionCondition_SEMITerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTransitionConditionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// errorTransition=[TriggeredTransition] | mask?="mask"
protected class TransitionCondition_Alternatives_0 extends AlternativesToken {

	public TransitionCondition_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTransitionConditionAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionCondition_ErrorTransitionAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TransitionCondition_MaskAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// errorTransition=[TriggeredTransition]
protected class TransitionCondition_ErrorTransitionAssignment_0_0 extends AssignmentToken  {
	
	public TransitionCondition_ErrorTransitionAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionConditionAccess().getErrorTransitionAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("errorTransition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("errorTransition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransitionConditionAccess().getErrorTransitionTriggeredTransitionCrossReference_0_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTransitionConditionAccess().getErrorTransitionTriggeredTransitionCrossReference_0_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// mask?="mask"
protected class TransitionCondition_MaskAssignment_0_1 extends AssignmentToken  {
	
	public TransitionCondition_MaskAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionConditionAccess().getMaskAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mask",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mask");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTransitionConditionAccess().getMaskMaskKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}


// "when"
protected class TransitionCondition_WhenKeyword_1 extends KeywordToken  {
	
	public TransitionCondition_WhenKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransitionConditionAccess().getWhenKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionCondition_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// condition=TriggerConditionExpression
protected class TransitionCondition_ConditionAssignment_2 extends AssignmentToken  {
	
	public TransitionCondition_ConditionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionConditionAccess().getConditionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("condition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransitionConditionAccess().getConditionTriggerConditionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TransitionCondition_WhenKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMI
protected class TransitionCondition_SEMITerminalRuleCall_3 extends UnassignedTextToken {

	public TransitionCondition_SEMITerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTransitionConditionAccess().getSEMITerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionCondition_ConditionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule TransitionCondition ****************/


/************ begin Rule TriggerConditionExpression ****************
 *
 * TriggerConditionExpression:
 * 	OrExpression | OrmoreExpression | OrlessExpression | OthersExpression;
 *
 **/

// OrExpression | OrmoreExpression | OrlessExpression | OthersExpression
protected class TriggerConditionExpression_Alternatives extends AlternativesToken {

	public TriggerConditionExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTriggerConditionExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerConditionExpression_OrExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TriggerConditionExpression_OrmoreExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TriggerConditionExpression_OrlessExpressionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new TriggerConditionExpression_OthersExpressionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrlessExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrmoreExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// OrExpression
protected class TriggerConditionExpression_OrExpressionParserRuleCall_0 extends RuleCallToken {
	
	public TriggerConditionExpression_OrExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTriggerConditionExpressionAccess().getOrExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(OrExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OrmoreExpression
protected class TriggerConditionExpression_OrmoreExpressionParserRuleCall_1 extends RuleCallToken {
	
	public TriggerConditionExpression_OrmoreExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTriggerConditionExpressionAccess().getOrmoreExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrmoreExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(OrmoreExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OrlessExpression
protected class TriggerConditionExpression_OrlessExpressionParserRuleCall_2 extends RuleCallToken {
	
	public TriggerConditionExpression_OrlessExpressionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTriggerConditionExpressionAccess().getOrlessExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrlessExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(OrlessExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OthersExpression
protected class TriggerConditionExpression_OthersExpressionParserRuleCall_3 extends RuleCallToken {
	
	public TriggerConditionExpression_OthersExpressionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTriggerConditionExpressionAccess().getOthersExpressionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OthersExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(OthersExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TriggerConditionExpression ****************/


/************ begin Rule AndExpression ****************
 *
 * AndExpression returns TriggerConditionExpression:
 * 	Primary ({AndExpression.operands+=current} "and" operands+=Primary)*;
 *
 **/

// Primary ({AndExpression.operands+=current} "and" operands+=Primary)*
protected class AndExpression_Group extends GroupToken {
	
	public AndExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndExpression_PrimaryParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrlessExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrmoreExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Primary
protected class AndExpression_PrimaryParserRuleCall_0 extends RuleCallToken {
	
	public AndExpression_PrimaryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getPrimaryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Primary_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({AndExpression.operands+=current} "and" operands+=Primary)*
protected class AndExpression_Group_1 extends GroupToken {
	
	public AndExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_OperandsAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AndExpression.operands+=current}
protected class AndExpression_AndExpressionOperandsAction_1_0 extends ActionToken  {

	public AndExpression_AndExpressionOperandsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndExpression_PrimaryParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operands", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operands")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "and"
protected class AndExpression_AndKeyword_1_1 extends KeywordToken  {
	
	public AndExpression_AndKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getAndKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_AndExpressionOperandsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operands+=Primary
protected class AndExpression_OperandsAssignment_1_2 extends AssignmentToken  {
	
	public AndExpression_OperandsAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getOperandsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimaryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAndExpressionAccess().getOperandsPrimaryParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpression_AndKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpression ****************/


/************ begin Rule OrExpression ****************
 *
 * OrExpression returns TriggerConditionExpression:
 * 	AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*;
 *
 **/

// AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*
protected class OrExpression_Group extends GroupToken {
	
	public OrExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrlessExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrmoreExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AndExpression
protected class OrExpression_AndExpressionParserRuleCall_0 extends RuleCallToken {
	
	public OrExpression_AndExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AndExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OrExpression.operands+=current} "or" operands+=AndExpression)*
protected class OrExpression_Group_1 extends GroupToken {
	
	public OrExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_OperandsAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OrExpression.operands+=current}
protected class OrExpression_OrExpressionOperandsAction_1_0 extends ActionToken  {

	public OrExpression_OrExpressionOperandsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operands", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operands")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "or"
protected class OrExpression_OrKeyword_1_1 extends KeywordToken  {
	
	public OrExpression_OrKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOrKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_OrExpressionOperandsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operands+=AndExpression
protected class OrExpression_OperandsAssignment_1_2 extends AssignmentToken  {
	
	public OrExpression_OperandsAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOperandsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpression_OrKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpression ****************/


/************ begin Rule OrmoreExpression ****************
 *
 * OrmoreExpression:
 * 	count=INT "ormore" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS;
 *
 **/

// count=INT "ormore" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS
protected class OrmoreExpression_Group extends GroupToken {
	
	public OrmoreExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrmoreExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreExpression_RPARENSTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrmoreExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// count=INT
protected class OrmoreExpression_CountAssignment_0 extends AssignmentToken  {
	
	public OrmoreExpression_CountAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrmoreExpressionAccess().getCountAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("count",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("count");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOrmoreExpressionAccess().getCountINTTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOrmoreExpressionAccess().getCountINTTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "ormore"
protected class OrmoreExpression_OrmoreKeyword_1 extends KeywordToken  {
	
	public OrmoreExpression_OrmoreKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrmoreExpressionAccess().getOrmoreKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreExpression_CountAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class OrmoreExpression_LPARENSTerminalRuleCall_2 extends UnassignedTextToken {

	public OrmoreExpression_LPARENSTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrmoreExpressionAccess().getLPARENSTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreExpression_OrmoreKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operands+=TriggerConditionExpression
protected class OrmoreExpression_OperandsAssignment_3 extends AssignmentToken  {
	
	public OrmoreExpression_OperandsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrmoreExpressionAccess().getOperandsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrmoreExpressionAccess().getOperandsTriggerConditionExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrmoreExpression_LPARENSTerminalRuleCall_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (COMMA operands+=TriggerConditionExpression)*
protected class OrmoreExpression_Group_4 extends GroupToken {
	
	public OrmoreExpression_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrmoreExpressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreExpression_OperandsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class OrmoreExpression_COMMATerminalRuleCall_4_0 extends UnassignedTextToken {

	public OrmoreExpression_COMMATerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrmoreExpressionAccess().getCOMMATerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreExpression_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrmoreExpression_OperandsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// operands+=TriggerConditionExpression
protected class OrmoreExpression_OperandsAssignment_4_1 extends AssignmentToken  {
	
	public OrmoreExpression_OperandsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrmoreExpressionAccess().getOperandsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrmoreExpressionAccess().getOperandsTriggerConditionExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrmoreExpression_COMMATerminalRuleCall_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// RPARENS
protected class OrmoreExpression_RPARENSTerminalRuleCall_5 extends UnassignedTextToken {

	public OrmoreExpression_RPARENSTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrmoreExpressionAccess().getRPARENSTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreExpression_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrmoreExpression_OperandsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule OrmoreExpression ****************/


/************ begin Rule OrlessExpression ****************
 *
 * OrlessExpression:
 * 	count=INT "orless" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS;
 *
 **/

// count=INT "orless" LPARENS operands+=TriggerConditionExpression (COMMA operands+=TriggerConditionExpression)* RPARENS
protected class OrlessExpression_Group extends GroupToken {
	
	public OrlessExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrlessExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessExpression_RPARENSTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrlessExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// count=INT
protected class OrlessExpression_CountAssignment_0 extends AssignmentToken  {
	
	public OrlessExpression_CountAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrlessExpressionAccess().getCountAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("count",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("count");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOrlessExpressionAccess().getCountINTTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOrlessExpressionAccess().getCountINTTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "orless"
protected class OrlessExpression_OrlessKeyword_1 extends KeywordToken  {
	
	public OrlessExpression_OrlessKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrlessExpressionAccess().getOrlessKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessExpression_CountAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class OrlessExpression_LPARENSTerminalRuleCall_2 extends UnassignedTextToken {

	public OrlessExpression_LPARENSTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrlessExpressionAccess().getLPARENSTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessExpression_OrlessKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operands+=TriggerConditionExpression
protected class OrlessExpression_OperandsAssignment_3 extends AssignmentToken  {
	
	public OrlessExpression_OperandsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrlessExpressionAccess().getOperandsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrlessExpressionAccess().getOperandsTriggerConditionExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrlessExpression_LPARENSTerminalRuleCall_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (COMMA operands+=TriggerConditionExpression)*
protected class OrlessExpression_Group_4 extends GroupToken {
	
	public OrlessExpression_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrlessExpressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessExpression_OperandsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class OrlessExpression_COMMATerminalRuleCall_4_0 extends UnassignedTextToken {

	public OrlessExpression_COMMATerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrlessExpressionAccess().getCOMMATerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessExpression_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrlessExpression_OperandsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// operands+=TriggerConditionExpression
protected class OrlessExpression_OperandsAssignment_4_1 extends AssignmentToken  {
	
	public OrlessExpression_OperandsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrlessExpressionAccess().getOperandsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrlessExpressionAccess().getOperandsTriggerConditionExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrlessExpression_COMMATerminalRuleCall_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// RPARENS
protected class OrlessExpression_RPARENSTerminalRuleCall_5 extends UnassignedTextToken {

	public OrlessExpression_RPARENSTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrlessExpressionAccess().getRPARENSTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessExpression_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrlessExpression_OperandsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule OrlessExpression ****************/


/************ begin Rule OthersExpression ****************
 *
 * OthersExpression:
 * 	{OthersExpression} "others";
 *
 **/

// {OthersExpression} "others"
protected class OthersExpression_Group extends GroupToken {
	
	public OthersExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOthersExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OthersExpression_OthersKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OthersExpression}
protected class OthersExpression_OthersExpressionAction_0 extends ActionToken  {

	public OthersExpression_OthersExpressionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "others"
protected class OthersExpression_OthersKeyword_1 extends KeywordToken  {
	
	public OthersExpression_OthersKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOthersExpressionAccess().getOthersKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OthersExpression_OthersExpressionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule OthersExpression ****************/


/************ begin Rule Primary ****************
 *
 * Primary returns TriggerConditionExpression:
 * 	ErrorEventReference | ErrorPropagationReference | WorkingReference | LPARENS TriggerConditionExpression RPARENS;
 *
 **/

// ErrorEventReference | ErrorPropagationReference | WorkingReference | LPARENS TriggerConditionExpression RPARENS
protected class Primary_Alternatives extends AlternativesToken {

	public Primary_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_ErrorEventReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Primary_ErrorPropagationReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Primary_WorkingReferenceParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Primary_Group_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrlessExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrmoreExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ErrorEventReference
protected class Primary_ErrorEventReferenceParserRuleCall_0 extends RuleCallToken {
	
	public Primary_ErrorEventReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryAccess().getErrorEventReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorEventReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ErrorEventReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ErrorPropagationReference
protected class Primary_ErrorPropagationReferenceParserRuleCall_1 extends RuleCallToken {
	
	public Primary_ErrorPropagationReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryAccess().getErrorPropagationReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorPropagationReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ErrorPropagationReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WorkingReference
protected class Primary_WorkingReferenceParserRuleCall_2 extends RuleCallToken {
	
	public Primary_WorkingReferenceParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryAccess().getWorkingReferenceParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WorkingReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WorkingReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LPARENS TriggerConditionExpression RPARENS
protected class Primary_Group_3 extends GroupToken {
	
	public Primary_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimaryAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_RPARENSTerminalRuleCall_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class Primary_LPARENSTerminalRuleCall_3_0 extends UnassignedTextToken {

	public Primary_LPARENSTerminalRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryAccess().getLPARENSTerminalRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// TriggerConditionExpression
protected class Primary_TriggerConditionExpressionParserRuleCall_3_1 extends RuleCallToken {
	
	public Primary_TriggerConditionExpressionParserRuleCall_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryAccess().getTriggerConditionExpressionParserRuleCall_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TriggerConditionExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_LPARENSTerminalRuleCall_3_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// RPARENS
protected class Primary_RPARENSTerminalRuleCall_3_2 extends UnassignedTextToken {

	public Primary_RPARENSTerminalRuleCall_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryAccess().getRPARENSTerminalRuleCall_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_TriggerConditionExpressionParserRuleCall_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule Primary ****************/


/************ begin Rule ErrorEventReference ****************
 *
 * ErrorEventReference:
 * 	"event" reference=[ErrorBehaviorEvent];
 *
 **/

// "event" reference=[ErrorBehaviorEvent]
protected class ErrorEventReference_Group extends GroupToken {
	
	public ErrorEventReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getErrorEventReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorEventReference_ReferenceAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "event"
protected class ErrorEventReference_EventKeyword_0 extends KeywordToken  {
	
	public ErrorEventReference_EventKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getErrorEventReferenceAccess().getEventKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// reference=[ErrorBehaviorEvent]
protected class ErrorEventReference_ReferenceAssignment_1 extends AssignmentToken  {
	
	public ErrorEventReference_ReferenceAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getErrorEventReferenceAccess().getReferenceAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ErrorEventReference_EventKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("reference",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("reference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getErrorEventReferenceAccess().getReferenceErrorBehaviorEventCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getErrorEventReferenceAccess().getReferenceErrorBehaviorEventCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ErrorEventReference ****************/


/************ begin Rule WorkingReference ****************
 *
 * WorkingReference:
 * 	(binding=BindingKind | feature=[Feature] | self?="self") LBRACKET working?="working" RBRACKET;
 *
 **/

// (binding=BindingKind | feature=[Feature] | self?="self") LBRACKET working?="working" RBRACKET
protected class WorkingReference_Group extends GroupToken {
	
	public WorkingReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWorkingReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WorkingReference_RBRACKETTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// binding=BindingKind | feature=[Feature] | self?="self"
protected class WorkingReference_Alternatives_0 extends AlternativesToken {

	public WorkingReference_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWorkingReferenceAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WorkingReference_BindingAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WorkingReference_FeatureAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WorkingReference_SelfAssignment_0_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// binding=BindingKind
protected class WorkingReference_BindingAssignment_0_0 extends AssignmentToken  {
	
	public WorkingReference_BindingAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWorkingReferenceAccess().getBindingAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("binding",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("binding");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWorkingReferenceAccess().getBindingBindingKindParserRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getWorkingReferenceAccess().getBindingBindingKindParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// feature=[Feature]
protected class WorkingReference_FeatureAssignment_0_1 extends AssignmentToken  {
	
	public WorkingReference_FeatureAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWorkingReferenceAccess().getFeatureAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("feature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWorkingReferenceAccess().getFeatureFeatureCrossReference_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getWorkingReferenceAccess().getFeatureFeatureCrossReference_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// self?="self"
protected class WorkingReference_SelfAssignment_0_2 extends AssignmentToken  {
	
	public WorkingReference_SelfAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWorkingReferenceAccess().getSelfAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("self",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("self");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWorkingReferenceAccess().getSelfSelfKeyword_0_2_0();
			return obj;
		}
		return null;
	}

}


// LBRACKET
protected class WorkingReference_LBRACKETTerminalRuleCall_1 extends UnassignedTextToken {

	public WorkingReference_LBRACKETTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWorkingReferenceAccess().getLBRACKETTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WorkingReference_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// working?="working"
protected class WorkingReference_WorkingAssignment_2 extends AssignmentToken  {
	
	public WorkingReference_WorkingAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWorkingReferenceAccess().getWorkingAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WorkingReference_LBRACKETTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("working",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("working");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWorkingReferenceAccess().getWorkingWorkingKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// RBRACKET
protected class WorkingReference_RBRACKETTerminalRuleCall_3 extends UnassignedTextToken {

	public WorkingReference_RBRACKETTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWorkingReferenceAccess().getRBRACKETTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WorkingReference_WorkingAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule WorkingReference ****************/


/************ begin Rule PropagationCondition ****************
 *
 * PropagationCondition:
 * 	(outPropagation=[ErrorPropagation] | mask?="mask" | working?="working") "when" (state=[ErrorBehaviorState] "and")?
 * 	condition=TriggerConditionExpression ("applies" "to" feature+=[Feature] (COMMA feature+=[Feature])*)? SEMI;
 *
 **/

// (outPropagation=[ErrorPropagation] | mask?="mask" | working?="working") "when" (state=[ErrorBehaviorState] "and")?
// condition=TriggerConditionExpression ("applies" "to" feature+=[Feature] (COMMA feature+=[Feature])*)? SEMI
protected class PropagationCondition_Group extends GroupToken {
	
	public PropagationCondition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPropagationConditionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// outPropagation=[ErrorPropagation] | mask?="mask" | working?="working"
protected class PropagationCondition_Alternatives_0 extends AlternativesToken {

	public PropagationCondition_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_OutPropagationAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PropagationCondition_MaskAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PropagationCondition_WorkingAssignment_0_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// outPropagation=[ErrorPropagation]
protected class PropagationCondition_OutPropagationAssignment_0_0 extends AssignmentToken  {
	
	public PropagationCondition_OutPropagationAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getOutPropagationAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("outPropagation",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("outPropagation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropagationConditionAccess().getOutPropagationErrorPropagationCrossReference_0_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPropagationConditionAccess().getOutPropagationErrorPropagationCrossReference_0_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// mask?="mask"
protected class PropagationCondition_MaskAssignment_0_1 extends AssignmentToken  {
	
	public PropagationCondition_MaskAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getMaskAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mask",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mask");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPropagationConditionAccess().getMaskMaskKeyword_0_1_0();
			return obj;
		}
		return null;
	}

}

// working?="working"
protected class PropagationCondition_WorkingAssignment_0_2 extends AssignmentToken  {
	
	public PropagationCondition_WorkingAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getWorkingAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("working",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("working");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getPropagationConditionAccess().getWorkingWorkingKeyword_0_2_0();
			return obj;
		}
		return null;
	}

}


// "when"
protected class PropagationCondition_WhenKeyword_1 extends KeywordToken  {
	
	public PropagationCondition_WhenKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getWhenKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (state=[ErrorBehaviorState] "and")?
protected class PropagationCondition_Group_2 extends GroupToken {
	
	public PropagationCondition_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_AndKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// state=[ErrorBehaviorState]
protected class PropagationCondition_StateAssignment_2_0 extends AssignmentToken  {
	
	public PropagationCondition_StateAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getStateAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_WhenKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("state",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("state");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropagationConditionAccess().getStateErrorBehaviorStateCrossReference_2_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPropagationConditionAccess().getStateErrorBehaviorStateCrossReference_2_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "and"
protected class PropagationCondition_AndKeyword_2_1 extends KeywordToken  {
	
	public PropagationCondition_AndKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getAndKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_StateAssignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// condition=TriggerConditionExpression
protected class PropagationCondition_ConditionAssignment_3 extends AssignmentToken  {
	
	public PropagationCondition_ConditionAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getConditionAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("condition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPropagationConditionAccess().getConditionTriggerConditionExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropagationCondition_Group_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PropagationCondition_WhenKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (=> "applies" "to" feature+=[Feature] (COMMA feature+=[Feature])*)?
protected class PropagationCondition_Group_4 extends GroupToken {
	
	public PropagationCondition_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PropagationCondition_FeatureAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// => "applies"
protected class PropagationCondition_AppliesKeyword_4_0 extends KeywordToken  {
	
	public PropagationCondition_AppliesKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getAppliesKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_ConditionAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "to"
protected class PropagationCondition_ToKeyword_4_1 extends KeywordToken  {
	
	public PropagationCondition_ToKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getToKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_AppliesKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// feature+=[Feature]
protected class PropagationCondition_FeatureAssignment_4_2 extends AssignmentToken  {
	
	public PropagationCondition_FeatureAssignment_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getFeatureAssignment_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_ToKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("feature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropagationConditionAccess().getFeatureFeatureCrossReference_4_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPropagationConditionAccess().getFeatureFeatureCrossReference_4_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (COMMA feature+=[Feature])*
protected class PropagationCondition_Group_4_3 extends GroupToken {
	
	public PropagationCondition_Group_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getGroup_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_FeatureAssignment_4_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class PropagationCondition_COMMATerminalRuleCall_4_3_0 extends UnassignedTextToken {

	public PropagationCondition_COMMATerminalRuleCall_4_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getCOMMATerminalRuleCall_4_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_Group_4_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PropagationCondition_FeatureAssignment_4_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// feature+=[Feature]
protected class PropagationCondition_FeatureAssignment_4_3_1 extends AssignmentToken  {
	
	public PropagationCondition_FeatureAssignment_4_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getFeatureAssignment_4_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_COMMATerminalRuleCall_4_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("feature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropagationConditionAccess().getFeatureFeatureCrossReference_4_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPropagationConditionAccess().getFeatureFeatureCrossReference_4_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



// SEMI
protected class PropagationCondition_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public PropagationCondition_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropagationConditionAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropagationCondition_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PropagationCondition_ConditionAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule PropagationCondition ****************/


/************ begin Rule DetectionEvent ****************
 *
 * DetectionEvent:
 * 	(self?="self" DOT)? eventPort=[Feature] "when" condition=TriggerConditionExpression SEMI;
 *
 **/

// (self?="self" DOT)? eventPort=[Feature] "when" condition=TriggerConditionExpression SEMI
protected class DetectionEvent_Group extends GroupToken {
	
	public DetectionEvent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDetectionEventAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DetectionEvent_SEMITerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDetectionEventRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// (self?="self" DOT)?
protected class DetectionEvent_Group_0 extends GroupToken {
	
	public DetectionEvent_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDetectionEventAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DetectionEvent_DOTTerminalRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// self?="self"
protected class DetectionEvent_SelfAssignment_0_0 extends AssignmentToken  {
	
	public DetectionEvent_SelfAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDetectionEventAccess().getSelfAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("self",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("self");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDetectionEventAccess().getSelfSelfKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// DOT
protected class DetectionEvent_DOTTerminalRuleCall_0_1 extends UnassignedTextToken {

	public DetectionEvent_DOTTerminalRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDetectionEventAccess().getDOTTerminalRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DetectionEvent_SelfAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// eventPort=[Feature]
protected class DetectionEvent_EventPortAssignment_1 extends AssignmentToken  {
	
	public DetectionEvent_EventPortAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDetectionEventAccess().getEventPortAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DetectionEvent_Group_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eventPort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eventPort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDetectionEventAccess().getEventPortFeatureCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getDetectionEventAccess().getEventPortFeatureCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "when"
protected class DetectionEvent_WhenKeyword_2 extends KeywordToken  {
	
	public DetectionEvent_WhenKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDetectionEventAccess().getWhenKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DetectionEvent_EventPortAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// condition=TriggerConditionExpression
protected class DetectionEvent_ConditionAssignment_3 extends AssignmentToken  {
	
	public DetectionEvent_ConditionAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDetectionEventAccess().getConditionAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TriggerConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("condition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTriggerConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDetectionEventAccess().getConditionTriggerConditionExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DetectionEvent_WhenKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMI
protected class DetectionEvent_SEMITerminalRuleCall_4 extends UnassignedTextToken {

	public DetectionEvent_SEMITerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDetectionEventAccess().getSEMITerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DetectionEvent_ConditionAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DetectionEvent ****************/


/************ begin Rule CompositeErrorBehavior ****************
 *
 * CompositeErrorBehavior:
 * 	"composite" "error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
 * 	SEMI ("states" state+=CompositeState+)? "end" SEMI;
 *
 **/

// "composite" "error" "behavior" "use" importedNamespace=QualifiedNameWithWildCard //[ErrorBehaviorStateMachine|ID] SEMI
// SEMI ("states" state+=CompositeState+)? "end" SEMI
protected class CompositeErrorBehavior_Group extends GroupToken {
	
	public CompositeErrorBehavior_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_SEMITerminalRuleCall_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompositeErrorBehaviorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "composite"
protected class CompositeErrorBehavior_CompositeKeyword_0 extends KeywordToken  {
	
	public CompositeErrorBehavior_CompositeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getCompositeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "error"
protected class CompositeErrorBehavior_ErrorKeyword_1 extends KeywordToken  {
	
	public CompositeErrorBehavior_ErrorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getErrorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_CompositeKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "behavior"
protected class CompositeErrorBehavior_BehaviorKeyword_2 extends KeywordToken  {
	
	public CompositeErrorBehavior_BehaviorKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getBehaviorKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_ErrorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "use"
protected class CompositeErrorBehavior_UseKeyword_3 extends KeywordToken  {
	
	public CompositeErrorBehavior_UseKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getUseKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_BehaviorKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// importedNamespace=QualifiedNameWithWildCard
protected class CompositeErrorBehavior_ImportedNamespaceAssignment_4 extends AssignmentToken  {
	
	public CompositeErrorBehavior_ImportedNamespaceAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getImportedNamespaceAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_UseKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedNamespace",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedNamespace");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCompositeErrorBehaviorAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCompositeErrorBehaviorAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// //[ErrorBehaviorStateMachine|ID] SEMI
// SEMI
protected class CompositeErrorBehavior_SEMITerminalRuleCall_5 extends UnassignedTextToken {

	public CompositeErrorBehavior_SEMITerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getSEMITerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_ImportedNamespaceAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("states" state+=CompositeState+)?
protected class CompositeErrorBehavior_Group_6 extends GroupToken {
	
	public CompositeErrorBehavior_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_StateAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "states"
protected class CompositeErrorBehavior_StatesKeyword_6_0 extends KeywordToken  {
	
	public CompositeErrorBehavior_StatesKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getStatesKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// state+=CompositeState+
protected class CompositeErrorBehavior_StateAssignment_6_1 extends AssignmentToken  {
	
	public CompositeErrorBehavior_StateAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getStateAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeState_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("state",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("state");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeStateRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCompositeErrorBehaviorAccess().getStateCompositeStateParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeErrorBehavior_StateAssignment_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new CompositeErrorBehavior_StatesKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "end"
protected class CompositeErrorBehavior_EndKeyword_7 extends KeywordToken  {
	
	public CompositeErrorBehavior_EndKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getEndKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CompositeErrorBehavior_SEMITerminalRuleCall_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// SEMI
protected class CompositeErrorBehavior_SEMITerminalRuleCall_8 extends UnassignedTextToken {

	public CompositeErrorBehavior_SEMITerminalRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompositeErrorBehaviorAccess().getSEMITerminalRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeErrorBehavior_EndKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule CompositeErrorBehavior ****************/


/************ begin Rule CompositeState ****************
 *
 * CompositeState:
 * 	state=[ErrorBehaviorState] "when" condition=StateConditionExpression SEMI;
 *
 **/

// state=[ErrorBehaviorState] "when" condition=StateConditionExpression SEMI
protected class CompositeState_Group extends GroupToken {
	
	public CompositeState_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeStateAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeState_SEMITerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompositeStateRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// state=[ErrorBehaviorState]
protected class CompositeState_StateAssignment_0 extends AssignmentToken  {
	
	public CompositeState_StateAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeStateAccess().getStateAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("state",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("state");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeStateAccess().getStateErrorBehaviorStateCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getCompositeStateAccess().getStateErrorBehaviorStateCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "when"
protected class CompositeState_WhenKeyword_1 extends KeywordToken  {
	
	public CompositeState_WhenKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeStateAccess().getWhenKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeState_StateAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// condition=StateConditionExpression
protected class CompositeState_ConditionAssignment_2 extends AssignmentToken  {
	
	public CompositeState_ConditionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeStateAccess().getConditionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("condition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCompositeStateAccess().getConditionStateConditionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeState_WhenKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMI
protected class CompositeState_SEMITerminalRuleCall_3 extends UnassignedTextToken {

	public CompositeState_SEMITerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompositeStateAccess().getSEMITerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompositeState_ConditionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule CompositeState ****************/


/************ begin Rule StateConditionExpression ****************
 *
 * StateConditionExpression:
 * 	OrSExpression | OrmoreSExpression | OrlessSExpression | OthersExpression;
 *
 **/

// OrSExpression | OrmoreSExpression | OrlessSExpression | OthersExpression
protected class StateConditionExpression_Alternatives extends AlternativesToken {

	public StateConditionExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateConditionExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateConditionExpression_OrSExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StateConditionExpression_OrmoreSExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new StateConditionExpression_OrlessSExpressionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new StateConditionExpression_OthersExpressionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrlessSExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrmoreSExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// OrSExpression
protected class StateConditionExpression_OrSExpressionParserRuleCall_0 extends RuleCallToken {
	
	public StateConditionExpression_OrSExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStateConditionExpressionAccess().getOrSExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrSExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(OrSExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OrmoreSExpression
protected class StateConditionExpression_OrmoreSExpressionParserRuleCall_1 extends RuleCallToken {
	
	public StateConditionExpression_OrmoreSExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStateConditionExpressionAccess().getOrmoreSExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreSExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrmoreSExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(OrmoreSExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OrlessSExpression
protected class StateConditionExpression_OrlessSExpressionParserRuleCall_2 extends RuleCallToken {
	
	public StateConditionExpression_OrlessSExpressionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStateConditionExpressionAccess().getOrlessSExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessSExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrlessSExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(OrlessSExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OthersExpression
protected class StateConditionExpression_OthersExpressionParserRuleCall_3 extends RuleCallToken {
	
	public StateConditionExpression_OthersExpressionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStateConditionExpressionAccess().getOthersExpressionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OthersExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(OthersExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule StateConditionExpression ****************/


/************ begin Rule AndSExpression ****************
 *
 * AndSExpression returns StateConditionExpression:
 * 	Primary ({AndExpression.operands+=current} "and" operands+=Primary)*;
 *
 **/

// Primary ({AndExpression.operands+=current} "and" operands+=Primary)*
protected class AndSExpression_Group extends GroupToken {
	
	public AndSExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndSExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndSExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndSExpression_PrimaryParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrlessExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrmoreExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Primary
protected class AndSExpression_PrimaryParserRuleCall_0 extends RuleCallToken {
	
	public AndSExpression_PrimaryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndSExpressionAccess().getPrimaryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Primary_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({AndExpression.operands+=current} "and" operands+=Primary)*
protected class AndSExpression_Group_1 extends GroupToken {
	
	public AndSExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndSExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndSExpression_OperandsAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndSExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AndExpression.operands+=current}
protected class AndSExpression_AndExpressionOperandsAction_1_0 extends ActionToken  {

	public AndSExpression_AndExpressionOperandsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAndSExpressionAccess().getAndExpressionOperandsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndSExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndSExpression_PrimaryParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operands", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operands")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "and"
protected class AndSExpression_AndKeyword_1_1 extends KeywordToken  {
	
	public AndSExpression_AndKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAndSExpressionAccess().getAndKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndSExpression_AndExpressionOperandsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operands+=Primary
protected class AndSExpression_OperandsAssignment_1_2 extends AssignmentToken  {
	
	public AndSExpression_OperandsAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndSExpressionAccess().getOperandsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Primary_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimaryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAndSExpressionAccess().getOperandsPrimaryParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndSExpression_AndKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndSExpression ****************/


/************ begin Rule OrSExpression ****************
 *
 * OrSExpression returns StateConditionExpression:
 * 	AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*;
 *
 **/

// AndExpression ({OrExpression.operands+=current} "or" operands+=AndExpression)*
protected class OrSExpression_Group extends GroupToken {
	
	public OrSExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrSExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrSExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrSExpression_AndExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrlessExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrmoreExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AndExpression
protected class OrSExpression_AndExpressionParserRuleCall_0 extends RuleCallToken {
	
	public OrSExpression_AndExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrSExpressionAccess().getAndExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AndExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OrExpression.operands+=current} "or" operands+=AndExpression)*
protected class OrSExpression_Group_1 extends GroupToken {
	
	public OrSExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrSExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrSExpression_OperandsAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrSExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OrExpression.operands+=current}
protected class OrSExpression_OrExpressionOperandsAction_1_0 extends ActionToken  {

	public OrSExpression_OrExpressionOperandsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOrSExpressionAccess().getOrExpressionOperandsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrSExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrSExpression_AndExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operands", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operands")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "or"
protected class OrSExpression_OrKeyword_1_1 extends KeywordToken  {
	
	public OrSExpression_OrKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrSExpressionAccess().getOrKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrSExpression_OrExpressionOperandsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operands+=AndExpression
protected class OrSExpression_OperandsAssignment_1_2 extends AssignmentToken  {
	
	public OrSExpression_OperandsAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrSExpressionAccess().getOperandsAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrSExpressionAccess().getOperandsAndExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrSExpression_OrKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrSExpression ****************/


/************ begin Rule OrmoreSExpression ****************
 *
 * OrmoreSExpression returns OrmoreExpression:
 * 	count=INT "ormore" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS;
 *
 **/

// count=INT "ormore" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS
protected class OrmoreSExpression_Group extends GroupToken {
	
	public OrmoreSExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrmoreSExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreSExpression_RPARENSTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrmoreSExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// count=INT
protected class OrmoreSExpression_CountAssignment_0 extends AssignmentToken  {
	
	public OrmoreSExpression_CountAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrmoreSExpressionAccess().getCountAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("count",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("count");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOrmoreSExpressionAccess().getCountINTTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOrmoreSExpressionAccess().getCountINTTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "ormore"
protected class OrmoreSExpression_OrmoreKeyword_1 extends KeywordToken  {
	
	public OrmoreSExpression_OrmoreKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrmoreSExpressionAccess().getOrmoreKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreSExpression_CountAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class OrmoreSExpression_LPARENSTerminalRuleCall_2 extends UnassignedTextToken {

	public OrmoreSExpression_LPARENSTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrmoreSExpressionAccess().getLPARENSTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreSExpression_OrmoreKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operands+=StateConditionExpression
protected class OrmoreSExpression_OperandsAssignment_3 extends AssignmentToken  {
	
	public OrmoreSExpression_OperandsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrmoreSExpressionAccess().getOperandsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrmoreSExpressionAccess().getOperandsStateConditionExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrmoreSExpression_LPARENSTerminalRuleCall_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (COMMA operands+=StateConditionExpression)*
protected class OrmoreSExpression_Group_4 extends GroupToken {
	
	public OrmoreSExpression_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrmoreSExpressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreSExpression_OperandsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class OrmoreSExpression_COMMATerminalRuleCall_4_0 extends UnassignedTextToken {

	public OrmoreSExpression_COMMATerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrmoreSExpressionAccess().getCOMMATerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreSExpression_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrmoreSExpression_OperandsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// operands+=StateConditionExpression
protected class OrmoreSExpression_OperandsAssignment_4_1 extends AssignmentToken  {
	
	public OrmoreSExpression_OperandsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrmoreSExpressionAccess().getOperandsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrmoreSExpressionAccess().getOperandsStateConditionExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrmoreSExpression_COMMATerminalRuleCall_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// RPARENS
protected class OrmoreSExpression_RPARENSTerminalRuleCall_5 extends UnassignedTextToken {

	public OrmoreSExpression_RPARENSTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrmoreSExpressionAccess().getRPARENSTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrmoreSExpression_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrmoreSExpression_OperandsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule OrmoreSExpression ****************/


/************ begin Rule OrlessSExpression ****************
 *
 * OrlessSExpression returns OrlessExpression:
 * 	count=INT "orless" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS;
 *
 **/

// count=INT "orless" LPARENS operands+=StateConditionExpression (COMMA operands+=StateConditionExpression)* RPARENS
protected class OrlessSExpression_Group extends GroupToken {
	
	public OrlessSExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrlessSExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessSExpression_RPARENSTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrlessSExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// count=INT
protected class OrlessSExpression_CountAssignment_0 extends AssignmentToken  {
	
	public OrlessSExpression_CountAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrlessSExpressionAccess().getCountAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("count",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("count");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOrlessSExpressionAccess().getCountINTTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOrlessSExpressionAccess().getCountINTTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "orless"
protected class OrlessSExpression_OrlessKeyword_1 extends KeywordToken  {
	
	public OrlessSExpression_OrlessKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrlessSExpressionAccess().getOrlessKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessSExpression_CountAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// LPARENS
protected class OrlessSExpression_LPARENSTerminalRuleCall_2 extends UnassignedTextToken {

	public OrlessSExpression_LPARENSTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrlessSExpressionAccess().getLPARENSTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessSExpression_OrlessKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operands+=StateConditionExpression
protected class OrlessSExpression_OperandsAssignment_3 extends AssignmentToken  {
	
	public OrlessSExpression_OperandsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrlessSExpressionAccess().getOperandsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrlessSExpressionAccess().getOperandsStateConditionExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrlessSExpression_LPARENSTerminalRuleCall_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (COMMA operands+=StateConditionExpression)*
protected class OrlessSExpression_Group_4 extends GroupToken {
	
	public OrlessSExpression_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrlessSExpressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessSExpression_OperandsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class OrlessSExpression_COMMATerminalRuleCall_4_0 extends UnassignedTextToken {

	public OrlessSExpression_COMMATerminalRuleCall_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrlessSExpressionAccess().getCOMMATerminalRuleCall_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessSExpression_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrlessSExpression_OperandsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// operands+=StateConditionExpression
protected class OrlessSExpression_OperandsAssignment_4_1 extends AssignmentToken  {
	
	public OrlessSExpression_OperandsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrlessSExpressionAccess().getOperandsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operands",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateConditionExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrlessSExpressionAccess().getOperandsStateConditionExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrlessSExpression_COMMATerminalRuleCall_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// RPARENS
protected class OrlessSExpression_RPARENSTerminalRuleCall_5 extends UnassignedTextToken {

	public OrlessSExpression_RPARENSTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrlessSExpressionAccess().getRPARENSTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrlessSExpression_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrlessSExpression_OperandsAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule OrlessSExpression ****************/


/************ begin Rule SPrimary ****************
 *
 * SPrimary returns StateConditionExpression:
 * 	SubcomponentStateReference | LPARENS StateConditionExpression RPARENS;
 *
 **/

// SubcomponentStateReference | LPARENS StateConditionExpression RPARENS
protected class SPrimary_Alternatives extends AlternativesToken {

	public SPrimary_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSPrimaryAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SPrimary_SubcomponentStateReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SPrimary_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrlessSExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrmoreSExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSubcomponentStateReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SubcomponentStateReference
protected class SPrimary_SubcomponentStateReferenceParserRuleCall_0 extends RuleCallToken {
	
	public SPrimary_SubcomponentStateReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSPrimaryAccess().getSubcomponentStateReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubcomponentStateReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSubcomponentStateReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SubcomponentStateReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LPARENS StateConditionExpression RPARENS
protected class SPrimary_Group_1 extends GroupToken {
	
	public SPrimary_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSPrimaryAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SPrimary_RPARENSTerminalRuleCall_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorEventReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getErrorPropagationReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrlessSExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrmoreSExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOthersExpressionAccess().getOthersExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWorkingReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LPARENS
protected class SPrimary_LPARENSTerminalRuleCall_1_0 extends UnassignedTextToken {

	public SPrimary_LPARENSTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSPrimaryAccess().getLPARENSTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// StateConditionExpression
protected class SPrimary_StateConditionExpressionParserRuleCall_1_1 extends RuleCallToken {
	
	public SPrimary_StateConditionExpressionParserRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSPrimaryAccess().getStateConditionExpressionParserRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateConditionExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(StateConditionExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SPrimary_LPARENSTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// RPARENS
protected class SPrimary_RPARENSTerminalRuleCall_1_2 extends UnassignedTextToken {

	public SPrimary_RPARENSTerminalRuleCall_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSPrimaryAccess().getRPARENSTerminalRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SPrimary_StateConditionExpressionParserRuleCall_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule SPrimary ****************/


/************ begin Rule SubcomponentStateReference ****************
 *
 * SubcomponentStateReference:
 * 	subcomponent=[Feature] LBRACKET errortype=[ErrorBehaviorState] RBRACKET;
 *
 **/

// subcomponent=[Feature] LBRACKET errortype=[ErrorBehaviorState] RBRACKET
protected class SubcomponentStateReference_Group extends GroupToken {
	
	public SubcomponentStateReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubcomponentStateReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubcomponentStateReference_RBRACKETTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSubcomponentStateReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// subcomponent=[Feature]
protected class SubcomponentStateReference_SubcomponentAssignment_0 extends AssignmentToken  {
	
	public SubcomponentStateReference_SubcomponentAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubcomponentStateReferenceAccess().getSubcomponentAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subcomponent",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subcomponent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubcomponentStateReferenceAccess().getSubcomponentFeatureCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getSubcomponentStateReferenceAccess().getSubcomponentFeatureCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// LBRACKET
protected class SubcomponentStateReference_LBRACKETTerminalRuleCall_1 extends UnassignedTextToken {

	public SubcomponentStateReference_LBRACKETTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubcomponentStateReferenceAccess().getLBRACKETTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubcomponentStateReference_SubcomponentAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// errortype=[ErrorBehaviorState]
protected class SubcomponentStateReference_ErrortypeAssignment_2 extends AssignmentToken  {
	
	public SubcomponentStateReference_ErrortypeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubcomponentStateReferenceAccess().getErrortypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubcomponentStateReference_LBRACKETTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("errortype",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("errortype");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubcomponentStateReferenceAccess().getErrortypeErrorBehaviorStateCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getSubcomponentStateReferenceAccess().getErrortypeErrorBehaviorStateCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// RBRACKET
protected class SubcomponentStateReference_RBRACKETTerminalRuleCall_3 extends UnassignedTextToken {

	public SubcomponentStateReference_RBRACKETTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubcomponentStateReferenceAccess().getRBRACKETTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubcomponentStateReference_ErrortypeAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SubcomponentStateReference ****************/


/************ begin Rule PropertyAssociation ****************
 *
 * PropertyAssociation:
 * 	name=ID ASSIGN value=PropertyExpression SEMI;
 *
 **/

// name=ID ASSIGN value=PropertyExpression SEMI
protected class PropertyAssociation_Group extends GroupToken {
	
	public PropertyAssociation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertyAssociationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertyAssociation_SEMITerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPropertyAssociationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class PropertyAssociation_NameAssignment_0 extends AssignmentToken  {
	
	public PropertyAssociation_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAssociationAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPropertyAssociationAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPropertyAssociationAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ASSIGN
protected class PropertyAssociation_ASSIGNTerminalRuleCall_1 extends UnassignedTextToken {

	public PropertyAssociation_ASSIGNTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAssociationAccess().getASSIGNTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertyAssociation_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=PropertyExpression
protected class PropertyAssociation_ValueAssignment_2 extends AssignmentToken  {
	
	public PropertyAssociation_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAssociationAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertyExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPropertyAssociationAccess().getValuePropertyExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyAssociation_ASSIGNTerminalRuleCall_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// SEMI
protected class PropertyAssociation_SEMITerminalRuleCall_3 extends UnassignedTextToken {

	public PropertyAssociation_SEMITerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAssociationAccess().getSEMITerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertyAssociation_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule PropertyAssociation ****************/


/************ begin Rule PropertyExpression ****************
 *
 * PropertyExpression:
 * 	Literal | ProbabilityValue;
 *
 **/

// Literal | ProbabilityValue
protected class PropertyExpression_Alternatives extends AlternativesToken {

	public PropertyExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropertyExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertyExpression_LiteralParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PropertyExpression_ProbabilityValueParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProbabilityValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Literal
protected class PropertyExpression_LiteralParserRuleCall_0 extends RuleCallToken {
	
	public PropertyExpression_LiteralParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyExpressionAccess().getLiteralParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Literal_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Literal_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ProbabilityValue
protected class PropertyExpression_ProbabilityValueParserRuleCall_1 extends RuleCallToken {
	
	public PropertyExpression_ProbabilityValueParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyExpressionAccess().getProbabilityValueParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProbabilityValue_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProbabilityValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ProbabilityValue_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PropertyExpression ****************/


/************ begin Rule Literal ****************
 *
 * Literal:
 * 	name=ID;
 *
 **/

// name=ID
protected class Literal_NameAssignment extends AssignmentToken  {
	
	public Literal_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralAccess().getNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Literal ****************/


/************ begin Rule ProbabilityValue ****************
 *
 * ProbabilityValue:
 * 	number=REAL distribution=ID;
 *
 **/

// number=REAL distribution=ID
protected class ProbabilityValue_Group extends GroupToken {
	
	public ProbabilityValue_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProbabilityValueAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProbabilityValue_DistributionAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProbabilityValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// number=REAL
protected class ProbabilityValue_NumberAssignment_0 extends AssignmentToken  {
	
	public ProbabilityValue_NumberAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProbabilityValueAccess().getNumberAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("number",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("number");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProbabilityValueAccess().getNumberREALParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getProbabilityValueAccess().getNumberREALParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// distribution=ID
protected class ProbabilityValue_DistributionAssignment_1 extends AssignmentToken  {
	
	public ProbabilityValue_DistributionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProbabilityValueAccess().getDistributionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProbabilityValue_NumberAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("distribution",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("distribution");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProbabilityValueAccess().getDistributionIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProbabilityValueAccess().getDistributionIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ProbabilityValue ****************/






}
